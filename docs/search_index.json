[
["index.html", "PyRanges documentation 1 Introduction to PyRanges", " PyRanges documentation Endre Bakken Stovner 2019-05-15 1 Introduction to PyRanges PyRanges are collections of intervals that support comparison operations (like overlap and intersect) and other methods that are useful for genomic analyses. The ranges can have an arbitrary number of meta-data fields, i.e.Â columns associated with them. The data in PyRanges objects are stored in a pandas dataframe. This means the vast Python ecosystem for high-performance scientific computing is available to manipulate the data in PyRanges-objects. import pyranges as pr from pyranges import PyRanges import pandas as pd from io import StringIO f1 = &quot;&quot;&quot;Chromosome Start End Score Strand chr1 4 7 23.8 + chr1 6 11 0.13 - chr2 0 14 42.42 +&quot;&quot;&quot; df1 = pd.read_csv(StringIO(f1), sep=&quot;\\s+&quot;) gr1 = PyRanges(df1) Now we can subset the PyRange in various ways: print(gr1) ## +--------------+-----------+-----------+-------------+--------------+ ## | Chromosome | Start | End | Score | Strand | ## | (category) | (int32) | (int32) | (float64) | (category) | ## |--------------+-----------+-----------+-------------+--------------| ## | chr1 | 4 | 7 | 23.8 | + | ## | chr1 | 6 | 11 | 0.13 | - | ## | chr2 | 0 | 14 | 42.42 | + | ## +--------------+-----------+-----------+-------------+--------------+ ## PyRanges object has 3 sequences from 2 chromosomes. print(gr1[&quot;chr1&quot;, 0:5]) ## +--------------+-----------+-----------+-------------+--------------+ ## | Chromosome | Start | End | Score | Strand | ## | (category) | (int32) | (int32) | (float64) | (category) | ## |--------------+-----------+-----------+-------------+--------------| ## | chr1 | 4 | 7 | 23.8 | + | ## +--------------+-----------+-----------+-------------+--------------+ ## PyRanges object has 1 sequences from 1 chromosomes. print(gr1[&quot;chr1&quot;, &quot;-&quot;, 6:100]) ## +--------------+-----------+-----------+-------------+--------------+ ## | Chromosome | Start | End | Score | Strand | ## | (category) | (int32) | (int32) | (float64) | (category) | ## |--------------+-----------+-----------+-------------+--------------| ## | chr1 | 6 | 11 | 0.13 | - | ## +--------------+-----------+-----------+-------------+--------------+ ## PyRanges object has 1 sequences from 1 chromosomes. print(gr1.Score) ## 0 23.80 ## 1 0.13 ## 2 42.42 ## Name: Score, dtype: float64 And we can perform comparison operations with two PyRanges: f2 = &quot;&quot;&quot;Chromosome Start End Score Strand chr1 5 6 -0.01 - chr1 9 12 200 + chr3 0 14 21.21 -&quot;&quot;&quot; df2 = pd.read_csv(StringIO(f2), sep=&quot;\\s+&quot;) gr2 = PyRanges(df2) print(gr2) ## +--------------+-----------+-----------+-------------+--------------+ ## | Chromosome | Start | End | Score | Strand | ## | (category) | (int32) | (int32) | (float64) | (category) | ## |--------------+-----------+-----------+-------------+--------------| ## | chr1 | 9 | 12 | 200 | + | ## | chr1 | 5 | 6 | -0.01 | - | ## | chr3 | 0 | 14 | 21.21 | - | ## +--------------+-----------+-----------+-------------+--------------+ ## PyRanges object has 3 sequences from 2 chromosomes. print(gr1.intersect(gr2, strandedness=&quot;opposite&quot;)) ## +--------------+-----------+-----------+-------------+--------------+ ## | Chromosome | Start | End | Score | Strand | ## | (category) | (int32) | (int32) | (float64) | (category) | ## |--------------+-----------+-----------+-------------+--------------| ## | chr1 | 5 | 6 | 23.8 | + | ## | chr1 | 9 | 11 | 0.13 | - | ## +--------------+-----------+-----------+-------------+--------------+ ## PyRanges object has 2 sequences from 1 chromosomes. print(gr1.intersect(gr2, strandedness=False)) ## +--------------+-----------+-----------+-------------+--------------+ ## | Chromosome | Start | End | Score | Strand | ## | (category) | (int32) | (int32) | (float64) | (category) | ## |--------------+-----------+-----------+-------------+--------------| ## | chr1 | 5 | 6 | 23.8 | + | ## | chr1 | 9 | 11 | 0.13 | - | ## +--------------+-----------+-----------+-------------+--------------+ ## PyRanges object has 2 sequences from 1 chromosomes. There are also convenience methods for single PyRanges: print(gr1.merge()) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (category) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 4 | 11 | ## | chr2 | 0 | 14 | ## +--------------+-----------+-----------+ ## PyRanges object has 2 sequences from 2 chromosomes. The underlying dataframe can always be accessed: print(gr1.df) ## Chromosome Start End Score Strand ## 0 chr1 4 7 23.80 + ## 1 chr1 6 11 0.13 - ## 2 chr2 0 14 42.42 + "],
["loadingcreating-pyranges.html", "2 Loading/Creating PyRanges", " 2 Loading/Creating PyRanges A PyRanges object can be built in three ways: from a Pandas dataframe using the PyRanges constructor with the chromosomes, starts and ends (and optionally strands), individually. using one of the custom reader functions for genomic data (read_bed, read_bam or read_gtf) Using a DataFrame If you instantiate a PyRanges object from a dataframe, the dataframe should at least contain the columns Chromosome, Start and End. A column called Strand is optional. Any other columns in the dataframe are treated as metadata. import pandas as pd import pyranges as pr chipseq = pr.get_example_path(&quot;chipseq.bed&quot;) df = pd.read_csv(chipseq, header=None, names=&quot;Chromosome Start End Name Score Strand&quot;.split(), sep=&quot;\\t&quot;) print(df.head(2)) ## Chromosome Start End Name Score Strand ## 0 chr8 28510032 28510057 U0 0 - ## 1 chr7 107153363 107153388 U0 0 - print(df.tail(2)) ## Chromosome Start End Name Score Strand ## 9998 chr1 194245558 194245583 U0 0 + ## 9999 chr8 57916061 57916086 U0 0 + print(pr.PyRanges(df)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 10000 sequences from 24 chromosomes. Using constructor keywords The other way to instantiate a PyRanges object is to use the constructor with keywords: gr = pr.PyRanges(chromosomes=df.Chromosome, starts=df.Start, ends=df.End) print(gr) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (category) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 100079649 | 100079674 | ## | chr1 | 212609534 | 212609559 | ## | chr1 | 223587418 | 223587443 | ## | chr1 | 202450161 | 202450186 | ## | ... | ... | ... | ## | chrY | 11942770 | 11942795 | ## | chrY | 8316773 | 8316798 | ## | chrY | 7463444 | 7463469 | ## | chrY | 7405376 | 7405401 | ## +--------------+-----------+-----------+ ## PyRanges object has 10000 sequences from 24 chromosomes. It is possible to make PyRanges objects out of basic Python datatypes: gr = pr.PyRanges(chromosomes=&quot;chr1&quot;, strands=&quot;+&quot;, starts=[0, 1, 2], ends=(3, 4, 5)) print(gr) ## +--------------+-----------+-----------+--------------+ ## | Chromosome | Start | End | Strand | ## | (category) | (int32) | (int32) | (category) | ## |--------------+-----------+-----------+--------------| ## | chr1 | 0 | 3 | + | ## | chr1 | 1 | 4 | + | ## | chr1 | 2 | 5 | + | ## +--------------+-----------+-----------+--------------+ ## PyRanges object has 3 sequences from 1 chromosomes. gr = pr.PyRanges(chromosomes=&quot;chr1 chr2 chr3&quot;.split(), strands=&quot;+ - +&quot;.split(), starts=[0, 1, 2], ends=(3, 4, 5)) print(gr) ## +--------------+-----------+-----------+--------------+ ## | Chromosome | Start | End | Strand | ## | (category) | (int32) | (int32) | (category) | ## |--------------+-----------+-----------+--------------| ## | chr1 | 0 | 3 | + | ## | chr2 | 1 | 4 | - | ## | chr3 | 2 | 5 | + | ## +--------------+-----------+-----------+--------------+ ## PyRanges object has 3 sequences from 3 chromosomes. Using read_bed, read_gtf or read_bam The pyranges library can create PyRanges from three common file formats, namely gtf, bed and bam [^]. ensembl_path = pr.get_example_path(&quot;ensembl.gtf&quot;) gr = pr.read_gtf(ensembl_path) print(gr) ## +--------------+------------+--------------+-----------+-----------+------------+--------------+------------+-------------+------------+-----------------+---------------+----------------+------------------------------------+-----------------+-------------+----------------+ ## | Chromosome | Source | Feature | Start | End | Score | Strand | Frame | (assigned | ccds_id | exon_id | exon_number | exon_version | gene_biotype | gene_id | gene_name | gene_source | ## | (category) | (object) | (category) | (int32) | (int32) | (object) | (category) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+--------------+-----------+-----------+------------+--------------+------------+-------------+------------+-----------------+---------------+----------------+------------------------------------+-----------------+-------------+----------------| ## | 1 | havana | gene | 11869 | 14409 | . | + | . | nan | nan | nan | nan | nan | transcribed_unprocessed_pseudogene | ENSG00000223972 | DDX11L1 | havana | ## | 1 | havana | transcript | 11869 | 14409 | . | + | . | nan | nan | nan | nan | nan | transcribed_unprocessed_pseudogene | ENSG00000223972 | DDX11L1 | havana | ## | 1 | havana | exon | 11869 | 12227 | . | + | . | nan | nan | ENSE00002234944 | 1 | 1 | transcribed_unprocessed_pseudogene | ENSG00000223972 | DDX11L1 | havana | ## | 1 | havana | exon | 12613 | 12721 | . | + | . | nan | nan | ENSE00003582793 | 2 | 1 | transcribed_unprocessed_pseudogene | ENSG00000223972 | DDX11L1 | havana | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | 1 | ensembl | transcript | 120725 | 133723 | . | - | . | nan | nan | nan | nan | nan | lincRNA | ENSG00000238009 | AL627309.1 | ensembl_havana | ## | 1 | ensembl | exon | 133374 | 133723 | . | - | . | nan | nan | ENSE00003748456 | 1 | 1 | lincRNA | ENSG00000238009 | AL627309.1 | ensembl_havana | ## | 1 | ensembl | exon | 129055 | 129223 | . | - | . | nan | nan | ENSE00003734824 | 2 | 1 | lincRNA | ENSG00000238009 | AL627309.1 | ensembl_havana | ## | 1 | ensembl | exon | 120874 | 120932 | . | - | . | nan | nan | ENSE00003740919 | 3 | 1 | lincRNA | ENSG00000238009 | AL627309.1 | ensembl_havana | ## +--------------+------------+--------------+-----------+-----------+------------+--------------+------------+-------------+------------+-----------------+---------------+----------------+------------------------------------+-----------------+-------------+----------------+ ## PyRanges object has 95 sequences from 1 chromosomes. ## Hidden columns: previous, transcript_name, tag, transcript_id, transcript_biotype, protein_version, transcript_support_level, transcript_source, transcript_version, protein_id [^]: PyRanges uses the pysam library which requires that the bam file must have an index. "],
["writing-pyranges-to-disk.html", "3 Writing PyRanges to disk", " 3 Writing PyRanges to disk The PyRanges can be written to several formats, namely csv, gtf and bigwig. If no path-argument is given, the string representation of the data is returned. (It may potentially be very large.) import pyranges as pr import pyranges_db as pr_db gr = pr.data.chipseq() gr.to_gtf(&quot;chipseq.gtf&quot;) print(gr[:10000].to_gtf()) The to_csv method takes the arguments header and sep. gr.to_csv(&quot;chipseq.csv&quot;, sep=&quot;\\t&quot;, header=True) print(gr[:10000].to_csv(sep=&quot;|&quot;, header=True)) The bigwig writer needs to know the chromosome sizes. You can fetch these using the pyranges database functions. chromsizes = pr_db.ucsc.chromosome_sizes(&quot;hg19&quot;) gr.to_bigwig(&quot;chipseq.bw&quot;, chromsizes) If you want to write one bigwig for each strand, you need to do it manually. gr[&quot;+&quot;].to_bigwig(&quot;chipseq_plus.bw&quot;, chromsizes) gr[&quot;-&quot;].to_bigwig(&quot;chipseq_minus.bw&quot;, chromsizes) "],
["subsetting-pyranges.html", "4 Subsetting PyRanges", " 4 Subsetting PyRanges There are many ways to subset a PyRanges object. Each returns a new PyRanges object and does not change the old one. import pyranges as pr gr = pr.data.chipseq() print(gr) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 10000 sequences from 24 chromosomes. Chromosome only print(gr[&quot;chrX&quot;]) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chrX | 13843759 | 13843784 | U0 | 0 | + | ## | chrX | 114673546 | 114673571 | U0 | 0 | + | ## | chrX | 131816774 | 131816799 | U0 | 0 | + | ## | chrX | 45504745 | 45504770 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrX | 146694149 | 146694174 | U0 | 0 | - | ## | chrX | 5044527 | 5044552 | U0 | 0 | - | ## | chrX | 15281263 | 15281288 | U0 | 0 | - | ## | chrX | 120273723 | 120273748 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 282 sequences from 1 chromosomes. Chromosome and Strand print(gr[&quot;chrX&quot;, &quot;-&quot;]) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chrX | 41852946 | 41852971 | U0 | 0 | - | ## | chrX | 69979838 | 69979863 | U0 | 0 | - | ## | chrX | 34824145 | 34824170 | U0 | 0 | - | ## | chrX | 132354117 | 132354142 | U0 | 0 | - | ## | ... | ... | ... | ... | ... | ... | ## | chrX | 146694149 | 146694174 | U0 | 0 | - | ## | chrX | 5044527 | 5044552 | U0 | 0 | - | ## | chrX | 15281263 | 15281288 | U0 | 0 | - | ## | chrX | 120273723 | 120273748 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 151 sequences from 1 chromosomes. Chromosome and Slice print(gr[&quot;chrX&quot;, 150000000:160000000]) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chrX | 151324943 | 151324968 | U0 | 0 | + | ## | chrX | 152902449 | 152902474 | U0 | 0 | + | ## | chrX | 153632850 | 153632875 | U0 | 0 | + | ## | chrX | 153874106 | 153874131 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrX | 150277236 | 150277261 | U0 | 0 | - | ## | chrX | 151277790 | 151277815 | U0 | 0 | - | ## | chrX | 153037423 | 153037448 | U0 | 0 | - | ## | chrX | 153255924 | 153255949 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 8 sequences from 1 chromosomes. Chromosome, Strand and Slice print(gr[&quot;chrX&quot;, &quot;-&quot;, 150000000:160000000]) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chrX | 150277236 | 150277261 | U0 | 0 | - | ## | chrX | 151277790 | 151277815 | U0 | 0 | - | ## | chrX | 153037423 | 153037448 | U0 | 0 | - | ## | chrX | 153255924 | 153255949 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 4 sequences from 1 chromosomes. Slice Only using slices returns all ranges from all chromosomes and strands within those coordinates. print(gr[0:100000]) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr2 | 33241 | 33266 | U0 | 0 | + | ## | chr2 | 13611 | 13636 | U0 | 0 | - | ## | chr2 | 32620 | 32645 | U0 | 0 | - | ## | chr3 | 87179 | 87204 | U0 | 0 | + | ## | chr4 | 45413 | 45438 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 5 sequences from 3 chromosomes. Strand print(gr[&quot;+&quot;]) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 21559181 | 21559206 | U0 | 0 | + | ## | chrY | 11942770 | 11942795 | U0 | 0 | + | ## | chrY | 8316773 | 8316798 | U0 | 0 | + | ## | chrY | 7463444 | 7463469 | U0 | 0 | + | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 5050 sequences from 24 chromosomes. Slice and Strand print(gr[&quot;+&quot;, 0:100000]) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr2 | 33241 | 33266 | U0 | 0 | + | ## | chr3 | 87179 | 87204 | U0 | 0 | + | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 2 sequences from 2 chromosomes. "],
["manipulating-the-data-in-pyranges.html", "5 Manipulating the data in PyRanges", " 5 Manipulating the data in PyRanges PyRanges is a thin wrapper around genomic data contained in pandas dataframes. This dataframe is accessible with the df attribute of the PyRanges object. import pyranges as pr gr = pr.data.chipseq() print(gr) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 10000 sequences from 24 chromosomes. print(gr.df.head(5)) ## Chromosome Start End Name Score Strand ## 18 chr1 212609534 212609559 U0 0 + ## 70 chr1 169887529 169887554 U0 0 + ## 129 chr1 216711011 216711036 U0 0 + ## 170 chr1 144227079 144227104 U0 0 + ## 196 chr1 148177825 148177850 U0 0 + To access a column of this dataframe, you can ask for the name directly from the PyRanges object. print(gr.Start.head()) ## 18 212609534 ## 70 169887529 ## 129 216711011 ## 170 144227079 ## 196 148177825 ## Name: Start, dtype: int32 You can directly insert a column by setting the attribute on the PyRanges object: gr.stupid_example = &quot;Hi There!&quot; print(gr) ## +--------------+-----------+-----------+------------+-----------+--------------+------------------+ ## | Chromosome | Start | End | Name | Score | Strand | stupid_example | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (object) | ## |--------------+-----------+-----------+------------+-----------+--------------+------------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | Hi There! | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | Hi There! | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | Hi There! | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | Hi There! | ## | ... | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | Hi There! | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | Hi There! | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | Hi There! | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | Hi There! | ## +--------------+-----------+-----------+------------+-----------+--------------+------------------+ ## PyRanges object has 10000 sequences from 24 chromosomes. gr = gr.drop(&quot;stupid_example&quot;) print(gr) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 10000 sequences from 24 chromosomes. And as you can see, you can drop columns from the PyRanges using drop. Using drop by itself removes all metadata-columns. If you also want to remove the strand you need to use the drop_strand flag. All columns except Chromosome, Start, End and Strand can be changed in any way you please and more metadata-columns can be added by setting it on the PyRanges object. If you wish to change the Chromosome, Start, End and Strand columns you should make a copy of the data from the PyRanges object and use it to instantiate a new PyRanges object. import pandas as pd gr.Name = gr.Chromosome.astype(str) + &quot;_&quot; + pd.Series(range(len(gr)), index=gr.Chromosome.index).astype(str) print(gr) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | chr1_0 | 0 | + | ## | chr1 | 169887529 | 169887554 | chr1_1 | 0 | + | ## | chr1 | 216711011 | 216711036 | chr1_2 | 0 | + | ## | chr1 | 144227079 | 144227104 | chr1_3 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | chrY_9996 | 0 | - | ## | chrY | 13517892 | 13517917 | chrY_9997 | 0 | - | ## | chrY | 8010951 | 8010976 | chrY_9998 | 0 | - | ## | chrY | 7405376 | 7405401 | chrY_9999 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 10000 sequences from 24 chromosomes. "],
["inserting-columns-based-on-overlap.html", "6 Inserting columns based on overlap", " 6 Inserting columns based on overlap If you want to insert columns from one PyRange, based on where it overlaps with another, you can use the insert method. It takes the arguments strandedness (&quot;same&quot;, &quot;opposite&quot; or False/None), how (&quot;first&quot;, &quot;containment&quot;, False/None), suffix and overlap_only. If the overlap_only-flag is True, the only rows in the PyRange which are kept are those where the insertion and insertee-PyRanges overlap. import pyranges as pr exons, cpg = pr.data.exons(), pr.data.cpg() print(cpg) ## +--------------+-----------+-----------+-----------+ ## | Chromosome | Start | End | CpG | ## | (category) | (int32) | (int32) | (int64) | ## |--------------+-----------+-----------+-----------| ## | chrX | 64181 | 64793 | 62 | ## | chrX | 69133 | 70029 | 100 | ## | chrX | 148685 | 149461 | 85 | ## | chrX | 166504 | 167721 | 96 | ## | ... | ... | ... | ... | ## | chrY | 28555535 | 28555932 | 32 | ## | chrY | 28773315 | 28773544 | 25 | ## | chrY | 59213794 | 59214183 | 36 | ## | chrY | 59349266 | 59349574 | 29 | ## +--------------+-----------+-----------+-----------+ ## PyRanges object has 1077 sequences from 2 chromosomes. print(exons.insert(cpg, &quot;CpG&quot;)) ## +--------------+-----------+-----------+---------------------------------------+-----------+--------------+-------------+ ## | Chromosome | Start | End | Name | Score | Strand | CpG | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (float64) | ## |--------------+-----------+-----------+---------------------------------------+-----------+--------------+-------------| ## | chrX | 585078 | 585337 | NM_000451_exon_0_0_chrX_585079_f | 0 | + | 66.0 | ## | chrX | 585078 | 585337 | NM_000451_exon_0_0_chrX_585079_f | 0 | + | nan | ## | chrX | 1393647 | 1393735 | NM_172249_exon_1_0_chrX_1393648_f | 0 | + | nan | ## | chrX | 1393647 | 1393735 | NM_006140_exon_1_0_chrX_1393648_f | 0 | + | nan | ## | ... | ... | ... | ... | ... | ... | ... | ## | chrY | 25336491 | 25336631 | NM_004081_exon_22_0_chrY_25336492_r | 0 | - | nan | ## | chrY | 26952215 | 26952307 | NM_020364_exon_16_0_chrY_26952216_r | 0 | - | nan | ## | chrY | 27197822 | 27197945 | NM_004678_exon_7_0_chrY_27197823_r | 0 | - | nan | ## | chrY | 27197822 | 27197945 | NM_001002760_exon_7_0_chrY_27197823_r | 0 | - | nan | ## +--------------+-----------+-----------+---------------------------------------+-----------+--------------+-------------+ ## PyRanges object has 1051 sequences from 2 chromosomes. print(exons.insert(cpg, &quot;CpG&quot;, overlap_only=True)) ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+-----------+ ## | Chromosome | Start | End | Name | Score | Strand | CpG | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int64) | ## |--------------+-----------+-----------+----------------------------------------+-----------+--------------+-----------| ## | chrX | 585078 | 585337 | NM_000451_exon_0_0_chrX_585079_f | 0 | + | 66 | ## | chrX | 10094153 | 10094346 | NM_015691_exon_14_0_chrX_10094154_f | 0 | + | 26 | ## | chrX | 13587693 | 13588054 | NM_001167890_exon_0_0_chrX_13587694_f | 0 | + | 49 | ## | chrX | 17755568 | 17755800 | NM_001037535_exon_0_0_chrX_17755569_f | 0 | + | 117 | ## | ... | ... | ... | ... | ... | ... | ... | ## | chrY | 15591393 | 15592550 | NR_047610_exon_27_0_chrY_15591394_r | 0 | - | 33 | ## | chrY | 15591393 | 15592550 | NR_047607_exon_29_0_chrY_15591394_r | 0 | - | 33 | ## | chrY | 15591393 | 15592550 | NM_001258269_exon_29_0_chrY_15591394_r | 0 | - | 33 | ## | chrY | 15591393 | 15592550 | NR_047599_exon_28_0_chrY_15591394_r | 0 | - | 33 | ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+-----------+ ## PyRanges object has 79 sequences from 2 chromosomes. Read more about the strandedness and how flags under joining PyRanges. "],
["concatenating-pyranges.html", "7 Concatenating PyRanges", " 7 Concatenating PyRanges A list of PyRanges can be concatenated by using the concat function: import pyranges as pr import pandas as pd gr1 = pr.data.f1() gr2 = pr.data.f2() print(gr1) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 3 sequences from 1 chromosomes. print(gr2) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 1 | 2 | a | 0 | + | ## | chr1 | 6 | 7 | b | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 2 sequences from 1 chromosomes. concatted = pr.concat([gr1, gr2, gr1]) print(concatted) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 1 | 2 | a | 0 | + | ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## | chr1 | 6 | 7 | b | 0 | - | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 8 sequences from 1 chromosomes. "],
["piping-pyranges.html", "8 Piping PyRanges", " 8 Piping PyRanges The PyRanges API supports chaining operations out of the box. To set a new column in a PyRanges you would use the assign method and for subsetting you would use the subset method. import pyranges as pr import pandas as pd exons = pr.data.exons() cpg = pr.data.cpg() cpg.join(exons.unstrand()).subset(lambda df: df.CpG &gt; 25)[[&quot;CpG&quot;]].assign(&quot;CpGDecile&quot;, lambda df: df.CpG % 10)[&quot;chrX&quot;].slack(500) "],
["printing-pyranges.html", "9 Printing PyRanges", " 9 Printing PyRanges There are 5 helper methods for printing PyRanges. These are p (regular print), mp (merged position print), sp (sorted print), msp (merged position sorted print) and rp (raw print). Merged means that the information about Chromosome, Start, End and Strand (if applicable) are merged into one column for printing. Sorted means that the output is sorted on position and Strand. Regular print shows the + strand first and - strand second, so if you want to display interleaved intervals from both strands, sorted print is the way to do it. Raw print (rp) just prints the underlying dict of dataframes. All print methods except rp take an n-argument to control how many entries should be displayed. The print methods return the PyRanges object itself so that print methods can be used in pipes. import pyranges as pr exons = pr.data.exons() exons.p(n=2).mp(n=8).sp() ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+----------------------------------------+-----------+--------------| ## | chrX | 135721701 | 135721963 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15467254 | 15467278 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## PyRanges object has 1000 sequences from 2 chromosomes. ## +----------------------------+----------------------------------------+-----------+ ## | -Position- | Name | Score | ## | (Multiple types) | (object) | (int64) | ## |----------------------------+----------------------------------------+-----------| ## | chrX 135721701-135721963 + | NR_038462_exon_0_0_chrX_135721702_f | 0 | ## | chrX 135574120-135574598 + | NM_001727_exon_2_0_chrX_135574121_f | 0 | ## | chrX 47868945-47869126 + | NM_205856_exon_4_0_chrX_47868946_f | 0 | ## | chrX 77294333-77294480 + | NM_000052_exon_17_0_chrX_77294334_f | 0 | ## | ... ...-... ... | ... | ... | ## | chrY 15409586-15409728 - | NR_047633_exon_3_0_chrY_15409587_r | 0 | ## | chrY 15478146-15478273 - | NR_047634_exon_18_0_chrY_15478147_r | 0 | ## | chrY 15360258-15361762 - | NR_047601_exon_0_0_chrY_15360259_r | 0 | ## | chrY 15467254-15467278 - | NM_001258270_exon_13_0_chrY_15467255_r | 0 | ## +----------------------------+----------------------------------------+-----------+ ## PyRanges object has 1000 sequences from 2 chromosomes. ## +--------------+-----------+-----------+---------------------------------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+---------------------------------------+-----------+--------------| ## | chrX | 585078 | 585337 | NM_000451_exon_0_0_chrX_585079_f | 0 | + | ## | chrX | 1393647 | 1393735 | NM_172249_exon_1_0_chrX_1393648_f | 0 | + | ## | chrX | 1393647 | 1393735 | NM_006140_exon_1_0_chrX_1393648_f | 0 | + | ## | chrX | 1404670 | 1404813 | NM_172245_exon_3_0_chrX_1404671_f | 0 | + | ## | chrX | 1407411 | 1407535 | NM_172249_exon_4_0_chrX_1407412_f | 0 | + | ## | chrX | 1407651 | 1407781 | NM_001161532_exon_3_0_chrX_1407652_f | 0 | + | ## | chrX | 1414319 | 1414349 | NM_172245_exon_8_0_chrX_1414320_f | 0 | + | ## | chrX | 1419383 | 1419519 | NM_001161531_exon_9_0_chrX_1419384_f | 0 | + | ## | chrX | 1424338 | 1424420 | NM_006140_exon_11_0_chrX_1424339_f | 0 | + | ## | chrX | 1424338 | 1424420 | NM_001161530_exon_10_0_chrX_1424339_f | 0 | + | ## | chrX | 1475113 | 1475229 | NM_001267713_exon_4_0_chrX_1475114_f | 0 | + | ## | chrX | 1510791 | 1511039 | NM_001636_exon_3_0_chrX_1510792_r | 0 | - | ## | chrX | 1553914 | 1553976 | NM_004192_exon_8_0_chrX_1553915_r | 0 | - | ## | chrX | 1554586 | 1554651 | NM_001173473_exon_9_0_chrX_1554587_r | 0 | - | ## | chrX | 1734025 | 1734161 | NM_004043_exon_1_0_chrX_1734026_f | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 25336491 | 25336631 | NM_004081_exon_22_0_chrY_25336492_r | 0 | - | ## | chrY | 26778138 | 26778263 | NM_001002761_exon_6_0_chrY_26778139_f | 0 | + | ## | chrY | 26952215 | 26952307 | NM_020364_exon_16_0_chrY_26952216_r | 0 | - | ## | chrY | 26979966 | 26980276 | NM_001005375_exon_0_0_chrY_26979967_f | 0 | + | ## | chrY | 26998146 | 26998238 | NM_020364_exon_2_0_chrY_26998147_f | 0 | + | ## | chrY | 26998798 | 26998850 | NM_001005785_exon_3_0_chrY_26998799_f | 0 | + | ## | chrY | 26999286 | 26999350 | NM_001005375_exon_9_0_chrY_26999287_f | 0 | + | ## | chrY | 27003422 | 27003494 | NM_001005786_exon_7_0_chrY_27003423_f | 0 | + | ## | chrY | 27041834 | 27041906 | NM_020420_exon_13_0_chrY_27041835_f | 0 | + | ## | chrY | 27197822 | 27197945 | NM_004678_exon_7_0_chrY_27197823_r | 0 | - | ## | chrY | 27197822 | 27197945 | NM_001002760_exon_7_0_chrY_27197823_r | 0 | - | ## | chrY | 27606238 | 27606322 | NR_002195_exon_8_0_chrY_27606239_f | 0 | + | ## | chrY | 27606238 | 27606322 | NR_001555_exon_8_0_chrY_27606239_f | 0 | + | ## | chrY | 59222126 | 59222216 | NR_033715_exon_1_0_chrY_59222127_f | 0 | + | ## | chrY | 59233166 | 59233257 | NR_033715_exon_4_0_chrY_59233167_f | 0 | + | ## +--------------+-----------+-----------+---------------------------------------+-----------+--------------+ ## PyRanges object has 1000 sequences from 2 chromosomes. f1 = pr.data.f1() f1.rp() ## {(&#39;chr1&#39;, &#39;+&#39;): Chromosome Start End Name Score Strand ## 0 chr1 3 6 interval1 0 + ## 2 chr1 8 9 interval3 0 +, (&#39;chr1&#39;, &#39;-&#39;): Chromosome Start End Name Score Strand ## 1 chr1 5 7 interval2 0 -} "],
["iterating-over-pyranges.html", "10 Iterating over PyRanges", " 10 Iterating over PyRanges PyRanges can be iterated over by a simple for loop, and the data is guaranteed to come back in natsorted order: import pyranges as pr import pandas as pd exons = pr.data.exons() cpg = pr.data.cpg() for k, df in cpg: print(k) print(df.head(3)) ## chrX ## Chromosome Start End CpG ## 0 chrX 64181 64793 62 ## 1 chrX 69133 70029 100 ## 2 chrX 148685 149461 85 ## chrY ## Chromosome Start End CpG ## 896 chrY 14181 14793 62 ## 897 chrY 19133 20029 100 ## 898 chrY 98685 99461 85 If the data is unstranded, the key is just the chromosome names, but if the data is stranded the key is a tuple of the chromosome and strand: for k, df in exons: print(k) print(df.head(3)) ## (&#39;chrX&#39;, &#39;+&#39;) ## Chromosome Start End Name Score Strand ## 0 chrX 135721701 135721963 NR_038462_exon_0_0_chrX_135721702_f 0 + ## 2 chrX 135574120 135574598 NM_001727_exon_2_0_chrX_135574121_f 0 + ## 3 chrX 47868945 47869126 NM_205856_exon_4_0_chrX_47868946_f 0 + ## (&#39;chrX&#39;, &#39;-&#39;) ## Chromosome Start End Name Score Strand ## 1 chrX 49069126 49069255 NM_001256790_exon_15_0_chrX_49069127_r 0 - ## 4 chrX 154006958 154007628 NM_001166460_exon_0_0_chrX_154006959_r 0 - ## 6 chrX 52257919 52258046 NM_001097593_exon_1_0_chrX_52257920_r 0 - ## (&#39;chrY&#39;, &#39;+&#39;) ## Chromosome Start End Name Score Strand ## 14 chrY 1693161 1693291 NM_001171039_exon_2_0_chrY_1693162_f 0 + ## 82 chrY 1357411 1357535 NM_001161531_exon_4_0_chrY_1357412_f 0 + ## 98 chrY 59233166 59233257 NR_033715_exon_4_0_chrY_59233167_f 0 + ## (&#39;chrY&#39;, &#39;-&#39;) ## Chromosome Start End Name Score Strand ## 5 chrY 1481624 1481747 NM_004192_exon_1_0_chrY_1481625_r 0 - ## 8 chrY 15526614 15526673 NR_047607_exon_25_0_chrY_15526615_r 0 - ## 9 chrY 15591393 15592550 NR_047610_exon_27_0_chrY_15591394_r 0 - If you would like to iterate over the chromosomes in a stranded PyRange the idiom is for c in exons.chromosomes: print(c) df = exons[c].df print(df.head()) ## chrX ## Chromosome Start End Name Score Strand ## 0 chrX 135721701 135721963 NR_038462_exon_0_0_chrX_135721702_f 0 + ## 2 chrX 135574120 135574598 NM_001727_exon_2_0_chrX_135574121_f 0 + ## 3 chrX 47868945 47869126 NM_205856_exon_4_0_chrX_47868946_f 0 + ## 7 chrX 77294333 77294480 NM_000052_exon_17_0_chrX_77294334_f 0 + ## 11 chrX 91090459 91091043 NM_001168360_exon_0_0_chrX_91090460_f 0 + ## chrY ## Chromosome Start End Name Score Strand ## 14 chrY 1693161 1693291 NM_001171039_exon_2_0_chrY_1693162_f 0 + ## 82 chrY 1357411 1357535 NM_001161531_exon_4_0_chrY_1357412_f 0 + ## 98 chrY 59233166 59233257 NR_033715_exon_4_0_chrY_59233167_f 0 + ## 99 chrY 1693161 1693291 NM_001171038_exon_2_0_chrY_1693162_f 0 + ## 199 chrY 1664276 1664425 NM_005088_exon_2_0_chrY_1664277_f 0 + but notice that we need the .df accessor, because subsetting a PyRange always returns a PyRange. There are three more ways to iterate over a pyrange, namely the keys, values and items methods. These return a list, not a custom object like the python dict. If you want to create a new PyRange while iterating over it, the idiom is d = {} for k, df in exons: print(k) d[k] = df.head(3) ## (&#39;chrX&#39;, &#39;+&#39;) ## (&#39;chrX&#39;, &#39;-&#39;) ## (&#39;chrY&#39;, &#39;+&#39;) ## (&#39;chrY&#39;, &#39;-&#39;) new_gr = pr.PyRanges(d) print(new_gr) ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+----------------------------------------+-----------+--------------| ## | chrX | 135721701 | 135721963 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | chrX | 135574120 | 135574598 | NM_001727_exon_2_0_chrX_135574121_f | 0 | + | ## | chrX | 47868945 | 47869126 | NM_205856_exon_4_0_chrX_47868946_f | 0 | + | ## | chrX | 49069126 | 49069255 | NM_001256790_exon_15_0_chrX_49069127_r | 0 | - | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15591393 | 15592550 | NR_047610_exon_27_0_chrY_15591394_r | 0 | - | ## | chrY | 1693161 | 1693291 | NM_001171039_exon_2_0_chrY_1693162_f | 0 | + | ## | chrY | 1357411 | 1357535 | NM_001161531_exon_4_0_chrY_1357412_f | 0 | + | ## | chrY | 59233166 | 59233257 | NR_033715_exon_4_0_chrY_59233167_f | 0 | + | ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## PyRanges object has 12 sequences from 2 chromosomes. Note that this is basically the same as using the apply method of the PyRange, only that the for loops are never multithreaded. "],
["sorting-pyranges.html", "11 Sorting PyRanges", " 11 Sorting PyRanges pyranges are always sorted on chromosome and strand to enable faster operations. pyranges can in addition be sorted on start and end by using the function sort: import pyranges as pr import pandas as pd from io import StringIO cs = pr.data.chipseq() print(cs) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 10000 sequences from 24 chromosomes. cs_sorted = cs.sort() print(cs) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 10000 sequences from 24 chromosomes. This will sort them on Chromosome, Strand, Start and then End. Custom sorting can be done after you are done with the PyRanges-related functionality. Then you can extract the underlying dataframes with df and sort it: df = cs_sorted.df print(df.head()) ## Chromosome Start End Name Score Strand ## 0 chr1 1541598 1541623 U0 0 + ## 1 chr1 1599121 1599146 U0 0 + ## 2 chr1 3504032 3504057 U0 0 + ## 3 chr1 3806532 3806557 U0 0 + ## 4 chr1 5079955 5079980 U0 0 + df_sorted = df.sort_values([&quot;Chromosome&quot;, &quot;Start&quot;, &quot;End&quot;]) print(df_sorted.head(20)) ## Chromosome Start End Name Score Strand ## 0 chr1 1325303 1325328 U0 0 - ## 0 chr1 1541598 1541623 U0 0 + ## 1 chr1 1599121 1599146 U0 0 + ## 1 chr1 1820285 1820310 U0 0 - ## 2 chr1 2448322 2448347 U0 0 - ## 3 chr1 3046141 3046166 U0 0 - ## 4 chr1 3437168 3437193 U0 0 - ## 2 chr1 3504032 3504057 U0 0 + ## 5 chr1 3637087 3637112 U0 0 - ## 6 chr1 3681903 3681928 U0 0 - ## 3 chr1 3806532 3806557 U0 0 + ## 7 chr1 3953790 3953815 U0 0 - ## 8 chr1 5037292 5037317 U0 0 - ## 4 chr1 5079955 5079980 U0 0 + ## 5 chr1 5233543 5233568 U0 0 + ## 6 chr1 5301327 5301352 U0 0 + ## 7 chr1 5431308 5431333 U0 0 + ## 8 chr1 5449222 5449247 U0 0 + ## 9 chr1 5481750 5481775 U0 0 - ## 10 chr1 5699351 5699376 U0 0 - Now the df is sorted and start and end with interleaved strands. "],
["summarizing-pyranges.html", "12 Summarizing PyRanges", " 12 Summarizing PyRanges The summary-function gives a summary of the lengths of the intervals in a PyRange: import pyranges as pr import pandas as pd from io import StringIO gr = pr.data.exons() print(gr) ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+----------------------------------------+-----------+--------------| ## | chrX | 135721701 | 135721963 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | chrX | 135574120 | 135574598 | NM_001727_exon_2_0_chrX_135574121_f | 0 | + | ## | chrX | 47868945 | 47869126 | NM_205856_exon_4_0_chrX_47868946_f | 0 | + | ## | chrX | 77294333 | 77294480 | NM_000052_exon_17_0_chrX_77294334_f | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15409586 | 15409728 | NR_047633_exon_3_0_chrY_15409587_r | 0 | - | ## | chrY | 15478146 | 15478273 | NR_047634_exon_18_0_chrY_15478147_r | 0 | - | ## | chrY | 15360258 | 15361762 | NR_047601_exon_0_0_chrY_15360259_r | 0 | - | ## | chrY | 15467254 | 15467278 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## PyRanges object has 1000 sequences from 2 chromosomes. print(gr.summary()) ## +-------+-----------+---------------------+-----------------------+ ## | | pyrange | coverage_stranded | coverage_unstranded | ## |-------+-----------+---------------------+-----------------------| ## | count | 1000 | 873 | 873 | ## | mean | 304.292 | 314.255 | 314.255 | ## | std | 640.013 | 666.23 | 666.23 | ## | min | 4 | 4 | 4 | ## | 25% | 88 | 88 | 88 | ## | 50% | 127 | 127 | 127 | ## | 75% | 195.5 | 199 | 199 | ## | max | 6063 | 6063 | 6063 | ## +-------+-----------+---------------------+-----------------------+ ## None The column coverage_stranded tells you how the data looks when merging all overlapping features (taking strand into account), and coverage_unstranded is the same, but all features are merged independent of their strand. "],
["methods-for-manipulating-single-pyranges.html", "13 Methods for manipulating single PyRanges", " 13 Methods for manipulating single PyRanges There are several methods for manipulating the contents of a PyRanges. merge creates a union of all the intervals in the ranges: import pyranges as pr f1 = pr.data.f1() print(f1.merge()) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (category) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 3 | 7 | ## | chr1 | 8 | 9 | ## +--------------+-----------+-----------+ ## PyRanges object has 2 sequences from 1 chromosomes. Cluster finds which intervals overlap, but give each interval a cluster ID instead of merging them: import pyranges as pr f1 = pr.data.f1() print(f1.cluster()) ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+ ## | Chromosome | Start | End | Name | Score | Strand | Cluster | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int64) | ## |--------------+-----------+-----------+------------+-----------+--------------+-----------| ## | chr1 | 3 | 6 | interval1 | 0 | + | 1 | ## | chr1 | 8 | 9 | interval3 | 0 | + | 2 | ## | chr1 | 5 | 7 | interval2 | 0 | - | 1 | ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+ ## PyRanges object has 3 sequences from 1 chromosomes. print(f1.cluster(strand=True)) ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+ ## | Chromosome | Start | End | Name | Score | Strand | Cluster | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int64) | ## |--------------+-----------+-----------+------------+-----------+--------------+-----------| ## | chr1 | 3 | 6 | interval1 | 0 | + | 1 | ## | chr1 | 8 | 9 | interval3 | 0 | + | 2 | ## | chr1 | 5 | 7 | interval2 | 0 | - | 3 | ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+ ## PyRanges object has 3 sequences from 1 chromosomes. print(f1.cluster(slack=2, strand=True)) ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+ ## | Chromosome | Start | End | Name | Score | Strand | Cluster | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int64) | ## |--------------+-----------+-----------+------------+-----------+--------------+-----------| ## | chr1 | 3 | 6 | interval1 | 0 | + | 1 | ## | chr1 | 8 | 9 | interval3 | 0 | + | 1 | ## | chr1 | 5 | 7 | interval2 | 0 | - | 2 | ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+ ## PyRanges object has 3 sequences from 1 chromosomes. Both cluster and merge take the argument slack, so that you can merge features which are not directly overlapping. five_end finds the starts of the regions (taking direction of transcription into account). f1.five_end() print(f1.five_end(slack=5)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 0 | 9 | interval1 | 0 | + | ## | chr1 | 3 | 14 | interval3 | 0 | + | ## | chr1 | 2 | 13 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 3 sequences from 1 chromosomes. three_end finds the ends of the regions (taking direction of transcription into account). f1.three_end() print(f1.three_end(slack=5)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 1 | 12 | interval1 | 0 | + | ## | chr1 | 4 | 15 | interval3 | 0 | + | ## | chr1 | 2 | 13 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 3 sequences from 1 chromosomes. slack extends the starts and ends of your interval. print(f1.slack(5)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 0 | 11 | interval1 | 0 | + | ## | chr1 | 3 | 14 | interval3 | 0 | + | ## | chr1 | 0 | 12 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 3 sequences from 1 chromosomes. windows splits your data into windows: exons = pr.data.exons() print(exons) ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+----------------------------------------+-----------+--------------| ## | chrX | 135721701 | 135721963 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | chrX | 135574120 | 135574598 | NM_001727_exon_2_0_chrX_135574121_f | 0 | + | ## | chrX | 47868945 | 47869126 | NM_205856_exon_4_0_chrX_47868946_f | 0 | + | ## | chrX | 77294333 | 77294480 | NM_000052_exon_17_0_chrX_77294334_f | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15409586 | 15409728 | NR_047633_exon_3_0_chrY_15409587_r | 0 | - | ## | chrY | 15478146 | 15478273 | NR_047634_exon_18_0_chrY_15478147_r | 0 | - | ## | chrY | 15360258 | 15361762 | NR_047601_exon_0_0_chrY_15360259_r | 0 | - | ## | chrY | 15467254 | 15467278 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## PyRanges object has 1000 sequences from 2 chromosomes. print(exons.windows(5)) ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+----------------------------------------+-----------+--------------| ## | chrX | 135721701 | 135721706 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | chrX | 135721706 | 135721711 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | chrX | 135721711 | 135721716 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | chrX | 135721716 | 135721721 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15467254 | 15467259 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## | chrY | 15467259 | 15467264 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## | chrY | 15467264 | 15467269 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## | chrY | 15467269 | 15467274 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## PyRanges object has 60269 sequences from 2 chromosomes. If you want to all windows to start at k * window_size, use the tile argument: print(exons.windows(5, tile=True)) ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+----------------------------------------+-----------+--------------| ## | chrX | 135721700 | 135721705 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | chrX | 135721705 | 135721710 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | chrX | 135721710 | 135721715 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | chrX | 135721715 | 135721720 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15467255 | 15467260 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## | chrY | 15467260 | 15467265 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## | chrY | 15467265 | 15467270 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## | chrY | 15467270 | 15467275 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## PyRanges object has 60847 sequences from 2 chromosomes. "],
["applying-custom-methods-to-pairs-of-pyranges.html", "14 Applying custom methods to pairs of PyRanges", " 14 Applying custom methods to pairs of PyRanges By using the apply or apply_pair you can run custom methods on the dataframes in your PyRanges. The apply function takes a single dataframe, while the apply_pair takes a pair of dataframes. import pyranges as pr chipseq = pr.data.chipseq() chipseq_background = pr.data.chipseq_background() def print_strands(df1, df2): print(df1.Chromosome.iloc[0], df1.Strand.iloc[0], df2.Strand.iloc[0]) return df1.head(5) result = chipseq.apply_pair(chipseq_background, print_strands, strandedness=&quot;opposite&quot;) ## chr1 + - ## chr1 - + ## chr2 + - ## chr2 - + ## chr3 + - ## chr3 - + ## chr4 + - ## chr4 - + ## chr5 + - ## chr5 - + ## chr6 + - ## chr6 - + ## chr7 + - ## chr7 - + ## chr8 + - ## chr8 - + ## chr9 + - ## chr9 - + ## chr10 + - ## chr10 - + ## chr11 + - ## chr11 - + ## chr12 + - ## chr12 - + ## chr13 + - ## chr13 - + ## chr14 + - ## chr14 - + ## chr15 + - ## chr15 - + ## chr16 + - ## chr16 - + ## chr17 + - ## chr17 - + ## chr18 + - ## chr18 - + ## chr19 + - ## chr19 - + ## chr20 + - ## chr20 - + ## chr21 + - ## chr21 - + ## chr22 + - ## chr22 - + ## chrX + - ## chrX - + ## chrY + - ## chrY - + print(result) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 21751211 | 21751236 | U0 | 0 | - | ## | chrY | 7701983 | 7702008 | U0 | 0 | - | ## | chrY | 21910706 | 21910731 | U0 | 0 | - | ## | chrY | 22054002 | 22054027 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 240 sequences from 24 chromosomes. def set_start_to_zero(df): df.Start = 0 return df print(chipseq.apply(set_start_to_zero)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int64) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 0 | 212609559 | U0 | 0 | + | ## | chr1 | 0 | 169887554 | U0 | 0 | + | ## | chr1 | 0 | 216711036 | U0 | 0 | + | ## | chr1 | 0 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 0 | 15224260 | U0 | 0 | - | ## | chrY | 0 | 13517917 | U0 | 0 | - | ## | chrY | 0 | 8010976 | U0 | 0 | - | ## | chrY | 0 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 10000 sequences from 24 chromosomes. Keyword arguments can be sent to the function: def set_start_to_zero(df, kwargs): print(&quot;My keyword arguments were:&quot;, kwargs.get(&quot;value&quot;), kwargs.get(&quot;whatever&quot;)) return df chipseq.apply(set_start_to_zero, value=123, whatever=&quot;hi there!&quot;) ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! ## My keyword arguments were: 123 hi there! "],
["intersecting-ranges.html", "15 Intersecting Ranges", " 15 Intersecting Ranges PyRanges objects can be intersected with other PyRanges to find the subset of the genome that is contained in both. The regular intersect-method finds the intersection of all combinations of ranges: 1 import pyranges as pr gr = pr.data.aorta() gr2 = pr.data.aorta2() print(gr.intersect(gr2)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 9988 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 10073 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 10079 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 10082 | 10138 | H3K27me3 | 7 | + | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 10241 | 10278 | H3K27me3 | 6 | - | ## | chr1 | 10241 | 10281 | H3K27me3 | 6 | - | ## | chr1 | 10241 | 10348 | H3K27me3 | 6 | - | ## | chr1 | 10280 | 10440 | H3K27me3 | 6 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 49 sequences from 1 chromosomes. The set_intersect method merges the intervals before finding the intersect: 2 print(gr.set_intersect(gr2)) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (category) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 9988 | 10445 | ## +--------------+-----------+-----------+ ## PyRanges object has 1 sequences from 1 chromosomes. Both methods also take a strandedness option, which can either be &quot;same&quot;, &quot;opposite&quot; or False/None print(gr.set_intersect(gr2, strandedness=&quot;opposite&quot;)) ## +--------------+-----------+-----------+--------------+ ## | Chromosome | Start | End | Strand | ## | (category) | (int32) | (int32) | (category) | ## |--------------+-----------+-----------+--------------| ## | chr1 | 9988 | 10223 | + | ## | chr1 | 10246 | 10348 | + | ## | chr1 | 10073 | 10272 | - | ## | chr1 | 10280 | 10440 | - | ## +--------------+-----------+-----------+--------------+ ## PyRanges object has 4 sequences from 1 chromosomes. The intersect method also takes a how argument, which currently accepts the option &quot;containment&quot;, which requires that the intervals in self be completely within the intervals in other. f1 = pr.data.f1() print(f1) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 3 sequences from 1 chromosomes. f2 = pr.data.f2() print(f2) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 1 | 2 | a | 0 | + | ## | chr1 | 6 | 7 | b | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 2 sequences from 1 chromosomes. result = f2.intersect(f1, how=&quot;containment&quot;) print(result) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 6 | 7 | b | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 1 sequences from 1 chromosomes. This is the same behavior as bedtools intersect.â© This is the same behavior as Bioconductor GenomicRanges intersect.â© "],
["overlapping-ranges.html", "16 Overlapping Ranges", " 16 Overlapping Ranges PyRanges objects can be overlapped with other PyRanges to report the intervals in self that overlap with those in other. import pyranges as pr gr = pr.data.aorta() gr2 = pr.data.aorta2() print(gr.overlap(gr2)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 49 sequences from 1 chromosomes. Both methods also take a strandedness option, which can either be &quot;same&quot;, &quot;opposite&quot; or False/None print(gr.overlap(gr2, strandedness=&quot;opposite&quot;)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 9953 | 10152 | H3K27me3 | 5 | + | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 10127 | 10326 | H3K27me3 | 1 | - | ## | chr1 | 10127 | 10326 | H3K27me3 | 1 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 22 sequences from 1 chromosomes. "],
["joining-ranges.html", "17 Joining Ranges", " 17 Joining Ranges You can combine all the intervals that overlap in two PyRanges objects with the join method. If you do not use a suffix, the default _b is chosen. import pyranges as pr gr = pr.data.aorta() gr2 = pr.data.aorta2() print(gr.join(gr2, suffix=&quot;_2&quot;)) ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_2 | End_2 | Name_2 | Score_2 | Strand_2 | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | 9988 | 10187 | Input | 1 | - | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | 10073 | 10272 | Input | 1 | + | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | 10079 | 10278 | Input | 1 | - | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | 10082 | 10281 | Input | 1 | - | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | 10079 | 10278 | Input | 1 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | 10082 | 10281 | Input | 1 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | 10149 | 10348 | Input | 1 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | 10280 | 10479 | Input | 1 | + | ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 49 sequences from 1 chromosomes. Both methods also take a strandedness option, which can either be &quot;same&quot;, &quot;opposite&quot; or False/None print(gr.join(gr2, strandedness=&quot;opposite&quot;)) ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_b | End_b | Name_b | Score_b | Strand_b | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | 9988 | 10187 | Input | 1 | - | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | 10079 | 10278 | Input | 1 | - | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | 10082 | 10281 | Input | 1 | - | ## | chr1 | 9953 | 10152 | H3K27me3 | 5 | + | 9988 | 10187 | Input | 1 | - | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | chr1 | 10127 | 10326 | H3K27me3 | 1 | - | 10073 | 10272 | Input | 1 | + | ## | chr1 | 10127 | 10326 | H3K27me3 | 1 | - | 10280 | 10479 | Input | 1 | + | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | 10073 | 10272 | Input | 1 | + | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | 10280 | 10479 | Input | 1 | + | ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 22 sequences from 1 chromosomes. The join method also takes a how argument, which currently accepts the option &quot;containment&quot;, which requires that the intervals in self be completely within the intervals in other. f1 = pr.data.f1() f2 = pr.data.f2() print(f2.join(f1, how=&quot;containment&quot;)) ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_b | End_b | Name_b | Score_b | Strand_b | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 6 | 7 | b | 0 | - | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 1 sequences from 1 chromosomes. The join method also takes the argument new_pos which can either be unionor Ã¬ntersection. The default suffixes are [&quot;_a&quot;, &quot;_b&quot;], but a suffixes argument overrides this. print(f2.join(f1, new_pos=&quot;intersection&quot;)) ## +--------------+-----------+-----------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Start_a | End_a | Name_a | Score_a | Strand | Start_b | End_b | Name_b | Score_b | Strand_b | ## | (category) | (int64) | (int64) | (int32) | (int32) | (object) | (int64) | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 6 | 7 | 6 | 7 | b | 0 | - | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 1 sequences from 1 chromosomes. "],
["finding-the-closest-intervals.html", "18 Finding the closest intervals", " 18 Finding the closest intervals With the nearest-method, you can search for the feature in other that is nearest the ones in self. import pyranges as pr gr = pr.data.chipseq() gr2 = pr.data.chipseq_background() print(gr.nearest(gr2, suffix=&quot;_Input&quot;)) ## +--------------+-----------+-----------+------------+-----------+--------------+---------------+-------------+--------------+---------------+----------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_Input | End_Input | Name_Input | Score_Input | Strand_Input | Distance | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int64) | ## |--------------+-----------+-----------+------------+-----------+--------------+---------------+-------------+--------------+---------------+----------------+------------| ## | chr1 | 226987592 | 226987617 | U0 | 0 | + | 226987603 | 226987628 | U0 | 0 | - | 0 | ## | chr1 | 1541598 | 1541623 | U0 | 0 | + | 1770383 | 1770408 | U0 | 0 | - | 228761 | ## | chr1 | 1599121 | 1599146 | U0 | 0 | + | 1770383 | 1770408 | U0 | 0 | - | 171238 | ## | chr1 | 3504032 | 3504057 | U0 | 0 | + | 3449677 | 3449702 | U0 | 0 | - | 54331 | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | chrY | 21751211 | 21751236 | U0 | 0 | - | 20557165 | 20557190 | U0 | 0 | + | 1194022 | ## | chrY | 21910706 | 21910731 | U0 | 0 | - | 20557165 | 20557190 | U0 | 0 | + | 1353517 | ## | chrY | 22054002 | 22054027 | U0 | 0 | - | 20557165 | 20557190 | U0 | 0 | + | 1496813 | ## | chrY | 22210637 | 22210662 | U0 | 0 | - | 20557165 | 20557190 | U0 | 0 | + | 1653448 | ## +--------------+-----------+-----------+------------+-----------+--------------+---------------+-------------+--------------+---------------+----------------+------------+ ## PyRanges object has 10000 sequences from 24 chromosomes. The nearest method takes a strandedness option, which can either be &quot;same&quot;, &quot;opposite&quot; or False/None print(gr.nearest(gr2, suffix=&quot;_Input&quot;, strandedness=&quot;opposite&quot;)) ## +--------------+-----------+-----------+------------+-----------+--------------+---------------+-------------+--------------+---------------+----------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_Input | End_Input | Name_Input | Score_Input | Strand_Input | Distance | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int64) | ## |--------------+-----------+-----------+------------+-----------+--------------+---------------+-------------+--------------+---------------+----------------+------------| ## | chr1 | 226987592 | 226987617 | U0 | 0 | + | 226987603 | 226987628 | U0 | 0 | - | 0 | ## | chr1 | 1541598 | 1541623 | U0 | 0 | + | 1770383 | 1770408 | U0 | 0 | - | 228761 | ## | chr1 | 1599121 | 1599146 | U0 | 0 | + | 1770383 | 1770408 | U0 | 0 | - | 171238 | ## | chr1 | 3504032 | 3504057 | U0 | 0 | + | 3449677 | 3449702 | U0 | 0 | - | 54331 | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | chrY | 21751211 | 21751236 | U0 | 0 | - | 20557165 | 20557190 | U0 | 0 | + | 1194022 | ## | chrY | 21910706 | 21910731 | U0 | 0 | - | 20557165 | 20557190 | U0 | 0 | + | 1353517 | ## | chrY | 22054002 | 22054027 | U0 | 0 | - | 20557165 | 20557190 | U0 | 0 | + | 1496813 | ## | chrY | 22210637 | 22210662 | U0 | 0 | - | 20557165 | 20557190 | U0 | 0 | + | 1653448 | ## +--------------+-----------+-----------+------------+-----------+--------------+---------------+-------------+--------------+---------------+----------------+------------+ ## PyRanges object has 10000 sequences from 24 chromosomes. The nearest method also takes two variables, namely how and overlap. How can take the values None, &quot;upstream&quot;, &quot;downstream&quot;, &quot;next&quot; and &quot;previous&quot;. &quot;upstream&quot; and &quot;downstream&quot; are always in reference to the PyRange the method is called on. &quot;next&quot; (to the right) and &quot;previous&quot; (to the left) are most useful to implement your own custom nearest methods. The default is None, which means that PyRanges looks in both directions. The overlap argument is a bool which indicates whether you want to include overlaps or not. f1 = pr.data.f1() print(f1) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 3 sequences from 1 chromosomes. f2 = pr.data.f2() print(f2) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 1 | 2 | a | 0 | + | ## | chr1 | 6 | 7 | b | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 2 sequences from 1 chromosomes. print(f2.nearest(f1, strandedness=&quot;opposite&quot;, how=&quot;next&quot;)) ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_b | End_b | Name_b | Score_b | Strand_b | Distance | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int64) | ## |--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+------------| ## | chr1 | 1 | 2 | a | 0 | + | 5 | 7 | interval2 | 0 | - | 4 | ## | chr1 | 6 | 7 | b | 0 | - | 8 | 9 | interval3 | 0 | + | 2 | ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+------------+ ## PyRanges object has 2 sequences from 1 chromosomes. print(f2.nearest(f1, how=&quot;upstream&quot;)) ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_b | End_b | Name_b | Score_b | Strand_b | Distance | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int64) | ## |--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+------------| ## | chr1 | 6 | 7 | b | 0 | - | 5 | 7 | interval2 | 0 | - | 0 | ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+------------+ ## PyRanges object has 1 sequences from 1 chromosomes. print(f2.nearest(f1, strandedness=&quot;opposite&quot;, how=&quot;next&quot;, overlap=False)) ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_b | End_b | Name_b | Score_b | Strand_b | Distance | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int64) | ## |--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+------------| ## | chr1 | 1 | 2 | a | 0 | + | 5 | 7 | interval2 | 0 | - | 4 | ## | chr1 | 6 | 7 | b | 0 | - | 8 | 9 | interval3 | 0 | + | 2 | ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+------------+ ## PyRanges object has 2 sequences from 1 chromosomes. "],
["statistics-similarity-between-pyranges.html", "19 Statistics: similarity between PyRanges", " 19 Statistics: similarity between PyRanges PyRanges can compute a normalized Jaccard-statistic (ranging from 0 to 1) to compute the similarities between two ranges. import pyranges as pr gr = pr.data.chipseq() gr2 = pr.data.chipseq_background() print(gr.stats.jaccard(gr2, strandedness=&quot;same&quot;)) ## 6.241132391061034e-06 "],
["statistics-spatial-correlations-between-pyranges.html", "20 Statistics: spatial correlations between PyRanges", " 20 Statistics: spatial correlations between PyRanges To compute the similarities between two sets of ranges which do not necessarily overlap much, we can use the relative distance function. It describes the relative distances between each interval in one set and the two closest intervals in another. Any deviance from a uniform distribution is an indication of spatial correlation. import pyranges as pr gr = pr.data.chipseq() gr2 = pr.data.chipseq_background() print(gr.stats.relative_distance(gr2, strandedness=&quot;same&quot;)) ## reldist count total fraction ## 0 0.00 254 9930 0.025579 ## 1 0.01 210 9930 0.021148 ## 2 0.02 222 9930 0.022356 ## 3 0.03 240 9930 0.024169 ## 4 0.04 212 9930 0.021349 ## 5 0.05 191 9930 0.019235 ## 6 0.06 192 9930 0.019335 ## 7 0.07 205 9930 0.020645 ## 8 0.08 162 9930 0.016314 ## 9 0.09 189 9930 0.019033 ## 10 0.10 186 9930 0.018731 ## 11 0.11 212 9930 0.021349 ## 12 0.12 209 9930 0.021047 ## 13 0.13 189 9930 0.019033 ## 14 0.14 201 9930 0.020242 ## 15 0.15 178 9930 0.017925 ## 16 0.16 203 9930 0.020443 ## 17 0.17 224 9930 0.022558 ## 18 0.18 196 9930 0.019738 ## 19 0.19 212 9930 0.021349 ## 20 0.20 208 9930 0.020947 ## 21 0.21 196 9930 0.019738 ## 22 0.22 203 9930 0.020443 ## 23 0.23 198 9930 0.019940 ## 24 0.24 223 9930 0.022457 ## 25 0.25 186 9930 0.018731 ## 26 0.26 189 9930 0.019033 ## 27 0.27 192 9930 0.019335 ## 28 0.28 163 9930 0.016415 ## 29 0.29 204 9930 0.020544 ## 30 0.30 210 9930 0.021148 ## 31 0.31 202 9930 0.020342 ## 32 0.32 211 9930 0.021249 ## 33 0.33 195 9930 0.019637 ## 34 0.34 197 9930 0.019839 ## 35 0.35 175 9930 0.017623 ## 36 0.36 214 9930 0.021551 ## 37 0.37 178 9930 0.017925 ## 38 0.38 176 9930 0.017724 ## 39 0.39 193 9930 0.019436 ## 40 0.40 192 9930 0.019335 ## 41 0.41 179 9930 0.018026 ## 42 0.42 209 9930 0.021047 ## 43 0.43 184 9930 0.018530 ## 44 0.44 198 9930 0.019940 ## 45 0.45 208 9930 0.020947 ## 46 0.46 192 9930 0.019335 ## 47 0.47 184 9930 0.018530 ## 48 0.48 183 9930 0.018429 ## 49 0.49 201 9930 0.020242 "],
["turning-ranges-into-rles.html", "21 Turning Ranges into RLEs", " 21 Turning Ranges into RLEs Ranges can be turned into dicts of run length encodings with the coverage function: import pyranges as pr gr = pr.data.aorta() print(gr) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 9953 | 10152 | H3K27me3 | 5 | + | ## | chr1 | 10024 | 10223 | H3K27me3 | 1 | + | ## | chr1 | 10246 | 10445 | H3K27me3 | 4 | + | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 9978 | 10177 | H3K27me3 | 7 | - | ## | chr1 | 10001 | 10200 | H3K27me3 | 5 | - | ## | chr1 | 10127 | 10326 | H3K27me3 | 1 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 11 sequences from 1 chromosomes. print(gr.coverage()) ## chr1 ## +--------+--------+------+------+-----+------+---------+------+-------+-----+---------+-------+ ## | Runs | 9916 | 23 | 12 | 2 | 25 | ... | 80 | 114 | 5 | 99801 | 199 | ## |--------+--------+------+------+-----+------+---------+------+-------+-----+---------+-------| ## | Values | 0.0 | 1.0 | 2.0 | 3.0 | 4.0 | ... | 3.0 | 2.0 | 1.0 | 0.0 | 1.0 | ## +--------+--------+------+------+-----+------+---------+------+-------+-----+---------+-------+ ## Rle of length 110445 containing 22 elements ## Unstranded PyRles object with 1 chromosome. print(gr.coverage(strand=True)) ## chr1 + ## -- ## +--------+--------+------+------+-------+------+------+------+-------+---------+-------+ ## | Runs | 9939 | 14 | 71 | 114 | 14 | 71 | 23 | 199 | 99801 | 199 | ## |--------+--------+------+------+-------+------+------+------+-------+---------+-------| ## | Values | 0.0 | 1.0 | 2.0 | 3.0 | 2.0 | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+--------+------+------+-------+------+------+------+-------+---------+-------+ ## Rle of length 110445 containing 10 elements ## ## chr1 - ## -- ## +--------+--------+------+------+------+-------+---------+------+------+------+------+-------+ ## | Runs | 9916 | 35 | 27 | 23 | 114 | ... | 27 | 23 | 41 | 85 | 114 | ## |--------+--------+------+------+------+-------+---------+------+------+------+------+-------| ## | Values | 0.0 | 1.0 | 2.0 | 3.0 | 4.0 | ... | 3.0 | 2.0 | 1.0 | 2.0 | 1.0 | ## +--------+--------+------+------+------+-------+---------+------+------+------+------+-------+ ## Rle of length 10440 containing 12 elements ## PyRles object with 2 chromosomes/strand pairs. print(gr.coverage(strand=True, rpm=True)) ## chr1 + ## -- ## +--------+--------+-------------------+--------------------+-------------------+--------------------+-------------------+------+-------------------+---------+-------------------+ ## | Runs | 9939 | 14 | 71 | 114 | 14 | 71 | 23 | 199 | 99801 | 199 | ## |--------+--------+-------------------+--------------------+-------------------+--------------------+-------------------+------+-------------------+---------+-------------------| ## | Values | 0.0 | 90909.09090909091 | 181818.18181818182 | 272727.2727272727 | 181818.18181818182 | 90909.09090909091 | 0.0 | 90909.09090909091 | 0.0 | 90909.09090909091 | ## +--------+--------+-------------------+--------------------+-------------------+--------------------+-------------------+------+-------------------+---------+-------------------+ ## Rle of length 110445 containing 10 elements ## ## chr1 - ## -- ## +--------+--------+-------------------+--------------------+-------------------+--------------------+---------+-------------------+--------------------+-------------------+--------------------+-------------------+ ## | Runs | 9916 | 35 | 27 | 23 | 114 | ... | 27 | 23 | 41 | 85 | 114 | ## |--------+--------+-------------------+--------------------+-------------------+--------------------+---------+-------------------+--------------------+-------------------+--------------------+-------------------| ## | Values | 0.0 | 90909.09090909091 | 181818.18181818182 | 272727.2727272727 | 363636.36363636365 | ... | 272727.2727272727 | 181818.18181818182 | 90909.09090909091 | 181818.18181818182 | 90909.09090909091 | ## +--------+--------+-------------------+--------------------+-------------------+--------------------+---------+-------------------+--------------------+-------------------+--------------------+-------------------+ ## Rle of length 10440 containing 12 elements ## PyRles object with 2 chromosomes/strand pairs. To get the RPM-normalized coverage, use the rpm argument. You can also create coverage for an any numeric value in your PyRanges: print(gr.coverage(&quot;Score&quot;)) ## chr1 ## +--------+--------+------+------+------+------+---------+------+-------+-----+---------+-------+ ## | Runs | 9916 | 23 | 12 | 2 | 25 | ... | 80 | 114 | 5 | 99801 | 199 | ## |--------+--------+------+------+------+------+---------+------+-------+-----+---------+-------| ## | Values | 0.0 | 5.0 | 12.0 | 20.0 | 25.0 | ... | 11.0 | 10.0 | 4.0 | 0.0 | 1.0 | ## +--------+--------+------+------+------+------+---------+------+-------+-----+---------+-------+ ## Rle of length 110445 containing 22 elements ## Unstranded PyRles object with 1 chromosome. "],
["an-introduction-to-rles.html", "22 An introduction to RLEs", " 22 An introduction to RLEs Rles are runlengths - a datastructure that can compactly describe the coverage of a genome (or some other score that is associated with each nucleotide). It is used for efficient genomewide arithmetic operations on these scores. from pyrle import Rle # or: from pyranges import Rle runs = [10, 10, 10, 10] values = [0, 1, 0, 0] r1 = Rle(runs, values) print(r1) ## +--------+------+------+------+ ## | Runs | 10 | 10 | 20 | ## |--------+------+------+------| ## | Values | 0.0 | 1.0 | 0.0 | ## +--------+------+------+------+ ## Rle of length 40 containing 3 elements runs2 = [11, 9, 20] values2 = [100, 0, 100] r2 = Rle(runs2, values2) print(r2) ## +--------+-------+-----+-------+ ## | Runs | 11 | 9 | 20 | ## |--------+-------+-----+-------| ## | Values | 100.0 | 0.0 | 100.0 | ## +--------+-------+-----+-------+ ## Rle of length 40 containing 3 elements print(r1 + r2) ## +--------+-------+-------+-----+-------+ ## | Runs | 10 | 1 | 9 | 20 | ## |--------+-------+-------+-----+-------| ## | Values | 100.0 | 101.0 | 1.0 | 100.0 | ## +--------+-------+-------+-----+-------+ ## Rle of length 40 containing 4 elements print(r1 * r2) ## +--------+------+-------+------+ ## | Runs | 10 | 1 | 29 | ## |--------+------+-------+------| ## | Values | 0.0 | 100.0 | 0.0 | ## +--------+------+-------+------+ ## Rle of length 40 containing 3 elements print(r1.runs) ## [10 10 20] print(r1.values) ## [0. 1. 0.] r1 = r1 + 5 print(r1) ## +--------+------+------+------+ ## | Runs | 10 | 10 | 20 | ## |--------+------+------+------| ## | Values | 5.0 | 6.0 | 5.0 | ## +--------+------+------+------+ ## Rle of length 40 containing 3 elements print(r2 / r1) ## +--------+------+--------------------+-----+------+ ## | Runs | 10 | 1 | 9 | 20 | ## |--------+------+--------------------+-----+------| ## | Values | 20.0 | 16.666666666666668 | 0.0 | 20.0 | ## +--------+------+--------------------+-----+------+ ## Rle of length 40 containing 4 elements "],
["run-length-encoding-dicts.html", "23 Run Length Encoding dicts", " 23 Run Length Encoding dicts Since you need more than one run length to describe a genome with multiple chromosomes, pyranges has a datastructure called PyRles for collections of Rles. It can be created from a PyRanges object by invoking the coverage function. Rledicts support the arithmetic operations +, -, /, and *. import pyranges as pr gr = pr.data.chipseq() gr_bg = pr.data.chipseq_background() cs = gr.coverage() print(cs) ## chr1 ## +--------+-----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## | Runs | 1325303 | 25 | 216270 | 25 | 57498 | ... | 25 | 167465 | 25 | 989343 | 25 | ## |--------+-----------+------+----------+------+---------+---------+------+----------+------+----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## Rle of length 247134924 containing 1762 elements ## ... ## chrY ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------+ ## | Runs | 7046809 | 25 | 147506 | 25 | 211011 | ... | 25 | 143271 | 25 | 156610 | 25 | ## |--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------+ ## Rle of length 22210662 containing 46 elements ## Unstranded PyRles object with 24 chromosomes. bg = gr_bg.coverage() print(bg) ## chr1 ## +--------+----------+------+----------+------+---------+---------+------+----------+------+-----------+------+ ## | Runs | 887771 | 25 | 106864 | 25 | 46417 | ... | 25 | 656076 | 25 | 1261276 | 25 | ## |--------+----------+------+----------+------+---------+---------+------+----------+------+-----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+----------+------+----------+------+---------+---------+------+----------+------+-----------+------+ ## Rle of length 246875649 containing 1480 elements ## ... ## chrY ## +--------+------------+------+--------+------+---------+---------+------+-----------+------+------------+------+ ## | Runs | 10629111 | 25 | 3320 | 25 | 11045 | ... | 25 | 8620274 | 25 | 36845024 | 25 | ## |--------+------------+------+--------+------+---------+---------+------+-----------+------+------------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+------------+------+--------+------+---------+---------+------+-----------+------+------------+------+ ## Rle of length 57402239 containing 16 elements ## Unstranded PyRles object with 25 chromosomes. print(cs + bg) ## chr1 ## +--------+----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## | Runs | 887771 | 25 | 106864 | 25 | 46417 | ... | 25 | 730068 | 25 | 259250 | 25 | ## |--------+----------+------+----------+------+---------+---------+------+----------+------+----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## Rle of length 247134924 containing 3242 elements ## ... ## chrY ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+------------+------+ ## | Runs | 7046809 | 25 | 147506 | 25 | 211011 | ... | 25 | 156610 | 25 | 35191552 | 25 | ## |--------+-----------+------+----------+------+----------+---------+------+----------+------+------------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+------------+------+ ## Rle of length 57402239 containing 62 elements ## Unstranded PyRles object with 25 chromosomes. When using arithmetic operations with a stranded and an unstranded PyRle, the stranded PyRle is automatically demoted to an unstranded PyRle. bg_stranded = gr_bg.coverage(strand=True) print(bg_stranded) ## chr1 + ## +--------+-----------+------+-----------+------+----------+---------+------+----------+------+-----------+------+ ## | Runs | 1041102 | 25 | 1088232 | 25 | 109724 | ... | 25 | 719119 | 25 | 1774357 | 25 | ## |--------+-----------+------+-----------+------+----------+---------+------+----------+------+-----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+-----------+------+----------+---------+------+----------+------+-----------+------+ ## Rle of length 245614348 containing 724 elements ## ... ## chrY - ## +--------+------------+------+--------+------+-----------+------+---------+------+------------+------+ ## | Runs | 10629111 | 25 | 3320 | 25 | 1286333 | 25 | 18027 | 25 | 45465323 | 25 | ## |--------+------------+------+--------+------+-----------+------+---------+------+------------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+------------+------+--------+------+-----------+------+---------+------+------------+------+ ## Rle of length 57402239 containing 10 elements ## PyRles object with 50 chromosomes/strand pairs. print(cs + bg_stranded) ## chr1 ## +--------+----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## | Runs | 887771 | 25 | 106864 | 25 | 46417 | ... | 25 | 730068 | 25 | 259250 | 25 | ## |--------+----------+------+----------+------+---------+---------+------+----------+------+----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## Rle of length 247134924 containing 3242 elements ## ... ## chrY ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+------------+------+ ## | Runs | 7046809 | 25 | 147506 | 25 | 211011 | ... | 25 | 156610 | 25 | 35191552 | 25 | ## |--------+-----------+------+----------+------+----------+---------+------+----------+------+------------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+------------+------+ ## Rle of length 57402239 containing 62 elements ## Unstranded PyRles object with 25 chromosomes. Like Rles, PyGRles supports arithmetic operations with numbers. print((0.67 + cs) * 5) ## chr1 ## +--------+-----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## | Runs | 1325303 | 25 | 216270 | 25 | 57498 | ... | 25 | 167465 | 25 | 989343 | 25 | ## |--------+-----------+------+----------+------+---------+---------+------+----------+------+----------+------| ## | Values | 3.35 | 8.35 | 3.35 | 8.35 | 3.35 | ... | 8.35 | 3.35 | 8.35 | 3.35 | 8.35 | ## +--------+-----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## Rle of length 247134924 containing 1762 elements ## ... ## chrY ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------+ ## | Runs | 7046809 | 25 | 147506 | 25 | 211011 | ... | 25 | 143271 | 25 | 156610 | 25 | ## |--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------| ## | Values | 3.35 | 8.35 | 3.35 | 8.35 | 3.35 | ... | 8.35 | 3.35 | 8.35 | 3.35 | 8.35 | ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------+ ## Rle of length 22210662 containing 46 elements ## Unstranded PyRles object with 24 chromosomes. "],
["subsetting-rles.html", "24 Subsetting Rles", " 24 Subsetting Rles Rles can be subsetted using an integer (or a list of integers) to get the RLE value at one or more points. from pyrle import Rle r = Rle([3, 2, 1, 1, 1, 1], [0, 1, 2, 1, 0, 1]) print(r) ## +--------+-----+-----+-----+-----+-----+-----+ ## | Runs | 3 | 2 | 1 | 1 | 1 | 1 | ## |--------+-----+-----+-----+-----+-----+-----| ## | Values | 0.0 | 1.0 | 2.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----+-----+-----+-----+-----+-----+ ## Rle of length 9 containing 6 elements print(r[2], r[3]) ## 0.0 1.0 print(r[[3, 5, 7]]) ## [1. 2. 0.] To get the slice of one or more run lengths use a slice or a dataframe with (at least) the columns Start and End. import pandas as pd from pyrle import Rle r = Rle([3, 2, 1, 1, 1, 1], [0, 1, 2, 1, 0, 1]) print(r[5:10]) ## +--------+-----+-----+-----+-----+ ## | Runs | 1 | 1 | 1 | 1 | ## |--------+-----+-----+-----+-----| ## | Values | 2.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----+-----+-----+-----+ ## Rle of length 4 containing 4 elements df = pd.DataFrame({&quot;Start&quot;: [2, 5], &quot;End&quot;: [4, 900]}) print(df.to_csv(index=False, sep=&quot;\\t&quot;)) ## Start End ## 2 4 ## 5 900 print(r[df], end=&quot;\\n&quot;) ## [+--------+-----+-----+ ## | Runs | 1 | 1 | ## |--------+-----+-----| ## | Values | 0.0 | 1.0 | ## +--------+-----+-----+ ## Rle of length 2 containing 2 elements, +--------+-----+-----+-----+-----+ ## | Runs | 1 | 1 | 1 | 1 | ## |--------+-----+-----+-----+-----| ## | Values | 2.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----+-----+-----+-----+ ## Rle of length 4 containing 4 elements] "],
["subsetting-pyrles.html", "25 Subsetting PyRles", " 25 Subsetting PyRles Rles can be subsetted on Chromosome, Strand or Chromosome/Strand pairs import pyranges as pr gr = pr.data.chipseq() c = gr.coverage() print(c[&quot;chr1&quot;]) ## +--------+-----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## | Runs | 1325303 | 25 | 216270 | 25 | 57498 | ... | 25 | 167465 | 25 | 989343 | 25 | ## |--------+-----------+------+----------+------+---------+---------+------+----------+------+----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## Rle of length 247134924 containing 1762 elements print(c[&quot;chr1&quot;, &quot;+&quot;]) ## +--------+-----+ ## | Runs | 1 | ## |--------+-----| ## | Values | 0.0 | ## +--------+-----+ ## Rle of length 1 containing 1 elements print(c[&quot;-&quot;]) ## +--------+-----+ ## | Runs | 1 | ## |--------+-----| ## | Values | 0.0 | ## +--------+-----+ ## Rle of length 1 containing 1 elements To get the coverage of one or more intervals, you can use a PyRanges-object to subset the PyRles import pyranges as pr f1 = pr.data.f1() print(f1) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## PyRanges object has 3 sequences from 1 chromosomes. f1_c = f1.coverage() print(f1_c) ## chr1 ## +--------+-----+-----+-----+-----+-----+-----+ ## | Runs | 3 | 2 | 1 | 1 | 1 | 1 | ## |--------+-----+-----+-----+-----+-----+-----| ## | Values | 0.0 | 1.0 | 2.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----+-----+-----+-----+-----+-----+ ## Rle of length 9 containing 6 elements ## Unstranded PyRles object with 1 chromosome. print(f1_c[f1]) ## {} "],
["using-multiple-cores.html", "26 Using multiple cores", " 26 Using multiple cores Most PyRanges and PyRle-operations can be run in parallel. Even user-made functions can be run in parallel using the apply or apply_pair functions. PyRanges uses Ray, a âflexible, high-performance distributed execution frameworkâ to run in parallel-mode. To start Ray in parallel-mode you need to import and initialize Ray before importing PyRanges or PyRles. import ray ray.init() # then import pyranges as pr Now PyRanges and PyRles is running in multi-core mode. Note: By default PyRanges uses no extra cores. Unless the data are reasonably big (at least 10^7) number of intervals or the functions are very long-running, running in parallel-mode is actually more time-consuming than single-core mode. Also, if the PyRanges contains a lot of text data, there is less to be gained by using multithreading. This is due to how strings are represented in memory in Python and Pandas. However, this is something that will be fixed in pandas2 and then the multithreading capabilities of PyRanges will be more useful for these kinds of data. "],
["fetching-gene-tracks-as-pyranges.html", "27 Fetching gene tracks as PyRanges", " 27 Fetching gene tracks as PyRanges PyRanges can fetch data from UCSC, GENCODE and Ensembl through the pyranges_db add-on package. Do pip install pyranges_db. Each database contains at least two methods, namely genes and genomes. UCSC and Ensembl also has the method chromosome_sizes. The genes-methods all take a boolean flag head. If true, it only fetches a few hundred rows of data. import pyranges_db as pr_db genomes = pr_db.ucsc.genomes() print(genomes.head()) ## Genome ## 0 acaChl1 ## 1 ailMel1 ## 2 allMis1 ## 3 allSin1 ## 4 amaVit1 chr_sizes = pr_db.ucsc.chromosome_sizes(&quot;hg38&quot;) print(chr_sizes) ## +------------------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (category) | (int32) | (int32) | ## |------------------------+-----------+-----------| ## | chr1 | 0 | 248956422 | ## | chr1_GL383518v1_alt | 0 | 182439 | ## | chr1_GL383519v1_alt | 0 | 110268 | ## | chr1_GL383520v2_alt | 0 | 366580 | ## | ... | ... | ... | ## | chrY_KZ208924v1_fix | 0 | 209722 | ## | chrY_KZ208923v1_fix | 0 | 48370 | ## | chrY_KN196487v1_fix | 0 | 101150 | ## | chrY_KI270740v1_random | 0 | 37240 | ## +------------------------+-----------+-----------+ ## PyRanges object has 595 sequences from 595 chromosomes. genes = pr_db.ucsc.genes(&quot;hg38&quot;, head=True) print(genes) ## +--------------+-----------+-----------+--------------+------------+----------------+--------------+ ## | Chromosome | Start | End | Strand | Feature | TranscriptID | ExonNumber | ## | (category) | (int32) | (int32) | (category) | (object) | (category) | (object) | ## |--------------+-----------+-----------+--------------+------------+----------------+--------------| ## | chr1 | 11873 | 12227 | + | exon | NR_046018 | 1 | ## | chr1 | 11873 | 12227 | + | exon | NR_046018 | 2 | ## | chr1 | 11873 | 12227 | + | exon | NR_046018 | 3 | ## | chr1 | 11873 | 14409 | + | transcript | NR_046018 | nan | ## | ... | ... | ... | ... | ... | ... | ... | ## | chrY | 964348 | 964530 | + | exon | NM_006140 | 11 | ## | chrY | 964348 | 964530 | + | exon | NM_006140 | 12 | ## | chrY | 964348 | 964530 | + | exon | NM_006140 | 13 | ## | chrY | 1268799 | 1309935 | + | transcript | NM_006140 | nan | ## +--------------+-----------+-----------+--------------+------------+----------------+--------------+ ## PyRanges object has 5105 sequences from 46 chromosomes. "]
]
