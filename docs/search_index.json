[
["index.html", "PyRanges documentation 1 Introduction to PyRanges", " PyRanges documentation Endre Bakken Stovner 2019-08-02 1 Introduction to PyRanges PyRanges are collections of intervals that support comparison operations (like overlap and intersect) and other methods that are useful for genomic analyses. The ranges can have an arbitrary number of meta-data fields, i.e.Â columns associated with them. The data in PyRanges objects are stored in a pandas dataframe. This means the vast Python ecosystem for high-performance scientific computing is available to manipulate the data in PyRanges-objects. import pyranges as pr from pyranges import PyRanges import pandas as pd from io import StringIO f1 = &quot;&quot;&quot;Chromosome Start End Score Strand chr1 4 7 23.8 + chr1 6 11 0.13 - chr2 0 14 42.42 +&quot;&quot;&quot; df1 = pd.read_csv(StringIO(f1), sep=&quot;\\s+&quot;) gr1 = PyRanges(df1) Now we can subset the PyRange in various ways: print(gr1) ## +--------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------| ## | chr1 | 4 | 7 | 23.8 | + | ## | chr1 | 6 | 11 | 0.13 | - | ## | chr2 | 0 | 14 | 42.42 | + | ## +--------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 3 rows and 5 columns from 2 chromosomes. print(gr1[&quot;chr1&quot;, 0:5]) ## +--------------+-----------+-----------+-------------+--------------+ ## | Chromosome | Start | End | Score | Strand | ## | (category) | (int32) | (int32) | (float64) | (category) | ## |--------------+-----------+-----------+-------------+--------------| ## | chr1 | 4 | 7 | 23.8 | + | ## +--------------+-----------+-----------+-------------+--------------+ ## Stranded PyRanges object has 1 rows and 5 columns from 1 chromosomes. print(gr1[&quot;chr1&quot;, &quot;-&quot;, 6:100]) ## +--------------+-----------+-----------+-------------+--------------+ ## | Chromosome | Start | End | Score | Strand | ## | (category) | (int32) | (int32) | (float64) | (category) | ## |--------------+-----------+-----------+-------------+--------------| ## | chr1 | 6 | 11 | 0.13 | - | ## +--------------+-----------+-----------+-------------+--------------+ ## Stranded PyRanges object has 1 rows and 5 columns from 1 chromosomes. print(gr1.Score) ## 0 23.80 ## 1 0.13 ## 2 42.42 ## Name: Score, dtype: float64 And we can perform comparison operations with two PyRanges: f2 = &quot;&quot;&quot;Chromosome Start End Score Strand chr1 5 6 -0.01 - chr1 9 12 200 + chr3 0 14 21.21 -&quot;&quot;&quot; df2 = pd.read_csv(StringIO(f2), sep=&quot;\\s+&quot;) gr2 = PyRanges(df2) print(gr2) ## +--------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------| ## | chr1 | 9 | 12 | 200 | + | ## | chr1 | 5 | 6 | -0.01 | - | ## | chr3 | 0 | 14 | 21.21 | - | ## +--------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 3 rows and 5 columns from 2 chromosomes. print(gr1.intersect(gr2, strandedness=&quot;opposite&quot;)) ## +--------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------| ## | chr1 | 5 | 6 | 23.8 | + | ## | chr1 | 9 | 11 | 0.13 | - | ## +--------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 2 rows and 5 columns from 1 chromosomes. print(gr1.intersect(gr2, strandedness=False)) ## +--------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------| ## | chr1 | 5 | 6 | 23.8 | + | ## | chr1 | 9 | 11 | 0.13 | - | ## +--------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 2 rows and 5 columns from 1 chromosomes. There are also convenience methods for single PyRanges: print(gr1.merge()) ## +--------------+------------+------------+------------+ ## | Chromosome | Start | End | Strand | ## | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------| ## | chr1 | 4 | 7 | + | ## | chr1 | 6 | 11 | - | ## | chr2 | 0 | 14 | + | ## +--------------+------------+------------+------------+ ## Stranded PyRanges object has 3 rows and 4 columns from 2 chromosomes. The underlying dataframe can always be accessed: print(gr1.df) ## Chromosome Start End Score Strand ## 0 chr1 4 7 23.80 + ## 1 chr1 6 11 0.13 - ## 2 chr2 0 14 42.42 + "],
["loadingcreating-pyranges.html", "2 Loading/Creating PyRanges", " 2 Loading/Creating PyRanges A PyRanges object can be built in three ways: from a Pandas dataframe using the PyRanges constructor with the chromosomes, starts and ends (and optionally strands), individually. using one of the custom reader functions for genomic data (read_bed, read_bam or read_gtf) Using a DataFrame If you instantiate a PyRanges object from a dataframe, the dataframe should at least contain the columns Chromosome, Start and End. A column called Strand is optional. Any other columns in the dataframe are treated as metadata. import pandas as pd import pyranges as pr chipseq = pr.get_example_path(&quot;chipseq.bed&quot;) df = pd.read_csv(chipseq, header=None, names=&quot;Chromosome Start End Name Score Strand&quot;.split(), sep=&quot;\\t&quot;) print(df.head(2)) ## Chromosome Start End Name Score Strand ## 0 chr8 28510032 28510057 U0 0 - ## 1 chr7 107153363 107153388 U0 0 - print(df.tail(2)) ## Chromosome Start End Name Score Strand ## 9998 chr1 194245558 194245583 U0 0 + ## 9999 chr8 57916061 57916086 U0 0 + print(pr.PyRanges(df)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. Using constructor keywords The other way to instantiate a PyRanges object is to use the constructor with keywords: gr = pr.PyRanges(chromosomes=df.Chromosome, starts=df.Start, ends=df.End) print(gr) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (category) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 100079649 | 100079674 | ## | chr1 | 212609534 | 212609559 | ## | chr1 | 223587418 | 223587443 | ## | chr1 | 202450161 | 202450186 | ## | ... | ... | ... | ## | chrY | 11942770 | 11942795 | ## | chrY | 8316773 | 8316798 | ## | chrY | 7463444 | 7463469 | ## | chrY | 7405376 | 7405401 | ## +--------------+-----------+-----------+ ## Unstranded PyRanges object has 10,000 rows and 3 columns from 24 chromosomes. It is possible to make PyRanges objects out of basic Python datatypes: gr = pr.PyRanges(chromosomes=&quot;chr1&quot;, strands=&quot;+&quot;, starts=[0, 1, 2], ends=(3, 4, 5)) print(gr) ## +--------------+-----------+-----------+--------------+ ## | Chromosome | Start | End | Strand | ## | (category) | (int32) | (int32) | (category) | ## |--------------+-----------+-----------+--------------| ## | chr1 | 0 | 3 | + | ## | chr1 | 1 | 4 | + | ## | chr1 | 2 | 5 | + | ## +--------------+-----------+-----------+--------------+ ## Stranded PyRanges object has 3 rows and 4 columns from 1 chromosomes. gr = pr.PyRanges(chromosomes=&quot;chr1 chr2 chr3&quot;.split(), strands=&quot;+ - +&quot;.split(), starts=[0, 1, 2], ends=(3, 4, 5)) print(gr) ## +--------------+------------+------------+------------+ ## | Chromosome | Start | End | Strand | ## | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------| ## | chr1 | 0 | 3 | + | ## | chr2 | 1 | 4 | - | ## | chr3 | 2 | 5 | + | ## +--------------+------------+------------+------------+ ## Stranded PyRanges object has 3 rows and 4 columns from 3 chromosomes. Using read_bed, read_gtf or read_bam The pyranges library can create PyRanges from three common file formats, namely gtf/gff, bed and bam [^]. ensembl_path = pr.get_example_path(&quot;ensembl.gtf&quot;) gr = pr.read_gtf(ensembl_path) print(gr) ## +--------------+------------+--------------+-----------+-----------+------------+--------------+------------+-------------+------------+-----------------+---------------+----------------+------------------------------------+-----------------+-------------+-------+ ## | Chromosome | Source | Feature | Start | End | Score | Strand | Frame | (assigned | ccds_id | exon_id | exon_number | exon_version | gene_biotype | gene_id | gene_name | ... | ## | (category) | (object) | (category) | (int32) | (int32) | (object) | (category) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | ... | ## |--------------+------------+--------------+-----------+-----------+------------+--------------+------------+-------------+------------+-----------------+---------------+----------------+------------------------------------+-----------------+-------------+-------| ## | 1 | havana | gene | 11869 | 14409 | . | + | . | nan | nan | nan | nan | nan | transcribed_unprocessed_pseudogene | ENSG00000223972 | DDX11L1 | ... | ## | 1 | havana | transcript | 11869 | 14409 | . | + | . | nan | nan | nan | nan | nan | transcribed_unprocessed_pseudogene | ENSG00000223972 | DDX11L1 | ... | ## | 1 | havana | exon | 11869 | 12227 | . | + | . | nan | nan | ENSE00002234944 | 1 | 1 | transcribed_unprocessed_pseudogene | ENSG00000223972 | DDX11L1 | ... | ## | 1 | havana | exon | 12613 | 12721 | . | + | . | nan | nan | ENSE00003582793 | 2 | 1 | transcribed_unprocessed_pseudogene | ENSG00000223972 | DDX11L1 | ... | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | 1 | ensembl | transcript | 120725 | 133723 | . | - | . | nan | nan | nan | nan | nan | lincRNA | ENSG00000238009 | AL627309.1 | ... | ## | 1 | ensembl | exon | 133374 | 133723 | . | - | . | nan | nan | ENSE00003748456 | 1 | 1 | lincRNA | ENSG00000238009 | AL627309.1 | ... | ## | 1 | ensembl | exon | 129055 | 129223 | . | - | . | nan | nan | ENSE00003734824 | 2 | 1 | lincRNA | ENSG00000238009 | AL627309.1 | ... | ## | 1 | ensembl | exon | 120874 | 120932 | . | - | . | nan | nan | ENSE00003740919 | 3 | 1 | lincRNA | ENSG00000238009 | AL627309.1 | ... | ## +--------------+------------+--------------+-----------+-----------+------------+--------------+------------+-------------+------------+-----------------+---------------+----------------+------------------------------------+-----------------+-------------+-------+ ## Stranded PyRanges object has 95 rows and 28 columns from 1 chromosomes. ## Hidden columns: gene_source, gene_version, previous, protein_id, protein_version, tag, transcript_biotype, transcript_id, transcript_name, transcript_source... (+ 2 more.) To read bam files the optional bamread-library must be installed. Use conda install -c bioconda bamread or pip install bamread to install it. read_bam takes the arguments mapq, required_flag, filter_flag, which have the default values 0, 0 and 1540, respectively. All the reader functions also take the flag as_df [^]: PyRanges uses the pysam library which requires that the bam file must have an index. "],
["writing-pyranges-to-disk.html", "3 Writing PyRanges to disk", " 3 Writing PyRanges to disk The PyRanges can be written to several formats, namely csv, gtf and bigwig. If no path-argument is given, the string representation of the data is returned. (It may potentially be very large.) If a path is given, the return value is the object itself. This way the write methods can easily be inserted in method call chains. import pyranges as pr import pyranges_db as pr_db gr = pr.data.chipseq() gr.to_gtf(&quot;chipseq.gtf&quot;) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. print(gr[:10000].to_gtf()) The to_csv method takes the arguments header and sep. gr.to_csv(&quot;chipseq.csv&quot;, sep=&quot;\\t&quot;, header=True) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. print(gr[:10000].to_csv(sep=&quot;|&quot;, header=True)) The pyranges library can also create bigwigs, but it needs the library pybigwig which is not installed by default. Use conda install -c bioconda pybigwig or pip install pybigwig to install it. The bigwig writer needs to know the chromosome sizes. You can fetch these using the pyranges database functions. chromsizes = pr_db.ucsc.chromosome_sizes(&quot;hg19&quot;) gr.to_bigwig(&quot;chipseq.bw&quot;, chromsizes) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. If you want to write one bigwig for each strand, you need to do it manually. gr[&quot;+&quot;].to_bigwig(&quot;chipseq_plus.bw&quot;, chromsizes) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 21559181 | 21559206 | U0 | 0 | + | ## | chrY | 11942770 | 11942795 | U0 | 0 | + | ## | chrY | 8316773 | 8316798 | U0 | 0 | + | ## | chrY | 7463444 | 7463469 | U0 | 0 | + | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 5,050 rows and 6 columns from 24 chromosomes. gr[&quot;-&quot;].to_bigwig(&quot;chipseq_minus.bw&quot;, chromsizes) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 100079649 | 100079674 | U0 | 0 | - | ## | chr1 | 223587418 | 223587443 | U0 | 0 | - | ## | chr1 | 202450161 | 202450186 | U0 | 0 | - | ## | chr1 | 156338310 | 156338335 | U0 | 0 | - | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 4,950 rows and 6 columns from 24 chromosomes. to_bigwig also takes a flag divide_by which takes another PyRanges. Using divide_by creates a log2-normalized bigwig. "],
["subsetting-pyranges.html", "4 Subsetting PyRanges", " 4 Subsetting PyRanges There are many ways to subset a PyRanges object. Each returns a new PyRanges object and does not change the old one. For data exploration, the functions head, tail and sample (random choice without replacment) are convenient. They take an argument n to denote how many entries you want. import pyranges as pr gr = pr.data.chipseq() print(gr.sample()) ## +--------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------| ## | chr1 | 144185630 | 144185655 | U0 | 0 | + | ## | chr3 | 50184514 | 50184539 | U0 | 0 | - | ## | chr4 | 57816677 | 57816702 | U0 | 0 | + | ## | chr9 | 35427776 | 35427801 | U0 | 0 | - | ## | chr12 | 108768075 | 108768100 | U0 | 0 | + | ## | chr12 | 130029920 | 130029945 | U0 | 0 | + | ## | chr13 | 19809701 | 19809726 | U0 | 0 | - | ## | chr16 | 28893339 | 28893364 | U0 | 0 | + | ## +--------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 8 rows and 6 columns from 7 chromosomes. print(gr.tail(4)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 4 rows and 6 columns from 1 chromosomes. By subsetting with a list you can select one or more columns: import pyranges as pr gr = pr.data.chipseq() print(gr) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. print(gr[[&quot;Name&quot;]]) ## +--------------+-----------+-----------+------------+--------------+ ## | Chromosome | Start | End | Name | Strand | ## | (category) | (int32) | (int32) | (object) | (category) | ## |--------------+-----------+-----------+------------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | + | ## | chr1 | 169887529 | 169887554 | U0 | + | ## | chr1 | 216711011 | 216711036 | U0 | + | ## | chr1 | 144227079 | 144227104 | U0 | + | ## | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | - | ## | chrY | 13517892 | 13517917 | U0 | - | ## | chrY | 8010951 | 8010976 | U0 | - | ## | chrY | 7405376 | 7405401 | U0 | - | ## +--------------+-----------+-----------+------------+--------------+ ## Stranded PyRanges object has 10,000 rows and 5 columns from 24 chromosomes. By subsetting using a boolean vector, you can get specific rows: import pyranges as pr cpg = pr.data.cpg() print(cpg[cpg.CpG &gt; 50]) ## +--------------+-----------+-----------+-----------+ ## | Chromosome | Start | End | CpG | ## | (category) | (int32) | (int32) | (int64) | ## |--------------+-----------+-----------+-----------| ## | chrX | 64181 | 64793 | 62 | ## | chrX | 69133 | 70029 | 100 | ## | chrX | 148685 | 149461 | 85 | ## | chrX | 166504 | 167721 | 96 | ## | ... | ... | ... | ... | ## | chrY | 21154603 | 21155040 | 61 | ## | chrY | 21238448 | 21240005 | 133 | ## | chrY | 26351343 | 26352316 | 76 | ## | chrY | 27610115 | 27611088 | 76 | ## +--------------+-----------+-----------+-----------+ ## Unstranded PyRanges object has 530 rows and 4 columns from 2 chromosomes. By using strings, tuples and slices, you can subset the PyRanges based on position: Chromosome only print(gr[&quot;chrX&quot;]) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chrX | 13843759 | 13843784 | U0 | 0 | + | ## | chrX | 114673546 | 114673571 | U0 | 0 | + | ## | chrX | 131816774 | 131816799 | U0 | 0 | + | ## | chrX | 45504745 | 45504770 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrX | 146694149 | 146694174 | U0 | 0 | - | ## | chrX | 5044527 | 5044552 | U0 | 0 | - | ## | chrX | 15281263 | 15281288 | U0 | 0 | - | ## | chrX | 120273723 | 120273748 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 282 rows and 6 columns from 1 chromosomes. Chromosome and Strand print(gr[&quot;chrX&quot;, &quot;-&quot;]) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chrX | 41852946 | 41852971 | U0 | 0 | - | ## | chrX | 69979838 | 69979863 | U0 | 0 | - | ## | chrX | 34824145 | 34824170 | U0 | 0 | - | ## | chrX | 132354117 | 132354142 | U0 | 0 | - | ## | ... | ... | ... | ... | ... | ... | ## | chrX | 146694149 | 146694174 | U0 | 0 | - | ## | chrX | 5044527 | 5044552 | U0 | 0 | - | ## | chrX | 15281263 | 15281288 | U0 | 0 | - | ## | chrX | 120273723 | 120273748 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 151 rows and 6 columns from 1 chromosomes. Chromosome and Slice print(gr[&quot;chrX&quot;, 150000000:160000000]) ## +--------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------| ## | chrX | 151324943 | 151324968 | U0 | 0 | + | ## | chrX | 152902449 | 152902474 | U0 | 0 | + | ## | chrX | 153632850 | 153632875 | U0 | 0 | + | ## | chrX | 153874106 | 153874131 | U0 | 0 | + | ## | chrX | 150277236 | 150277261 | U0 | 0 | - | ## | chrX | 151277790 | 151277815 | U0 | 0 | - | ## | chrX | 153037423 | 153037448 | U0 | 0 | - | ## | chrX | 153255924 | 153255949 | U0 | 0 | - | ## +--------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 8 rows and 6 columns from 1 chromosomes. Chromosome, Strand and Slice print(gr[&quot;chrX&quot;, &quot;-&quot;, 150000000:160000000]) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chrX | 150277236 | 150277261 | U0 | 0 | - | ## | chrX | 151277790 | 151277815 | U0 | 0 | - | ## | chrX | 153037423 | 153037448 | U0 | 0 | - | ## | chrX | 153255924 | 153255949 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 4 rows and 6 columns from 1 chromosomes. Slice Only using slices returns all ranges from all chromosomes and strands within those coordinates. print(gr[0:100000]) ## +--------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------| ## | chr2 | 33241 | 33266 | U0 | 0 | + | ## | chr2 | 13611 | 13636 | U0 | 0 | - | ## | chr2 | 32620 | 32645 | U0 | 0 | - | ## | chr3 | 87179 | 87204 | U0 | 0 | + | ## | chr4 | 45413 | 45438 | U0 | 0 | - | ## +--------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 5 rows and 6 columns from 3 chromosomes. Note that while the slice-operator is fast and returns seemingly immediately, it is inefficient; it builds the interval overlap datastructure anew every query. So if you have multiple queries you should build another PyRanges and do an intersect-operation. Strand print(gr[&quot;+&quot;]) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 21559181 | 21559206 | U0 | 0 | + | ## | chrY | 11942770 | 11942795 | U0 | 0 | + | ## | chrY | 8316773 | 8316798 | U0 | 0 | + | ## | chrY | 7463444 | 7463469 | U0 | 0 | + | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 5,050 rows and 6 columns from 24 chromosomes. Slice and Strand print(gr[&quot;+&quot;, 0:100000]) ## +--------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------| ## | chr2 | 33241 | 33266 | U0 | 0 | + | ## | chr3 | 87179 | 87204 | U0 | 0 | + | ## +--------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 2 rows and 6 columns from 2 chromosomes. "],
["manipulating-the-data-in-pyranges.html", "5 Manipulating the data in PyRanges", " 5 Manipulating the data in PyRanges PyRanges is a thin wrapper around genomic data contained in pandas dataframes. This dataframe is accessible with the df attribute of the PyRanges object. import pyranges as pr gr = pr.data.chipseq() print(gr) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. print(gr.df.head(5)) ## Chromosome Start End Name Score Strand ## 18 chr1 212609534 212609559 U0 0 + ## 70 chr1 169887529 169887554 U0 0 + ## 129 chr1 216711011 216711036 U0 0 + ## 170 chr1 144227079 144227104 U0 0 + ## 196 chr1 148177825 148177850 U0 0 + To access a column of this dataframe, you can ask for the name directly from the PyRanges object. print(gr.Start.head()) ## 18 212609534 ## 70 169887529 ## 129 216711011 ## 170 144227079 ## 196 148177825 ## Name: Start, dtype: int32 You can directly insert a column by setting the attribute on the PyRanges object: gr.stupid_example = &quot;Hi There!&quot; print(gr) ## +--------------+-----------+-----------+------------+-----------+--------------+------------------+ ## | Chromosome | Start | End | Name | Score | Strand | stupid_example | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (object) | ## |--------------+-----------+-----------+------------+-----------+--------------+------------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | Hi There! | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | Hi There! | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | Hi There! | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | Hi There! | ## | ... | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | Hi There! | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | Hi There! | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | Hi There! | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | Hi There! | ## +--------------+-----------+-----------+------------+-----------+--------------+------------------+ ## Stranded PyRanges object has 10,000 rows and 7 columns from 24 chromosomes. gr = gr.drop(&quot;stupid_example&quot;) print(gr) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. And as you can see, you can drop columns from the PyRanges using drop. Using drop by itself removes all metadata-columns. To rename the columns you can use the set_columns() method. If you want to remove duplicates based on position, you can use drop_duplicate_positions: print(gr.drop_duplicate_positions(strand=False)) # defaults to True ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 9,924 rows and 6 columns from 24 chromosomes. All columns, including Chromosome, Start, End and Strand can be changed in any way you please and more metadata-columns can be added by setting it on the PyRanges object. import pandas as pd gr.Name = gr.Chromosome.astype(str) + &quot;_&quot; + pd.Series(range(len(gr)), index=gr.Chromosome.index).astype(str) print(gr) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | chr1_0 | 0 | + | ## | chr1 | 169887529 | 169887554 | chr1_1 | 0 | + | ## | chr1 | 216711011 | 216711036 | chr1_2 | 0 | + | ## | chr1 | 144227079 | 144227104 | chr1_3 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | chrY_9996 | 0 | - | ## | chrY | 13517892 | 13517917 | chrY_9997 | 0 | - | ## | chrY | 8010951 | 8010976 | chrY_9998 | 0 | - | ## | chrY | 7405376 | 7405401 | chrY_9999 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. gr.Strand = &quot;.&quot; print(gr) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | chr1_0 | 0 | . | ## | chr1 | 169887529 | 169887554 | chr1_1 | 0 | . | ## | chr1 | 216711011 | 216711036 | chr1_2 | 0 | . | ## | chr1 | 144227079 | 144227104 | chr1_3 | 0 | . | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | chrY_9996 | 0 | . | ## | chrY | 13517892 | 13517917 | chrY_9997 | 0 | . | ## | chrY | 8010951 | 8010976 | chrY_9998 | 0 | . | ## | chrY | 7405376 | 7405401 | chrY_9999 | 0 | . | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Unstranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. ## (Considered unstranded due to the values . being present in the Strand column.) "],
["concatenating-pyranges.html", "6 Concatenating PyRanges", " 6 Concatenating PyRanges A list of PyRanges can be concatenated by using the concat function: import pyranges as pr import pandas as pd gr1 = pr.data.f1() gr2 = pr.data.f2() print(gr1) ## +--------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 3 rows and 6 columns from 1 chromosomes. print(gr2) ## +--------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------| ## | chr1 | 1 | 2 | a | 0 | + | ## | chr1 | 6 | 7 | b | 0 | - | ## +--------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 2 rows and 6 columns from 1 chromosomes. concatted = pr.concat([gr1, gr2, gr1]) print(concatted) ## +--------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 1 | 2 | a | 0 | + | ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## | chr1 | 6 | 7 | b | 0 | - | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 8 rows and 6 columns from 1 chromosomes. "],
["piping-pyranges.html", "7 Piping PyRanges", " 7 Piping PyRanges The PyRanges API supports chaining operations out of the box. To set a new column in a PyRanges you would use the assign method and for subsetting you would use the subset method. import pyranges as pr import pandas as pd exons = pr.data.exons() cpg = pr.data.cpg() cpg.join(exons.unstrand()).subset(lambda df: df.CpG &gt; 25)[[&quot;CpG&quot;]].assign(&quot;CpGDecile&quot;, lambda df: df.CpG % 10)[&quot;chrX&quot;].slack(500) ## +--------------+-----------+-----------+-----------+-------------+ ## | Chromosome | Start | End | CpG | CpGDecile | ## | (category) | (int32) | (int32) | (int64) | (int64) | ## |--------------+-----------+-----------+-----------+-------------| ## | chrX | 584063 | 585826 | 66 | 6 | ## | chrX | 1510001 | 1512338 | 173 | 3 | ## | chrX | 2845695 | 2848011 | 92 | 2 | ## | chrX | 10093550 | 10094906 | 26 | 6 | ## | ... | ... | ... | ... | ... | ## | chrX | 153068287 | 153070853 | 134 | 4 | ## | chrX | 153284185 | 153286155 | 94 | 4 | ## | chrX | 153598374 | 153601104 | 164 | 4 | ## | chrX | 153990340 | 153992331 | 105 | 5 | ## +--------------+-----------+-----------+-----------+-------------+ ## Unstranded PyRanges object has 61 rows and 5 columns from 1 chromosomes. "],
["printing-pyranges.html", "8 Printing PyRanges", " 8 Printing PyRanges There are 10 helper methods for printing PyRanges. These are p (regular print), mp (merged position print), sp (sorted print), msp (merged position sorted print) and rp (raw print). Merged means that the information about Chromosome, Start, End and Strand (if applicable) are merged into one column for printing. Sorted means that the output is sorted on position and Strand. Regular print shows the + strand first and - strand second, so if you want to display interleaved intervals from both strands, sorted print is the way to do it. Raw print (rp) just prints the underlying dict of dataframes. All print methods except rp take an n-argument to control how many entries should be displayed. The pc, mpc, spc, mspc and rpc also return the pyranges so that print methods can be used to display intermediate results in pipes. import pyranges as pr exons = pr.data.exons() exons.pc(n=2).mpc(n=8).sp() ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+----------------------------------------+-----------+--------------| ## | chrX | 135721701 | 135721963 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15467254 | 15467278 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## Stranded PyRanges object has 1,000 rows and 6 columns from 2 chromosomes. ## +----------------------------+----------------------------------------+-----------+ ## | -Position- | Name | Score | ## | (Multiple types) | (object) | (int64) | ## |----------------------------+----------------------------------------+-----------| ## | chrX 135721701-135721963 + | NR_038462_exon_0_0_chrX_135721702_f | 0 | ## | chrX 135574120-135574598 + | NM_001727_exon_2_0_chrX_135574121_f | 0 | ## | chrX 47868945-47869126 + | NM_205856_exon_4_0_chrX_47868946_f | 0 | ## | chrX 77294333-77294480 + | NM_000052_exon_17_0_chrX_77294334_f | 0 | ## | ... ...-... ... | ... | ... | ## | chrY 15409586-15409728 - | NR_047633_exon_3_0_chrY_15409587_r | 0 | ## | chrY 15478146-15478273 - | NR_047634_exon_18_0_chrY_15478147_r | 0 | ## | chrY 15360258-15361762 - | NR_047601_exon_0_0_chrY_15360259_r | 0 | ## | chrY 15467254-15467278 - | NM_001258270_exon_13_0_chrY_15467255_r | 0 | ## +----------------------------+----------------------------------------+-----------+ ## Stranded PyRanges object has 1,000 rows and 6 columns from 2 chromosomes. ## +--------------+-----------+-----------+---------------------------------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+---------------------------------------+-----------+--------------| ## | chrX | 585078 | 585337 | NM_000451_exon_0_0_chrX_585079_f | 0 | + | ## | chrX | 1393647 | 1393735 | NM_172249_exon_1_0_chrX_1393648_f | 0 | + | ## | chrX | 1393647 | 1393735 | NM_006140_exon_1_0_chrX_1393648_f | 0 | + | ## | chrX | 1404670 | 1404813 | NM_172245_exon_3_0_chrX_1404671_f | 0 | + | ## | chrX | 1407411 | 1407535 | NM_172249_exon_4_0_chrX_1407412_f | 0 | + | ## | chrX | 1407651 | 1407781 | NM_001161532_exon_3_0_chrX_1407652_f | 0 | + | ## | chrX | 1414319 | 1414349 | NM_172245_exon_8_0_chrX_1414320_f | 0 | + | ## | chrX | 1419383 | 1419519 | NM_001161531_exon_9_0_chrX_1419384_f | 0 | + | ## | chrX | 1424338 | 1424420 | NM_006140_exon_11_0_chrX_1424339_f | 0 | + | ## | chrX | 1424338 | 1424420 | NM_001161530_exon_10_0_chrX_1424339_f | 0 | + | ## | chrX | 1475113 | 1475229 | NM_001267713_exon_4_0_chrX_1475114_f | 0 | + | ## | chrX | 1510791 | 1511039 | NM_001636_exon_3_0_chrX_1510792_r | 0 | - | ## | chrX | 1553914 | 1553976 | NM_004192_exon_8_0_chrX_1553915_r | 0 | - | ## | chrX | 1554586 | 1554651 | NM_001173473_exon_9_0_chrX_1554587_r | 0 | - | ## | chrX | 1734025 | 1734161 | NM_004043_exon_1_0_chrX_1734026_f | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 25336491 | 25336631 | NM_004081_exon_22_0_chrY_25336492_r | 0 | - | ## | chrY | 26778138 | 26778263 | NM_001002761_exon_6_0_chrY_26778139_f | 0 | + | ## | chrY | 26952215 | 26952307 | NM_020364_exon_16_0_chrY_26952216_r | 0 | - | ## | chrY | 26979966 | 26980276 | NM_001005375_exon_0_0_chrY_26979967_f | 0 | + | ## | chrY | 26998146 | 26998238 | NM_020364_exon_2_0_chrY_26998147_f | 0 | + | ## | chrY | 26998798 | 26998850 | NM_001005785_exon_3_0_chrY_26998799_f | 0 | + | ## | chrY | 26999286 | 26999350 | NM_001005375_exon_9_0_chrY_26999287_f | 0 | + | ## | chrY | 27003422 | 27003494 | NM_001005786_exon_7_0_chrY_27003423_f | 0 | + | ## | chrY | 27041834 | 27041906 | NM_020420_exon_13_0_chrY_27041835_f | 0 | + | ## | chrY | 27197822 | 27197945 | NM_004678_exon_7_0_chrY_27197823_r | 0 | - | ## | chrY | 27197822 | 27197945 | NM_001002760_exon_7_0_chrY_27197823_r | 0 | - | ## | chrY | 27606238 | 27606322 | NR_002195_exon_8_0_chrY_27606239_f | 0 | + | ## | chrY | 27606238 | 27606322 | NR_001555_exon_8_0_chrY_27606239_f | 0 | + | ## | chrY | 59222126 | 59222216 | NR_033715_exon_1_0_chrY_59222127_f | 0 | + | ## | chrY | 59233166 | 59233257 | NR_033715_exon_4_0_chrY_59233167_f | 0 | + | ## +--------------+-----------+-----------+---------------------------------------+-----------+--------------+ ## Stranded PyRanges object has 1,000 rows and 6 columns from 2 chromosomes. f1 = pr.data.f1() f1.rp() ## {(&#39;chr1&#39;, &#39;+&#39;): Chromosome Start End Name Score Strand ## 0 chr1 3 6 interval1 0 + ## 2 chr1 8 9 interval3 0 +, (&#39;chr1&#39;, &#39;-&#39;): Chromosome Start End Name Score Strand ## 1 chr1 5 7 interval2 0 -} "],
["iterating-over-pyranges.html", "9 Iterating over PyRanges", " 9 Iterating over PyRanges PyRanges can be iterated over by a simple for loop, and the data is guaranteed to come back in natsorted order: import pyranges as pr import pandas as pd exons = pr.data.exons() cpg = pr.data.cpg() for k, df in cpg: print(k) print(df.head(3)) ## chrX ## Chromosome Start End CpG ## 0 chrX 64181 64793 62 ## 1 chrX 69133 70029 100 ## 2 chrX 148685 149461 85 ## chrY ## Chromosome Start End CpG ## 896 chrY 14181 14793 62 ## 897 chrY 19133 20029 100 ## 898 chrY 98685 99461 85 If the data is unstranded, the key is just the chromosome names, but if the data is stranded the key is a tuple of the chromosome and strand: for k, df in exons: print(k) print(df.head(3)) ## (&#39;chrX&#39;, &#39;+&#39;) ## Chromosome Start End Name Score Strand ## 0 chrX 135721701 135721963 NR_038462_exon_0_0_chrX_135721702_f 0 + ## 2 chrX 135574120 135574598 NM_001727_exon_2_0_chrX_135574121_f 0 + ## 3 chrX 47868945 47869126 NM_205856_exon_4_0_chrX_47868946_f 0 + ## (&#39;chrX&#39;, &#39;-&#39;) ## Chromosome Start End Name Score Strand ## 1 chrX 49069126 49069255 NM_001256790_exon_15_0_chrX_49069127_r 0 - ## 4 chrX 154006958 154007628 NM_001166460_exon_0_0_chrX_154006959_r 0 - ## 6 chrX 52257919 52258046 NM_001097593_exon_1_0_chrX_52257920_r 0 - ## (&#39;chrY&#39;, &#39;+&#39;) ## Chromosome Start End Name Score Strand ## 14 chrY 1693161 1693291 NM_001171039_exon_2_0_chrY_1693162_f 0 + ## 82 chrY 1357411 1357535 NM_001161531_exon_4_0_chrY_1357412_f 0 + ## 98 chrY 59233166 59233257 NR_033715_exon_4_0_chrY_59233167_f 0 + ## (&#39;chrY&#39;, &#39;-&#39;) ## Chromosome Start End Name Score Strand ## 5 chrY 1481624 1481747 NM_004192_exon_1_0_chrY_1481625_r 0 - ## 8 chrY 15526614 15526673 NR_047607_exon_25_0_chrY_15526615_r 0 - ## 9 chrY 15591393 15592550 NR_047610_exon_27_0_chrY_15591394_r 0 - If you would like to iterate over the chromosomes in a stranded PyRange the idiom is for c in exons.chromosomes: print(c) df = exons[c].df print(df.head()) ## chrX ## Chromosome Start End Name Score Strand ## 0 chrX 135721701 135721963 NR_038462_exon_0_0_chrX_135721702_f 0 + ## 2 chrX 135574120 135574598 NM_001727_exon_2_0_chrX_135574121_f 0 + ## 3 chrX 47868945 47869126 NM_205856_exon_4_0_chrX_47868946_f 0 + ## 7 chrX 77294333 77294480 NM_000052_exon_17_0_chrX_77294334_f 0 + ## 11 chrX 91090459 91091043 NM_001168360_exon_0_0_chrX_91090460_f 0 + ## chrY ## Chromosome Start End Name Score Strand ## 14 chrY 1693161 1693291 NM_001171039_exon_2_0_chrY_1693162_f 0 + ## 82 chrY 1357411 1357535 NM_001161531_exon_4_0_chrY_1357412_f 0 + ## 98 chrY 59233166 59233257 NR_033715_exon_4_0_chrY_59233167_f 0 + ## 99 chrY 1693161 1693291 NM_001171038_exon_2_0_chrY_1693162_f 0 + ## 199 chrY 1664276 1664425 NM_005088_exon_2_0_chrY_1664277_f 0 + but notice that we need the .df accessor, because subsetting a PyRange always returns a PyRange. There are three more ways to iterate over a pyrange, namely the keys, values and items methods. These return a list, not a custom object like the python dict. If you want to create a new PyRange while iterating over it, the idiom is d = {} for k, df in exons: print(k) d[k] = df.head(3) ## (&#39;chrX&#39;, &#39;+&#39;) ## (&#39;chrX&#39;, &#39;-&#39;) ## (&#39;chrY&#39;, &#39;+&#39;) ## (&#39;chrY&#39;, &#39;-&#39;) new_gr = pr.PyRanges(d) print(new_gr) ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+----------------------------------------+-----------+--------------| ## | chrX | 135721701 | 135721963 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | chrX | 135574120 | 135574598 | NM_001727_exon_2_0_chrX_135574121_f | 0 | + | ## | chrX | 47868945 | 47869126 | NM_205856_exon_4_0_chrX_47868946_f | 0 | + | ## | chrX | 49069126 | 49069255 | NM_001256790_exon_15_0_chrX_49069127_r | 0 | - | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15591393 | 15592550 | NR_047610_exon_27_0_chrY_15591394_r | 0 | - | ## | chrY | 1693161 | 1693291 | NM_001171039_exon_2_0_chrY_1693162_f | 0 | + | ## | chrY | 1357411 | 1357535 | NM_001161531_exon_4_0_chrY_1357412_f | 0 | + | ## | chrY | 59233166 | 59233257 | NR_033715_exon_4_0_chrY_59233167_f | 0 | + | ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## Stranded PyRanges object has 12 rows and 6 columns from 2 chromosomes. Note that this is basically the same as using the apply method of the PyRange, only that the for loops are never multithreaded. To iterate over multiple pyranges you can use pr.itergrs. It iterates over multiple pyranges at the same time, returning the dfs belonging to the same Chromosome or Chromosome/Strand at each iteration. Missing entries in one or more PyRanges returns empty dfs. import pyranges as pr cpg = pr.data.cpg() cpg.Strand = &quot;+&quot; # ensure that cpg only has one strand exons = pr.data.exons() for cdf, edf in pr.itergrs([cpg, exons]): print(&quot;-----&quot; * 5) print(cdf.head(1), edf.head(1)) ## ------------------------- ## Chromosome Start End CpG Strand ## 896 chrY 14181 14793 62 + Chromosome Start End Name Score Strand ## 14 chrY 1693161 1693291 NM_001171039_exon_2_0_chrY_1693162_f 0 + ## ------------------------- ## Chromosome Start End CpG Strand ## 0 chrX 64181 64793 62 + Chromosome Start End Name Score Strand ## 0 chrX 135721701 135721963 NR_038462_exon_0_0_chrX_135721702_f 0 + ## ------------------------- ## Empty DataFrame ## Columns: [Chromosome, Start, End, CpG, Strand] ## Index: [] Chromosome Start End Name Score Strand ## 1 chrX 49069126 49069255 NM_001256790_exon_15_0_chrX_49069127_r 0 - ## ------------------------- ## Empty DataFrame ## Columns: [Chromosome, Start, End, CpG, Strand] ## Index: [] Chromosome Start End Name Score Strand ## 5 chrY 1481624 1481747 NM_004192_exon_1_0_chrY_1481625_r 0 - "],
["sorting-pyranges.html", "10 Sorting PyRanges", " 10 Sorting PyRanges pyranges are always sorted on chromosome and strand to enable faster operations. pyranges can in addition be sorted on start and end by using the function sort: import pyranges as pr import pandas as pd from io import StringIO cs = pr.data.chipseq() print(cs) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. cs_sorted = cs.sort() print(cs) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. This will sort them on Chromosome, Strand, Start and then End. Custom sorting can be done after you are done with the PyRanges-related functionality. Then you can extract the underlying dataframes with df and sort it: df = cs_sorted.df print(df.head()) ## Chromosome Start End Name Score Strand ## 0 chr1 1541598 1541623 U0 0 + ## 1 chr1 1599121 1599146 U0 0 + ## 2 chr1 3504032 3504057 U0 0 + ## 3 chr1 3806532 3806557 U0 0 + ## 4 chr1 5079955 5079980 U0 0 + df_sorted = df.sort_values([&quot;Chromosome&quot;, &quot;Start&quot;, &quot;End&quot;]) print(df_sorted.head(20)) ## Chromosome Start End Name Score Strand ## 0 chr1 1325303 1325328 U0 0 - ## 0 chr1 1541598 1541623 U0 0 + ## 1 chr1 1599121 1599146 U0 0 + ## 1 chr1 1820285 1820310 U0 0 - ## 2 chr1 2448322 2448347 U0 0 - ## 3 chr1 3046141 3046166 U0 0 - ## 4 chr1 3437168 3437193 U0 0 - ## 2 chr1 3504032 3504057 U0 0 + ## 5 chr1 3637087 3637112 U0 0 - ## 6 chr1 3681903 3681928 U0 0 - ## 3 chr1 3806532 3806557 U0 0 + ## 7 chr1 3953790 3953815 U0 0 - ## 8 chr1 5037292 5037317 U0 0 - ## 4 chr1 5079955 5079980 U0 0 + ## 5 chr1 5233543 5233568 U0 0 + ## 6 chr1 5301327 5301352 U0 0 + ## 7 chr1 5431308 5431333 U0 0 + ## 8 chr1 5449222 5449247 U0 0 + ## 9 chr1 5481750 5481775 U0 0 - ## 10 chr1 5699351 5699376 U0 0 - Now the df is sorted and start and end with interleaved strands. "],
["summarizing-pyranges.html", "11 Summarizing PyRanges", " 11 Summarizing PyRanges The summary-function gives a summary of the lengths of the intervals in a PyRange: import pyranges as pr import pandas as pd from io import StringIO gr = pr.data.exons() print(gr) ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+----------------------------------------+-----------+--------------| ## | chrX | 135721701 | 135721963 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | chrX | 135574120 | 135574598 | NM_001727_exon_2_0_chrX_135574121_f | 0 | + | ## | chrX | 47868945 | 47869126 | NM_205856_exon_4_0_chrX_47868946_f | 0 | + | ## | chrX | 77294333 | 77294480 | NM_000052_exon_17_0_chrX_77294334_f | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15409586 | 15409728 | NR_047633_exon_3_0_chrY_15409587_r | 0 | - | ## | chrY | 15478146 | 15478273 | NR_047634_exon_18_0_chrY_15478147_r | 0 | - | ## | chrY | 15360258 | 15361762 | NR_047601_exon_0_0_chrY_15360259_r | 0 | - | ## | chrY | 15467254 | 15467278 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## Stranded PyRanges object has 1,000 rows and 6 columns from 2 chromosomes. print(gr.summary()) ## +-------+-----------+---------------------+-----------------------+ ## | | pyrange | coverage_stranded | coverage_unstranded | ## |-------+-----------+---------------------+-----------------------| ## | count | 1000 | 873 | 873 | ## | mean | 304.292 | 314.255 | 314.255 | ## | std | 640.013 | 666.23 | 666.23 | ## | min | 4 | 4 | 4 | ## | 25% | 88 | 88 | 88 | ## | 50% | 127 | 127 | 127 | ## | 75% | 195.5 | 199 | 199 | ## | max | 6063 | 6063 | 6063 | ## +-------+-----------+---------------------+-----------------------+ ## None The column coverage_stranded tells you how the data looks when merging all overlapping features (taking strand into account), and coverage_unstranded is the same, but all features are merged independent of their strand. "],
["methods-for-manipulating-single-pyranges.html", "12 Methods for manipulating single PyRanges", " 12 Methods for manipulating single PyRanges There are several methods for manipulating the contents of a PyRanges. merge creates a union of all the intervals in the ranges: The merge-method also takes the flag count to let you know the number of intervals that were merged. import pyranges as pr f1 = pr.data.f1() print(f1.merge(count=True)) ## +--------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Strand | Count | ## | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------| ## | chr1 | 3 | 6 | + | 1 | ## | chr1 | 8 | 9 | + | 1 | ## | chr1 | 5 | 7 | - | 1 | ## +--------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 3 rows and 5 columns from 1 chromosomes. Cluster finds which intervals overlap, but gives each interval a cluster ID instead of merging them: import pyranges as pr f1 = pr.data.f1() print(f1.cluster()) ## +--------------+------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Cluster | ## | (object) | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------+------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | 1 | ## | chr1 | 8 | 9 | interval3 | 0 | + | 2 | ## | chr1 | 5 | 7 | interval2 | 0 | - | 3 | ## +--------------+------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 3 rows and 7 columns from 1 chromosomes. print(f1.cluster(strand=True)) ## +--------------+------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Cluster | ## | (object) | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------+------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | 1 | ## | chr1 | 8 | 9 | interval3 | 0 | + | 2 | ## | chr1 | 5 | 7 | interval2 | 0 | - | 3 | ## +--------------+------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 3 rows and 7 columns from 1 chromosomes. print(f1.cluster(slack=2, strand=True)) ## +--------------+------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Cluster | ## | (object) | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------+------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | 1 | ## | chr1 | 8 | 9 | interval3 | 0 | + | 1 | ## | chr1 | 5 | 7 | interval2 | 0 | - | 2 | ## +--------------+------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 3 rows and 7 columns from 1 chromosomes. Both cluster and merge take the argument slack, so that you can merge features which are not directly overlapping. To cluster or merge only those rows which have the same values for a certain column, you can use the argument by to cluster and merge. import pyranges as pr gr = pr.data.ensembl_gtf() print(gr) ## +--------------+------------+--------------+-----------+-----------+------------+--------------+------------+-------------+------------+-----------------+---------------+----------------+------------------------------------+-----------------+-------------+-------+ ## | Chromosome | Source | Feature | Start | End | Score | Strand | Frame | (assigned | ccds_id | exon_id | exon_number | exon_version | gene_biotype | gene_id | gene_name | ... | ## | (category) | (object) | (category) | (int32) | (int32) | (object) | (category) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | ... | ## |--------------+------------+--------------+-----------+-----------+------------+--------------+------------+-------------+------------+-----------------+---------------+----------------+------------------------------------+-----------------+-------------+-------| ## | 1 | havana | gene | 11869 | 14409 | . | + | . | nan | nan | nan | nan | nan | transcribed_unprocessed_pseudogene | ENSG00000223972 | DDX11L1 | ... | ## | 1 | havana | transcript | 11869 | 14409 | . | + | . | nan | nan | nan | nan | nan | transcribed_unprocessed_pseudogene | ENSG00000223972 | DDX11L1 | ... | ## | 1 | havana | exon | 11869 | 12227 | . | + | . | nan | nan | ENSE00002234944 | 1 | 1 | transcribed_unprocessed_pseudogene | ENSG00000223972 | DDX11L1 | ... | ## | 1 | havana | exon | 12613 | 12721 | . | + | . | nan | nan | ENSE00003582793 | 2 | 1 | transcribed_unprocessed_pseudogene | ENSG00000223972 | DDX11L1 | ... | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | 1 | havana | gene | 1173056 | 1179555 | . | - | . | nan | nan | nan | nan | nan | lncRNA | ENSG00000205231 | TTLL10-AS1 | ... | ## | 1 | havana | transcript | 1173056 | 1179555 | . | - | . | nan | nan | nan | nan | nan | lncRNA | ENSG00000205231 | TTLL10-AS1 | ... | ## | 1 | havana | exon | 1179365 | 1179555 | . | - | . | nan | nan | ENSE00001480505 | 1 | 1 | lncRNA | ENSG00000205231 | TTLL10-AS1 | ... | ## | 1 | havana | exon | 1173056 | 1176396 | . | - | . | nan | nan | ENSE00001480504 | 2 | 1 | lncRNA | ENSG00000205231 | TTLL10-AS1 | ... | ## +--------------+------------+--------------+-----------+-----------+------------+--------------+------------+-------------+------------+-----------------+---------------+----------------+------------------------------------+-----------------+-------------+-------+ ## Stranded PyRanges object has 2,446 rows and 28 columns from 1 chromosomes. ## Hidden columns: gene_source, gene_version, previous, protein_id, protein_version, tag, transcript_biotype, transcript_id, transcript_name, transcript_source... (+ 2 more.) print(gr.cluster(by=&quot;gene_id&quot;)) ## +--------------+----------------+----------------+-----------+-----------+------------+--------------+------------+-------------+------------+-----------------+---------------+----------------+----------------+-----------------+-------------+----------------+-------+ ## | Chromosome | Source | Feature | Start | End | Score | Strand | Frame | (assigned | ccds_id | exon_id | exon_number | exon_version | gene_biotype | gene_id | gene_name | gene_source | ... | ## | (category) | (object) | (category) | (int32) | (int32) | (object) | (category) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | ... | ## |--------------+----------------+----------------+-----------+-----------+------------+--------------+------------+-------------+------------+-----------------+---------------+----------------+----------------+-----------------+-------------+----------------+-------| ## | 1 | ensembl_havana | gene | 1173884 | 1197935 | . | + | . | nan | nan | nan | nan | nan | protein_coding | ENSG00000162571 | TTLL10 | ensembl_havana | ... | ## | 1 | havana | transcript | 1173884 | 1175034 | . | + | . | nan | nan | nan | nan | nan | protein_coding | ENSG00000162571 | TTLL10 | ensembl_havana | ... | ## | 1 | havana | exon | 1173884 | 1173926 | . | + | . | nan | nan | ENSE00002036594 | 1 | 1 | protein_coding | ENSG00000162571 | TTLL10 | ensembl_havana | ... | ## | 1 | havana | five_prime_utr | 1173903 | 1173926 | . | + | . | nan | CCDS44036 | nan | nan | nan | protein_coding | ENSG00000162571 | TTLL10 | ensembl_havana | ... | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | 1 | ensembl_havana | stop_codon | 450740 | 450742 | . | - | 0 | to | CCDS72675 | nan | 1 | nan | protein_coding | ENSG00000284733 | OR4F29 | ensembl_havana | ... | ## | 1 | ensembl_havana | CDS | 450743 | 451678 | . | - | 0 | to | CCDS72675 | nan | 1 | nan | protein_coding | ENSG00000284733 | OR4F29 | ensembl_havana | ... | ## | 1 | ensembl_havana | start_codon | 451676 | 451678 | . | - | 0 | to | CCDS72675 | nan | 1 | nan | protein_coding | ENSG00000284733 | OR4F29 | ensembl_havana | ... | ## | 1 | ensembl_havana | five_prime_utr | 451679 | 451697 | . | - | . | to | CCDS72675 | nan | nan | nan | protein_coding | ENSG00000284733 | OR4F29 | ensembl_havana | ... | ## +--------------+----------------+----------------+-----------+-----------+------------+--------------+------------+-------------+------------+-----------------+---------------+----------------+----------------+-----------------+-------------+----------------+-------+ ## Stranded PyRanges object has 2,446 rows and 29 columns from 1 chromosomes. ## Hidden columns: gene_version, previous, protein_id, protein_version, tag, transcript_biotype, transcript_id, transcript_name, transcript_source, transcript_support_level... (+ 2 more.) five_end finds the starts of the regions (taking direction of transcription into account). f1.five_end() ## +--------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------| ## | chr1 | 3 | 4 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 7 | 8 | interval2 | 0 | - | ## +--------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 3 rows and 6 columns from 1 chromosomes. print(f1.five_end(slack=5)) ## +--------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------| ## | chr1 | 0 | 9 | interval1 | 0 | + | ## | chr1 | 3 | 14 | interval3 | 0 | + | ## | chr1 | 2 | 13 | interval2 | 0 | - | ## +--------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 3 rows and 6 columns from 1 chromosomes. three_end finds the ends of the regions (taking direction of transcription into account). f1.three_end() ## +--------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------| ## | chr1 | 6 | 7 | interval1 | 0 | + | ## | chr1 | 9 | 10 | interval3 | 0 | + | ## | chr1 | 7 | 8 | interval2 | 0 | - | ## +--------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 3 rows and 6 columns from 1 chromosomes. print(f1.three_end(slack=5)) ## +--------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------| ## | chr1 | 1 | 12 | interval1 | 0 | + | ## | chr1 | 4 | 15 | interval3 | 0 | + | ## | chr1 | 2 | 13 | interval2 | 0 | - | ## +--------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 3 rows and 6 columns from 1 chromosomes. slack extends the starts and ends of your interval. print(f1.slack(5)) ## +--------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------| ## | chr1 | 0 | 11 | interval1 | 0 | + | ## | chr1 | 3 | 14 | interval3 | 0 | + | ## | chr1 | 0 | 12 | interval2 | 0 | - | ## +--------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 3 rows and 6 columns from 1 chromosomes. window splits your data into windows: exons = pr.data.exons() print(exons) ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+----------------------------------------+-----------+--------------| ## | chrX | 135721701 | 135721963 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | chrX | 135574120 | 135574598 | NM_001727_exon_2_0_chrX_135574121_f | 0 | + | ## | chrX | 47868945 | 47869126 | NM_205856_exon_4_0_chrX_47868946_f | 0 | + | ## | chrX | 77294333 | 77294480 | NM_000052_exon_17_0_chrX_77294334_f | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15409586 | 15409728 | NR_047633_exon_3_0_chrY_15409587_r | 0 | - | ## | chrY | 15478146 | 15478273 | NR_047634_exon_18_0_chrY_15478147_r | 0 | - | ## | chrY | 15360258 | 15361762 | NR_047601_exon_0_0_chrY_15360259_r | 0 | - | ## | chrY | 15467254 | 15467278 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## Stranded PyRanges object has 1,000 rows and 6 columns from 2 chromosomes. print(exons.window(5)) ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+----------------------------------------+-----------+--------------| ## | chrX | 135721701 | 135721706 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | chrX | 135721706 | 135721711 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | chrX | 135721711 | 135721716 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | chrX | 135721716 | 135721721 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15467254 | 15467259 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## | chrY | 15467259 | 15467264 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## | chrY | 15467264 | 15467269 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## | chrY | 15467269 | 15467274 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## Stranded PyRanges object has 60,449 rows and 6 columns from 2 chromosomes. If you want to all windows to start at a multiple of window_size, use the tile function: print(exons.tile(5)) ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+----------------------------------------+-----------+--------------| ## | chrX | 135721700 | 135721705 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | chrX | 135721705 | 135721710 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | chrX | 135721710 | 135721715 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | chrX | 135721715 | 135721720 | NR_038462_exon_0_0_chrX_135721702_f | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15467260 | 15467265 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## | chrY | 15467265 | 15467270 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## | chrY | 15467270 | 15467275 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## | chrY | 15467275 | 15467280 | NM_001258270_exon_13_0_chrY_15467255_r | 0 | - | ## +--------------+-----------+-----------+----------------------------------------+-----------+--------------+ ## Stranded PyRanges object has 61,643 rows and 6 columns from 2 chromosomes. "],
["applying-custom-methods-to-pairs-of-pyranges.html", "13 Applying custom methods to pairs of PyRanges", " 13 Applying custom methods to pairs of PyRanges By using the apply, apply_pair or apply_chunks methods, you can run custom methods on the dataframes in your PyRanges. The apply and apply_chunks methods takes a single dataframe, while apply_pair takes a pair of dataframes. import pyranges as pr chipseq = pr.data.chipseq() chipseq_background = pr.data.chipseq_background() def print_strands(df1, df2): print(df1.Chromosome.iloc[0], df1.Strand.iloc[0], df2.Strand.iloc[0]) return df1.head(5) result = chipseq.apply_pair(chipseq_background, print_strands, strandedness=&quot;opposite&quot;) ## chr1 + - ## chr1 - + ## chr2 + - ## chr2 - + ## chr3 + - ## chr3 - + ## chr4 + - ## chr4 - + ## chr5 + - ## chr5 - + ## chr6 + - ## chr6 - + ## chr7 + - ## chr7 - + ## chr8 + - ## chr8 - + ## chr9 + - ## chr9 - + ## chr10 + - ## chr10 - + ## chr11 + - ## chr11 - + ## chr12 + - ## chr12 - + ## chr13 + - ## chr13 - + ## chr14 + - ## chr14 - + ## chr15 + - ## chr15 - + ## chr16 + - ## chr16 - + ## chr17 + - ## chr17 - + ## chr18 + - ## chr18 - + ## chr19 + - ## chr19 - + ## chr20 + - ## chr20 - + ## chr21 + - ## chr21 - + ## chr22 + - ## chr22 - + ## chrX + - ## chrX - + ## chrY + - ## chrY - + print(result) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 21751211 | 21751236 | U0 | 0 | - | ## | chrY | 7701983 | 7702008 | U0 | 0 | - | ## | chrY | 21910706 | 21910731 | U0 | 0 | - | ## | chrY | 22054002 | 22054027 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 240 rows and 6 columns from 24 chromosomes. def set_start_to_zero(df): df.Start = 0 return df print(chipseq.apply(set_start_to_zero)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int64) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 0 | 212609559 | U0 | 0 | + | ## | chr1 | 0 | 169887554 | U0 | 0 | + | ## | chr1 | 0 | 216711036 | U0 | 0 | + | ## | chr1 | 0 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 0 | 15224260 | U0 | 0 | - | ## | chrY | 0 | 13517917 | U0 | 0 | - | ## | chrY | 0 | 8010976 | U0 | 0 | - | ## | chrY | 0 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. Keyword arguments can be sent to the function: def _print(df, kwargs): print(&quot;My keyword arguments were:&quot;, kwargs.get(&quot;value&quot;), &quot;and&quot;, kwargs.get(&quot;whatever&quot;)) return df chipseq.apply(_print, value=123, whatever=&quot;hi there!&quot;) ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## My keyword arguments were: 123 and hi there! ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. They were printed 24 times since the function was applied once per chromosome. apply_chunks splits each chromosome into nb_cpu chunks and runs each chunk in parallel, which is useful for slow row-based operations (like fisher exact, for example). "],
["intersecting-ranges.html", "14 Intersecting Ranges", " 14 Intersecting Ranges PyRanges objects can be intersected with other PyRanges to find the subset of the genome that is contained in both. The regular intersect-method finds the intersection of all combinations of ranges: 1 import pyranges as pr gr = pr.data.aorta() gr2 = pr.data.aorta2() print(gr.intersect(gr2)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 9988 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 10073 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 10079 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 10082 | 10138 | H3K27me3 | 7 | + | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 10241 | 10278 | H3K27me3 | 6 | - | ## | chr1 | 10241 | 10281 | H3K27me3 | 6 | - | ## | chr1 | 10241 | 10348 | H3K27me3 | 6 | - | ## | chr1 | 10280 | 10440 | H3K27me3 | 6 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 49 rows and 6 columns from 1 chromosomes. The set_intersect method merges the intervals before finding the intersect: 2 print(gr.set_intersect(gr2)) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (category) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 9988 | 10445 | ## +--------------+-----------+-----------+ ## Unstranded PyRanges object has 1 rows and 3 columns from 1 chromosomes. Both methods also take a strandedness option, which can either be &quot;same&quot;, &quot;opposite&quot; or False/None print(gr.set_intersect(gr2, strandedness=&quot;opposite&quot;)) ## +--------------+------------+------------+------------+ ## | Chromosome | Start | End | Strand | ## | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------| ## | chr1 | 9988 | 10223 | + | ## | chr1 | 10246 | 10348 | + | ## | chr1 | 10073 | 10272 | - | ## | chr1 | 10280 | 10440 | - | ## +--------------+------------+------------+------------+ ## Stranded PyRanges object has 4 rows and 4 columns from 1 chromosomes. The intersect method also takes a how argument, which currently accepts the option &quot;containment&quot;, which requires that the intervals in self be completely within the intervals in other. f1 = pr.data.f1() print(f1) ## +--------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 3 rows and 6 columns from 1 chromosomes. f2 = pr.data.f2() print(f2) ## +--------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------| ## | chr1 | 1 | 2 | a | 0 | + | ## | chr1 | 6 | 7 | b | 0 | - | ## +--------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 2 rows and 6 columns from 1 chromosomes. result = f2.intersect(f1, how=&quot;containment&quot;) print(result) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 6 | 7 | b | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 1 rows and 6 columns from 1 chromosomes. This is the same behavior as bedtools intersect.â© This is the same behavior as Bioconductor GenomicRanges intersect.â© "],
["overlapping-ranges.html", "15 Overlapping Ranges", " 15 Overlapping Ranges PyRanges objects can be overlapped with other PyRanges to report the intervals in self that overlap with those in other. import pyranges as pr gr = pr.data.aorta() gr2 = pr.data.aorta2() print(gr.overlap(gr2)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 49 rows and 6 columns from 1 chromosomes. Both methods also take a strandedness option, which can either be &quot;same&quot;, &quot;opposite&quot; or False/None print(gr.overlap(gr2, strandedness=&quot;opposite&quot;)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 9953 | 10152 | H3K27me3 | 5 | + | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 10127 | 10326 | H3K27me3 | 1 | - | ## | chr1 | 10127 | 10326 | H3K27me3 | 1 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 22 rows and 6 columns from 1 chromosomes. "],
["joining-ranges.html", "16 Joining Ranges", " 16 Joining Ranges You can combine all the intervals that overlap in two PyRanges objects with the join method. If you do not use a suffix, the default _b is chosen. import pyranges as pr gr = pr.data.aorta() gr2 = pr.data.aorta2() print(gr.join(gr2, suffix=&quot;_2&quot;)) ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_2 | End_2 | Name_2 | Score_2 | Strand_2 | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | 9988 | 10187 | Input | 1 | - | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | 10073 | 10272 | Input | 1 | + | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | 10079 | 10278 | Input | 1 | - | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | 10082 | 10281 | Input | 1 | - | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | 10079 | 10278 | Input | 1 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | 10082 | 10281 | Input | 1 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | 10149 | 10348 | Input | 1 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | 10280 | 10479 | Input | 1 | + | ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 49 rows and 11 columns from 1 chromosomes. Both methods also take a strandedness option, which can either be &quot;same&quot;, &quot;opposite&quot; or False/None print(gr.join(gr2, strandedness=&quot;opposite&quot;)) ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_b | End_b | Name_b | Score_b | Strand_b | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | 9988 | 10187 | Input | 1 | - | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | 10079 | 10278 | Input | 1 | - | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | 10082 | 10281 | Input | 1 | - | ## | chr1 | 9953 | 10152 | H3K27me3 | 5 | + | 9988 | 10187 | Input | 1 | - | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | chr1 | 10127 | 10326 | H3K27me3 | 1 | - | 10073 | 10272 | Input | 1 | + | ## | chr1 | 10127 | 10326 | H3K27me3 | 1 | - | 10280 | 10479 | Input | 1 | + | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | 10073 | 10272 | Input | 1 | + | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | 10280 | 10479 | Input | 1 | + | ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 22 rows and 11 columns from 1 chromosomes. The join method also takes a how argument, which currently accepts the option &quot;containment&quot;, which requires that the intervals in self be completely within the intervals in other. f1 = pr.data.f1() f2 = pr.data.f2() print(f2.join(f1, how=&quot;containment&quot;)) ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_b | End_b | Name_b | Score_b | Strand_b | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 6 | 7 | b | 0 | - | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 1 rows and 11 columns from 1 chromosomes. The join method also takes the argument new_pos which can either be unionor Ã¬ntersection. The default suffixes are [&quot;_a&quot;, &quot;_b&quot;], but a suffixes argument overrides this. print(f2.join(f1, new_pos=&quot;intersection&quot;)) ## +--------------+-----------+-----------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Start_a | End_a | Name_a | Score_a | Strand | Start_b | End_b | Name_b | Score_b | Strand_b | ## | (category) | (int32) | (int32) | (int32) | (int32) | (object) | (int64) | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 6 | 7 | 6 | 7 | b | 0 | - | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 1 rows and 13 columns from 1 chromosomes. "],
["finding-the-closest-intervals.html", "17 Finding the closest intervals", " 17 Finding the closest intervals With the nearest-method, you can search for the feature in other that is nearest the ones in self. import pyranges as pr gr = pr.data.chipseq() gr2 = pr.data.chipseq_background() print(gr.nearest(gr2, suffix=&quot;_Input&quot;)) ## +--------------+-----------+-----------+------------+-----------+--------------+---------------+-------------+--------------+---------------+----------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_Input | End_Input | Name_Input | Score_Input | Strand_Input | Distance | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int64) | ## |--------------+-----------+-----------+------------+-----------+--------------+---------------+-------------+--------------+---------------+----------------+------------| ## | chr1 | 226987592 | 226987617 | U0 | 0 | + | 226987603 | 226987628 | U0 | 0 | - | 0 | ## | chr1 | 1541598 | 1541623 | U0 | 0 | + | 1770383 | 1770408 | U0 | 0 | - | 228761 | ## | chr1 | 1599121 | 1599146 | U0 | 0 | + | 1770383 | 1770408 | U0 | 0 | - | 171238 | ## | chr1 | 3504032 | 3504057 | U0 | 0 | + | 3449677 | 3449702 | U0 | 0 | - | 54331 | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | chrY | 21751211 | 21751236 | U0 | 0 | - | 20557165 | 20557190 | U0 | 0 | + | 1194022 | ## | chrY | 21910706 | 21910731 | U0 | 0 | - | 20557165 | 20557190 | U0 | 0 | + | 1353517 | ## | chrY | 22054002 | 22054027 | U0 | 0 | - | 20557165 | 20557190 | U0 | 0 | + | 1496813 | ## | chrY | 22210637 | 22210662 | U0 | 0 | - | 20557165 | 20557190 | U0 | 0 | + | 1653448 | ## +--------------+-----------+-----------+------------+-----------+--------------+---------------+-------------+--------------+---------------+----------------+------------+ ## Stranded PyRanges object has 10,000 rows and 12 columns from 24 chromosomes. The nearest method takes a strandedness option, which can either be &quot;same&quot;, &quot;opposite&quot; or False/None print(gr.nearest(gr2, suffix=&quot;_Input&quot;, strandedness=&quot;opposite&quot;)) ## +--------------+-----------+-----------+------------+-----------+--------------+---------------+-------------+--------------+---------------+----------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_Input | End_Input | Name_Input | Score_Input | Strand_Input | Distance | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int64) | ## |--------------+-----------+-----------+------------+-----------+--------------+---------------+-------------+--------------+---------------+----------------+------------| ## | chr1 | 226987592 | 226987617 | U0 | 0 | + | 226987603 | 226987628 | U0 | 0 | - | 0 | ## | chr1 | 1541598 | 1541623 | U0 | 0 | + | 1770383 | 1770408 | U0 | 0 | - | 228761 | ## | chr1 | 1599121 | 1599146 | U0 | 0 | + | 1770383 | 1770408 | U0 | 0 | - | 171238 | ## | chr1 | 3504032 | 3504057 | U0 | 0 | + | 3449677 | 3449702 | U0 | 0 | - | 54331 | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | chrY | 21751211 | 21751236 | U0 | 0 | - | 20557165 | 20557190 | U0 | 0 | + | 1194022 | ## | chrY | 21910706 | 21910731 | U0 | 0 | - | 20557165 | 20557190 | U0 | 0 | + | 1353517 | ## | chrY | 22054002 | 22054027 | U0 | 0 | - | 20557165 | 20557190 | U0 | 0 | + | 1496813 | ## | chrY | 22210637 | 22210662 | U0 | 0 | - | 20557165 | 20557190 | U0 | 0 | + | 1653448 | ## +--------------+-----------+-----------+------------+-----------+--------------+---------------+-------------+--------------+---------------+----------------+------------+ ## Stranded PyRanges object has 10,000 rows and 12 columns from 24 chromosomes. The nearest method also takes two variables, namely how and overlap. How can take the values None, &quot;upstream&quot;, &quot;downstream&quot;, &quot;next&quot; and &quot;previous&quot;. &quot;upstream&quot; and &quot;downstream&quot; are always in reference to the PyRange the method is called on. &quot;next&quot; (to the right) and &quot;previous&quot; (to the left) are most useful to implement your own custom nearest methods. The default is None, which means that PyRanges looks in both directions. The overlap argument is a bool which indicates whether you want to include overlaps or not. f1 = pr.data.f1() print(f1) ## +--------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 3 rows and 6 columns from 1 chromosomes. f2 = pr.data.f2() print(f2) ## +--------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------| ## | chr1 | 1 | 2 | a | 0 | + | ## | chr1 | 6 | 7 | b | 0 | - | ## +--------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 2 rows and 6 columns from 1 chromosomes. print(f2.nearest(f1, strandedness=&quot;opposite&quot;, how=&quot;next&quot;)) ## +--------------+------------+------------+------------+------------+------------+------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_b | End_b | Name_b | Score_b | Strand_b | Distance | ## | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------+------------+------------+------------+------------+------------+------------| ## | chr1 | 1 | 2 | a | 0 | + | 5 | 7 | interval2 | 0 | - | 4 | ## | chr1 | 6 | 7 | b | 0 | - | 8 | 9 | interval3 | 0 | + | 2 | ## +--------------+------------+------------+------------+------------+------------+------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 2 rows and 12 columns from 1 chromosomes. print(f2.nearest(f1, how=&quot;upstream&quot;)) ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_b | End_b | Name_b | Score_b | Strand_b | Distance | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int32) | (int32) | (object) | (int64) | (category) | (int64) | ## |--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+------------| ## | chr1 | 6 | 7 | b | 0 | - | 5 | 7 | interval2 | 0 | - | 0 | ## +--------------+-----------+-----------+------------+-----------+--------------+-----------+-----------+------------+-----------+--------------+------------+ ## Stranded PyRanges object has 1 rows and 12 columns from 1 chromosomes. print(f2.nearest(f1, strandedness=&quot;opposite&quot;, how=&quot;next&quot;, overlap=False)) ## +--------------+------------+------------+------------+------------+------------+------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_b | End_b | Name_b | Score_b | Strand_b | Distance | ## | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------+------------+------------+------------+------------+------------+------------| ## | chr1 | 1 | 2 | a | 0 | + | 5 | 7 | interval2 | 0 | - | 4 | ## | chr1 | 6 | 7 | b | 0 | - | 8 | 9 | interval3 | 0 | + | 2 | ## +--------------+------------+------------+------------+------------+------------+------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 2 rows and 12 columns from 1 chromosomes. "],
["statistics-similarity-between-pyranges.html", "18 Statistics: similarity between PyRanges", " 18 Statistics: similarity between PyRanges PyRanges can compute a normalized Jaccard-statistic (ranging from 0 to 1) to compute the similarities between two ranges. import pyranges as pr gr = pr.data.chipseq() gr2 = pr.data.chipseq_background() print(gr.stats.jaccard(gr2, strandedness=&quot;same&quot;)) ## 6.241132391061034e-06 "],
["statistics-spatial-correlations-between-pyranges.html", "19 Statistics: spatial correlations between PyRanges", " 19 Statistics: spatial correlations between PyRanges To compute the similarities between two sets of ranges which do not necessarily overlap much, we can use the relative distance function. It describes the relative distances between each interval in one set and the two closest intervals in another. Any deviance from a uniform distribution is an indication of spatial correlation. import pyranges as pr gr = pr.data.chipseq() gr2 = pr.data.chipseq_background() print(gr.stats.relative_distance(gr2, strandedness=&quot;same&quot;)) ## reldist count total fraction ## 0 0.00 254 9930 0.025579 ## 1 0.01 210 9930 0.021148 ## 2 0.02 222 9930 0.022356 ## 3 0.03 240 9930 0.024169 ## 4 0.04 212 9930 0.021349 ## 5 0.05 191 9930 0.019235 ## 6 0.06 192 9930 0.019335 ## 7 0.07 205 9930 0.020645 ## 8 0.08 162 9930 0.016314 ## 9 0.09 189 9930 0.019033 ## 10 0.10 186 9930 0.018731 ## 11 0.11 212 9930 0.021349 ## 12 0.12 209 9930 0.021047 ## 13 0.13 189 9930 0.019033 ## 14 0.14 201 9930 0.020242 ## 15 0.15 178 9930 0.017925 ## 16 0.16 203 9930 0.020443 ## 17 0.17 224 9930 0.022558 ## 18 0.18 196 9930 0.019738 ## 19 0.19 212 9930 0.021349 ## 20 0.20 208 9930 0.020947 ## 21 0.21 196 9930 0.019738 ## 22 0.22 203 9930 0.020443 ## 23 0.23 198 9930 0.019940 ## 24 0.24 223 9930 0.022457 ## 25 0.25 186 9930 0.018731 ## 26 0.26 189 9930 0.019033 ## 27 0.27 192 9930 0.019335 ## 28 0.28 163 9930 0.016415 ## 29 0.29 204 9930 0.020544 ## 30 0.30 210 9930 0.021148 ## 31 0.31 202 9930 0.020342 ## 32 0.32 211 9930 0.021249 ## 33 0.33 195 9930 0.019637 ## 34 0.34 197 9930 0.019839 ## 35 0.35 175 9930 0.017623 ## 36 0.36 214 9930 0.021551 ## 37 0.37 178 9930 0.017925 ## 38 0.38 176 9930 0.017724 ## 39 0.39 193 9930 0.019436 ## 40 0.40 192 9930 0.019335 ## 41 0.41 179 9930 0.018026 ## 42 0.42 209 9930 0.021047 ## 43 0.43 184 9930 0.018530 ## 44 0.44 198 9930 0.019940 ## 45 0.45 208 9930 0.020947 ## 46 0.46 192 9930 0.019335 ## 47 0.47 184 9930 0.018530 ## 48 0.48 183 9930 0.018429 ## 49 0.49 201 9930 0.020242 "],
["turning-ranges-into-rles.html", "20 Turning Ranges into RLEs", " 20 Turning Ranges into RLEs Ranges can be turned into dicts of run length encodings with the to_rle function: import pyranges as pr gr = pr.data.aorta() print(gr) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 9953 | 10152 | H3K27me3 | 5 | + | ## | chr1 | 10024 | 10223 | H3K27me3 | 1 | + | ## | chr1 | 10246 | 10445 | H3K27me3 | 4 | + | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 9978 | 10177 | H3K27me3 | 7 | - | ## | chr1 | 10001 | 10200 | H3K27me3 | 5 | - | ## | chr1 | 10127 | 10326 | H3K27me3 | 1 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 11 rows and 6 columns from 1 chromosomes. print(gr.to_rle()) ## chr1 ## +--------+--------+------+------+-----+------+---------+------+-------+-----+---------+-------+ ## | Runs | 9916 | 23 | 12 | 2 | 25 | ... | 80 | 114 | 5 | 99801 | 199 | ## |--------+--------+------+------+-----+------+---------+------+-------+-----+---------+-------| ## | Values | 0.0 | 1.0 | 2.0 | 3.0 | 4.0 | ... | 3.0 | 2.0 | 1.0 | 0.0 | 1.0 | ## +--------+--------+------+------+-----+------+---------+------+-------+-----+---------+-------+ ## Rle of length 110445 containing 22 elements ## Unstranded PyRles object with 1 chromosome. print(gr.to_rle(strand=True)) ## chr1 + ## -- ## +--------+--------+------+------+-------+------+------+------+-------+---------+-------+ ## | Runs | 9939 | 14 | 71 | 114 | 14 | 71 | 23 | 199 | 99801 | 199 | ## |--------+--------+------+------+-------+------+------+------+-------+---------+-------| ## | Values | 0.0 | 1.0 | 2.0 | 3.0 | 2.0 | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+--------+------+------+-------+------+------+------+-------+---------+-------+ ## Rle of length 110445 containing 10 elements ## ## chr1 - ## -- ## +--------+--------+------+------+------+-------+---------+------+------+------+------+-------+ ## | Runs | 9916 | 35 | 27 | 23 | 114 | ... | 27 | 23 | 41 | 85 | 114 | ## |--------+--------+------+------+------+-------+---------+------+------+------+------+-------| ## | Values | 0.0 | 1.0 | 2.0 | 3.0 | 4.0 | ... | 3.0 | 2.0 | 1.0 | 2.0 | 1.0 | ## +--------+--------+------+------+------+-------+---------+------+------+------+------+-------+ ## Rle of length 10440 containing 12 elements ## PyRles object with 2 chromosomes/strand pairs. print(gr.to_rle(strand=True, rpm=True)) ## chr1 + ## -- ## +--------+--------+-------------------+--------------------+-------------------+--------------------+-------------------+------+-------------------+---------+-------------------+ ## | Runs | 9939 | 14 | 71 | 114 | 14 | 71 | 23 | 199 | 99801 | 199 | ## |--------+--------+-------------------+--------------------+-------------------+--------------------+-------------------+------+-------------------+---------+-------------------| ## | Values | 0.0 | 90909.09090909091 | 181818.18181818182 | 272727.2727272727 | 181818.18181818182 | 90909.09090909091 | 0.0 | 90909.09090909091 | 0.0 | 90909.09090909091 | ## +--------+--------+-------------------+--------------------+-------------------+--------------------+-------------------+------+-------------------+---------+-------------------+ ## Rle of length 110445 containing 10 elements ## ## chr1 - ## -- ## +--------+--------+-------------------+--------------------+-------------------+--------------------+---------+-------------------+--------------------+-------------------+--------------------+-------------------+ ## | Runs | 9916 | 35 | 27 | 23 | 114 | ... | 27 | 23 | 41 | 85 | 114 | ## |--------+--------+-------------------+--------------------+-------------------+--------------------+---------+-------------------+--------------------+-------------------+--------------------+-------------------| ## | Values | 0.0 | 90909.09090909091 | 181818.18181818182 | 272727.2727272727 | 363636.36363636365 | ... | 272727.2727272727 | 181818.18181818182 | 90909.09090909091 | 181818.18181818182 | 90909.09090909091 | ## +--------+--------+-------------------+--------------------+-------------------+--------------------+---------+-------------------+--------------------+-------------------+--------------------+-------------------+ ## Rle of length 10440 containing 12 elements ## PyRles object with 2 chromosomes/strand pairs. To get the RPM-normalized coverage, use the rpm argument. You can also create coverage for an any numeric value in your PyRanges: print(gr.to_rle(&quot;Score&quot;)) ## chr1 ## +--------+--------+------+------+------+------+---------+------+-------+-----+---------+-------+ ## | Runs | 9916 | 23 | 12 | 2 | 25 | ... | 80 | 114 | 5 | 99801 | 199 | ## |--------+--------+------+------+------+------+---------+------+-------+-----+---------+-------| ## | Values | 0.0 | 5.0 | 12.0 | 20.0 | 25.0 | ... | 11.0 | 10.0 | 4.0 | 0.0 | 1.0 | ## +--------+--------+------+------+------+------+---------+------+-------+-----+---------+-------+ ## Rle of length 110445 containing 22 elements ## Unstranded PyRles object with 1 chromosome. "],
["an-introduction-to-rles.html", "21 An introduction to RLEs", " 21 An introduction to RLEs Rles are runlengths - a datastructure that can compactly describe the coverage of a genome (or some other score that is associated with each nucleotide). It is used for efficient genomewide arithmetic operations on these scores. from pyrle import Rle runs = [10, 10, 10, 10] values = [0, 1, 0, 0] r1 = Rle(runs, values) print(r1) ## +--------+------+------+------+ ## | Runs | 10 | 10 | 20 | ## |--------+------+------+------| ## | Values | 0.0 | 1.0 | 0.0 | ## +--------+------+------+------+ ## Rle of length 40 containing 3 elements runs2 = [11, 9, 20] values2 = [100, 0, 100] r2 = Rle(runs2, values2) print(r2) ## +--------+-------+-----+-------+ ## | Runs | 11 | 9 | 20 | ## |--------+-------+-----+-------| ## | Values | 100.0 | 0.0 | 100.0 | ## +--------+-------+-----+-------+ ## Rle of length 40 containing 3 elements print(r1 + r2) ## +--------+-------+-------+-----+-------+ ## | Runs | 10 | 1 | 9 | 20 | ## |--------+-------+-------+-----+-------| ## | Values | 100.0 | 101.0 | 1.0 | 100.0 | ## +--------+-------+-------+-----+-------+ ## Rle of length 40 containing 4 elements print(r1 * r2) ## +--------+------+-------+------+ ## | Runs | 10 | 1 | 29 | ## |--------+------+-------+------| ## | Values | 0.0 | 100.0 | 0.0 | ## +--------+------+-------+------+ ## Rle of length 40 containing 3 elements print(r1.runs) ## [10 10 20] print(r1.values) ## [0. 1. 0.] r1 = r1 + 5 print(r1) ## +--------+------+------+------+ ## | Runs | 10 | 10 | 20 | ## |--------+------+------+------| ## | Values | 5.0 | 6.0 | 5.0 | ## +--------+------+------+------+ ## Rle of length 40 containing 3 elements print(r2 / r1) ## +--------+------+--------------------+-----+------+ ## | Runs | 10 | 1 | 9 | 20 | ## |--------+------+--------------------+-----+------| ## | Values | 20.0 | 16.666666666666668 | 0.0 | 20.0 | ## +--------+------+--------------------+-----+------+ ## Rle of length 40 containing 4 elements Rles have two helper-methods, numbers_only and defragment. The former replaces NaN with zero and infinity with large finite numbers, while the latter merges consecutive runs of duplicate values in the Rle (which might occur when manually manipulating the values vector). import numpy as np from pyrle import Rle runs2 = [11, 9, 20] values2 = [100, 0, 100] r2 = Rle(runs2, values2) r2.values = np.array([1, 1, 1], dtype=np.double) print(r2) ## +--------+------+-----+------+ ## | Runs | 11 | 9 | 20 | ## |--------+------+-----+------| ## | Values | 1.0 | 1.0 | 1.0 | ## +--------+------+-----+------+ ## Rle of length 40 containing 3 elements print(r2.defragment()) ## +--------+------+ ## | Runs | 40 | ## |--------+------| ## | Values | 1.0 | ## +--------+------+ ## Rle of length 40 containing 1 elements "],
["run-length-encoding-dicts.html", "22 Run Length Encoding dicts", " 22 Run Length Encoding dicts Since you need more than one run length to describe a genome with multiple chromosomes, pyranges has a datastructure called PyRles for collections of Rles. It can be created from a PyRanges object by invoking the to_rle function. Rledicts support the arithmetic operations +, -, /, and *. import pyranges as pr gr = pr.data.chipseq() gr_bg = pr.data.chipseq_background() cs = gr.to_rle() print(cs) ## chr1 ## +--------+-----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## | Runs | 1325303 | 25 | 216270 | 25 | 57498 | ... | 25 | 167465 | 25 | 989343 | 25 | ## |--------+-----------+------+----------+------+---------+---------+------+----------+------+----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## Rle of length 247134924 containing 1762 elements ## ... ## chrY ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------+ ## | Runs | 7046809 | 25 | 147506 | 25 | 211011 | ... | 25 | 143271 | 25 | 156610 | 25 | ## |--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------+ ## Rle of length 22210662 containing 46 elements ## Unstranded PyRles object with 24 chromosomes. bg = gr_bg.to_rle() print(bg) ## chr1 ## +--------+----------+------+----------+------+---------+---------+------+----------+------+-----------+------+ ## | Runs | 887771 | 25 | 106864 | 25 | 46417 | ... | 25 | 656076 | 25 | 1261276 | 25 | ## |--------+----------+------+----------+------+---------+---------+------+----------+------+-----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+----------+------+----------+------+---------+---------+------+----------+------+-----------+------+ ## Rle of length 246875649 containing 1480 elements ## ... ## chrY ## +--------+------------+------+--------+------+---------+---------+------+-----------+------+------------+------+ ## | Runs | 10629111 | 25 | 3320 | 25 | 11045 | ... | 25 | 8620274 | 25 | 36845024 | 25 | ## |--------+------------+------+--------+------+---------+---------+------+-----------+------+------------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+------------+------+--------+------+---------+---------+------+-----------+------+------------+------+ ## Rle of length 57402239 containing 16 elements ## Unstranded PyRles object with 25 chromosomes. print(cs + bg) ## chr1 ## +--------+----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## | Runs | 887771 | 25 | 106864 | 25 | 46417 | ... | 25 | 730068 | 25 | 259250 | 25 | ## |--------+----------+------+----------+------+---------+---------+------+----------+------+----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## Rle of length 247134924 containing 3242 elements ## ... ## chrY ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+------------+------+ ## | Runs | 7046809 | 25 | 147506 | 25 | 211011 | ... | 25 | 156610 | 25 | 35191552 | 25 | ## |--------+-----------+------+----------+------+----------+---------+------+----------+------+------------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+------------+------+ ## Rle of length 57402239 containing 62 elements ## Unstranded PyRles object with 25 chromosomes. When using arithmetic operations with a stranded and an unstranded PyRle, the stranded PyRle is automatically demoted to an unstranded PyRle. bg_stranded = gr_bg.to_rle(strand=True) print(bg_stranded) ## chr1 + ## +--------+-----------+------+-----------+------+----------+---------+------+----------+------+-----------+------+ ## | Runs | 1041102 | 25 | 1088232 | 25 | 109724 | ... | 25 | 719119 | 25 | 1774357 | 25 | ## |--------+-----------+------+-----------+------+----------+---------+------+----------+------+-----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+-----------+------+----------+---------+------+----------+------+-----------+------+ ## Rle of length 245614348 containing 724 elements ## ... ## chrY - ## +--------+------------+------+--------+------+-----------+------+---------+------+------------+------+ ## | Runs | 10629111 | 25 | 3320 | 25 | 1286333 | 25 | 18027 | 25 | 45465323 | 25 | ## |--------+------------+------+--------+------+-----------+------+---------+------+------------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+------------+------+--------+------+-----------+------+---------+------+------------+------+ ## Rle of length 57402239 containing 10 elements ## PyRles object with 50 chromosomes/strand pairs. print(cs + bg_stranded) ## chr1 ## +--------+----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## | Runs | 887771 | 25 | 106864 | 25 | 46417 | ... | 25 | 730068 | 25 | 259250 | 25 | ## |--------+----------+------+----------+------+---------+---------+------+----------+------+----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## Rle of length 247134924 containing 3242 elements ## ... ## chrY ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+------------+------+ ## | Runs | 7046809 | 25 | 147506 | 25 | 211011 | ... | 25 | 156610 | 25 | 35191552 | 25 | ## |--------+-----------+------+----------+------+----------+---------+------+----------+------+------------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+------------+------+ ## Rle of length 57402239 containing 62 elements ## Unstranded PyRles object with 25 chromosomes. Like Rles, PyGRles supports arithmetic operations with numbers. print((0.67 + cs) * 5) ## chr1 ## +--------+-----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## | Runs | 1325303 | 25 | 216270 | 25 | 57498 | ... | 25 | 167465 | 25 | 989343 | 25 | ## |--------+-----------+------+----------+------+---------+---------+------+----------+------+----------+------| ## | Values | 3.35 | 8.35 | 3.35 | 8.35 | 3.35 | ... | 8.35 | 3.35 | 8.35 | 3.35 | 8.35 | ## +--------+-----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## Rle of length 247134924 containing 1762 elements ## ... ## chrY ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------+ ## | Runs | 7046809 | 25 | 147506 | 25 | 211011 | ... | 25 | 143271 | 25 | 156610 | 25 | ## |--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------| ## | Values | 3.35 | 8.35 | 3.35 | 8.35 | 3.35 | ... | 8.35 | 3.35 | 8.35 | 3.35 | 8.35 | ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------+ ## Rle of length 22210662 containing 46 elements ## Unstranded PyRles object with 24 chromosomes. "],
["subsetting-rles.html", "23 Subsetting Rles", " 23 Subsetting Rles Rles can be subsetted using an integer (or a list of integers) to get the RLE value at one or more points. from pyrle import Rle r = Rle([3, 2, 1, 1, 1, 1], [0, 1, 2, 1, 0, 1]) print(r) ## +--------+-----+-----+-----+-----+-----+-----+ ## | Runs | 3 | 2 | 1 | 1 | 1 | 1 | ## |--------+-----+-----+-----+-----+-----+-----| ## | Values | 0.0 | 1.0 | 2.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----+-----+-----+-----+-----+-----+ ## Rle of length 9 containing 6 elements print(r[2], r[3]) ## 0.0 1.0 print(r[[3, 5, 7]]) ## [1. 2. 0.] To get the slice of one or more run lengths use a slice or a dataframe with (at least) the columns Start and End. import pandas as pd from pyrle import Rle r = Rle([3, 2, 1, 1, 1, 1], [0, 1, 2, 1, 0, 1]) print(r[5:10]) ## +--------+-----+-----+-----+-----+ ## | Runs | 1 | 1 | 1 | 1 | ## |--------+-----+-----+-----+-----| ## | Values | 2.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----+-----+-----+-----+ ## Rle of length 4 containing 4 elements df = pd.DataFrame({&quot;Start&quot;: [2, 5], &quot;End&quot;: [4, 900]}) print(df.to_csv(index=False, sep=&quot;\\t&quot;)) ## Start End ## 2 4 ## 5 900 print(r[df], end=&quot;\\n&quot;) ## [+--------+-----+-----+ ## | Runs | 1 | 1 | ## |--------+-----+-----| ## | Values | 0.0 | 1.0 | ## +--------+-----+-----+ ## Rle of length 2 containing 2 elements, +--------+-----+-----+-----+-----+ ## | Runs | 1 | 1 | 1 | 1 | ## |--------+-----+-----+-----+-----| ## | Values | 2.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----+-----+-----+-----+ ## Rle of length 4 containing 4 elements] "],
["subsetting-pyrles.html", "24 Subsetting PyRles", " 24 Subsetting PyRles Rles can be subsetted on Chromosome, Strand or Chromosome/Strand pairs import pyranges as pr gr = pr.data.chipseq() c = gr.to_rle() print(c[&quot;chr1&quot;]) ## +--------+-----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## | Runs | 1325303 | 25 | 216270 | 25 | 57498 | ... | 25 | 167465 | 25 | 989343 | 25 | ## |--------+-----------+------+----------+------+---------+---------+------+----------+------+----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+------+---------+---------+------+----------+------+----------+------+ ## Rle of length 247134924 containing 1762 elements print(c[&quot;chr1&quot;, &quot;+&quot;]) ## +--------+-----+ ## | Runs | 1 | ## |--------+-----| ## | Values | 0.0 | ## +--------+-----+ ## Rle of length 1 containing 1 elements print(c[&quot;-&quot;]) ## +--------+-----+ ## | Runs | 1 | ## |--------+-----| ## | Values | 0.0 | ## +--------+-----+ ## Rle of length 1 containing 1 elements To get the coverage of one or more intervals, you can use a PyRanges-object to subset the PyRles import pyranges as pr f1 = pr.data.f1() print(f1) ## +--------------+------------+------------+------------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (object) | (object) | (object) | (object) | (object) | (object) | ## |--------------+------------+------------+------------+------------+------------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+------------+------------+------------+------------+------------+ ## Stranded PyRanges object has 3 rows and 6 columns from 1 chromosomes. f1_c = f1.to_rle() print(f1_c) ## chr1 ## +--------+-----+-----+-----+-----+-----+-----+ ## | Runs | 3 | 2 | 1 | 1 | 1 | 1 | ## |--------+-----+-----+-----+-----+-----+-----| ## | Values | 0.0 | 1.0 | 2.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----+-----+-----+-----+-----+-----+ ## Rle of length 9 containing 6 elements ## Unstranded PyRles object with 1 chromosome. print(f1_c[f1]) ## {} "],
["using-multiple-cores.html", "25 Using multiple cores", " 25 Using multiple cores Most PyRanges and PyRle-operations can be run in parallel. Even user-made functions can be run in parallel using the apply, apply_pair or apply_chunks methods. import pyranges as pr gr = pr.data.chipseq() gr2 = pr.data.chipseq_background() gr.intersect(gr3, nb_cpu=5) PyRanges uses Ray, a âflexible, high-performance distributed execution frameworkâ to run in parallel-mode. As Ray is a rather heavy dependency, it is not automatically installed with pyranges, but can easily be installed using conda or pip. All pyranges-methods take a flag nb_cpu. It lets you run the method with nb_cpu cores. As it uses Ray behind the scenes, it will fail if Ray is already initialized. To use nb_cpu with pyrle methods, you need to use r.add(r2, nb_cpu=48), not r + r2. Note: By default PyRanges uses no extra cores. Unless the data are reasonably big or the functions are very long-running, running in parallel-mode is actually more time-consuming than single-core mode. Also, if the PyRanges contains a lot of text data, there might be less to be gained by using multithreading. This is due to how strings are represented in memory in Python and Pandas. "],
["genomicfeatures-methods-using-genomic-context.html", "26 GenomicFeatures: methods using genomic context", " 26 GenomicFeatures: methods using genomic context The PyRanges library has a few methods that operate on a genomic context. Their functions are found in the pyranges.gf namespace and the methods to be used on a PyRanges-object are found in the gr.features namespace. introns can be used on pyranges annotated with gene_id and exon_id. import pyranges as pr gr = pr.data.ucsc_bed() print(gr) ## +--------------+-----------+-----------+------------+------------+-----------------+--------------+--------------+-------------------+ ## | Chromosome | Start | End | Feature | gene_id | transcript_id | Strand | ExonNumber | transcript_name | ## | (category) | (int32) | (int32) | (object) | (object) | (float64) | (category) | (float64) | (object) | ## |--------------+-----------+-----------+------------+------------+-----------------+--------------+--------------+-------------------| ## | chr1 | 12776117 | 12788726 | gene | AADACL3 | nan | + | nan | nan | ## | chr1 | 169075927 | 169101957 | gene | ATP1B1 | nan | + | nan | nan | ## | chr1 | 6845383 | 7829766 | gene | CAMTA1 | nan | + | nan | nan | ## | chr1 | 20915589 | 20945396 | gene | CDA | nan | + | nan | nan | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | chrX | 152661096 | 152663330 | exon | PNMA6E | 260.0 | - | 0.0 | NM_001351293 | ## | chrX | 152661096 | 152666808 | transcript | PNMA6E | 260.0 | - | nan | NM_001351293 | ## | chrX | 152664164 | 152664378 | exon | PNMA6E | 260.0 | - | 1.0 | NM_001351293 | ## | chrX | 152666701 | 152666808 | exon | PNMA6E | 260.0 | - | 2.0 | NM_001351293 | ## +--------------+-----------+-----------+------------+------------+-----------------+--------------+--------------+-------------------+ ## Stranded PyRanges object has 5,519 rows and 9 columns from 30 chromosomes. print(gr.features.introns(by=&quot;transcript&quot;)) # default is by gene ## 553 ## [ 12227 12721 12227 12721 324060 324345 324060 ## 324345 753582 763155 764484 763155 764484 783186 ## 787490 788146 763155 764484 787490 788146 763155 ## 764484 787490 763155 764484 788146 763229 764484 ## 787490 788146 901994 902183 905803 905981 906138 ## 906386 906588 906784 907530 907804 908390 909020 ## 909431 909744 1266916 1267318 1268186 1268504 1268759 ## 995226 995773 998581 1072490 1076412 161068852 161069295 ## 161069586 161087968 161088671 161089178 161089402 161089742 161090022 ## 161129556 161131030 161131887 161132180 161132516 161132864 161133409 ## 161133771 161134040 161134402 161134732 161134933 161129468 161131030 ## 161131887 161132180 161132516 161132864 161133409 161133771 161134040 ## 161134402 161134732 161134933 1216046 1216677 1216990 1217695 ## 1219470 1221658 1222355 1222679 1222976 1223216 1223417 ## 1225768 1225935 1226074 1226333 1226520 1244100 1244352 ## 1244653 1244983 1245231 1246068 1246451 1244100 1244653 ## 1244983 1245231 1246068 1246451 32538652 32540678 32541423 ## 32542447 32542919 32557612 32560572 32566163 1335069 1335683 ## 1534996 1536086 1551013 1551994 1559079 1559325 1560281 ## 1560808 1561033 1562134 1562379 1562587 1562824 1563209 ## 1563559 1563779 1564102 1564691 1564946 1565084 1551013 ## 1551994 1558862 1559325 1560281 1560565 1560808 1561033 ## 1562134 1562379 1562587 1562824 1563209 1563559 1563779 ## 1564102 1564691 1564946 1565084 1551480 1551994 1551480 ## 1551994 1559079 1559325 1560281 1560808 1561033 1562134 ## 1562379 1562587 1562824 1563209 1563559 1563779 1564102 ## 1564691 1565084 1568292 1568734 1569291 1569478 1569707 ## 1631511 1631953 1632510 1632697 1632926 219348362 219352588 ## 219366593 219383989 219347646 219352588 219366593 219383989 219347323 ## 219352588 219383989 40421057 40422893 40424497 40431006 40431221 ## 40431686 40432363 40432604 40432841 40433383 40433588 40434149 ## 40434417 2409143 2410061 2411416 2411751 2416057 2418439 ## 2418815 2419157 2420817 2421306 2422774 2426387 2427009 ## 2428143 2428449 2429048 2430086 2430267 2430669 2431159 ## 2433848 2498044 2513089 2514934 169076164 169080736 169094277 ## 169096646 169099328 63989305 63991430 63997702 63998427 63999320 ## 63999887 64011728 64017505 64021186 64022918 64027528 64034190 ## 64036799 3774281 3775430 3782564 3784617 3786339 3789136 ## 3774281 3775430 3782564 3782962 3784617 3786339 3789136 ## 3774281 3775408 3782564 3784617 3786339 3789136 3789701 ## 3774281 3775408 3777070 3782564 3784617 3786339 3789136 ## 3774281 3775430 3782564 3784617 3786339 3789136 3817195 ## 3820600 3830854 4000758 4001203 4472692 4475647 4476608 ## 4483247 4483508 4631689 4632652 4642634 4643238 6296396 ## 6297210 6297405 6297908 6485309 6488479 6500500 6500868 ## 6501125 6504742 6505995 6508862 6509151 6511808 6512156 ## 6517323 6517432 6485309 6488479 6500500 6500868 6501125 ## 6504742 6505995 6508862 6509151 6510530 6511808 6512156 ## 6517323 6517432 6685352 6688751 6690413 6692555 6784910 ## 6787672 6845635 6885270 6845635 6880310 6885270 6845635 ## 6885270 6931900 6845635 6885270 6931900 6946406 6845635 ## 6885270 6931900 7729915 7731097 7737793 7792659 7796600 ## 7797069 7797630 7798542 7805082 7806151 7807841 7809851 ## 7811452 7812593 7729915 7731097 7737793 7792659 7796600 ## 7797069 7797630 7798542 7805082 7806151 7807841 7809851 ## 7811452 7812593 7815728 7729915 7731097 7737793 7792659 ## 7796600 7797069 7797630 7798542 7805082 7806151 7807841 ## 7809851 7811452 7812593 7729915 7731097 7737793 7792659 ## 7796600 7797069 7797630 7798542 7805082 7806151 7807841 ## 7811452 7812593 7729915 7731097 7737793 7792659 7796600 ## 7797069 7797630 7798542 7805082 7806151 7807841 7811452 ## 7812593 7815728 7729915 7731097 7737793 7792659 7796600 ## 7797069 7797630 7798542 7805082 7806151 7807841 7811452 ## 7812593 7815728 7740275 7792659 7796600 7797069 7797630 ## 7798542 7805082 7806151 7807841 7811452 7812593 20915776 ## 20931532 20940392 8268933 8270655 8274738 61548490 61554352 ## 61743257 61798258 61818239 61824946 61849037 61869954 61872399 ## 61892228 8484761 8488648 8490032 8939019 42619211 42620537 ## 10057389 10064365 10067806 10068332 10491458 10494022 10494747 ## 10500470 10491458 10500470 11159967 11159871 11160141 11204044 ## 11204943 11205336 11670170 11672035 11715009 11716157 11718421 ## 11718928 11866406 11867247 11876737 11879611 11882858 11883890 ## 11884610 11886271 11887278 11888276 11888681 11889379 11893695 ## 11894087 11894452 11894647 11896210 11897213 11897556 11898499 ## 11898717 11866406 11867247 11875968 11876737 11879611 11882858 ## 11883890 11884610 11886281 11887278 11888276 11888681 11889379 ## 11893695 11894087 11894452 11894647 11896210 11897213 11897556 ## 11898499 11898717 11901264 11904130 11905823 12776347 12780948 ## 12855118 13194595 13196556 13197528 13194595 13196556 13197528] ## [ 12612 13220 12612 13220 324287 324438 324287 ## 324438 754102 764382 776579 764382 783033 787306 ## 788050 788770 764382 787306 788050 788770 764382 ## 787306 788770 764382 788050 788770 764382 787306 ## 788050 788770 902083 905656 905900 906065 906258 ## 906456 906703 907454 907667 908240 908879 909212 ## 909695 909821 1267017 1267403 1268300 1268638 1268885 ## 995659 998458 1001209 1076204 1078118 161069135 161069368 ## 161069850 161088575 161088923 161089298 161089608 161089896 161093930 ## 161130409 161131827 161132059 161132404 161132708 161133344 161133667 ## 161133953 161134323 161134624 161134818 161135146 161130409 161131827 ## 161132059 161132404 161132708 161133344 161133667 161133953 161134323 ## 161134624 161134860 161135146 1216605 1216790 1217621 1219357 ## 1221305 1222147 1222488 1222887 1223052 1223318 1225650 ## 1225856 1226016 1226274 1226444 1226633 1244294 1244465 ## 1244833 1245060 1246013 1246219 1246709 1244465 1244833 ## 1245060 1246013 1246288 1246709 32540551 32541203 32542363 ## 32542764 32557275 32560384 32566042 32568031 1335537 1335984 ## 1536036 1542252 1551887 1558768 1559153 1560174 1560665 ## 1560925 1562029 1562216 1562453 1562675 1563052 1563398 ## 1563652 1563868 1564512 1564764 1565018 1565671 1551887 ## 1558768 1559153 1560174 1560370 1560665 1560925 1562029 ## 1562216 1562453 1562675 1563052 1563398 1563652 1563868 ## 1564512 1564764 1565018 1565671 1551887 1552457 1551887 ## 1558810 1559153 1560174 1560665 1560925 1562029 1562216 ## 1562453 1562675 1563052 1563398 1563652 1563868 1564512 ## 1565018 1565671 1568566 1569126 1569367 1569580 1569826 ## 1631785 1632345 1632586 1632799 1633046 219352488 219366423 ## 219383873 219384833 219352488 219366423 219383873 219384833 219352488 ## 219383856 219384833 40422758 40424372 40430882 40431142 40431528 ## 40432272 40432482 40432757 40433299 40433475 40434005 40434240 ## 40435176 2409914 2411172 2411621 2415886 2418345 2418611 ## 2419036 2420645 2421198 2422630 2426294 2426926 2428045 ## 2428266 2428940 2429961 2430182 2430522 2431079 2433550 ## 2435383 2512998 2514808 2515563 169080607 169094121 169096461 ## 169099247 169100529 63991242 63997490 63998340 63999124 63999765 ## 64011586 64017395 64021028 64022784 64027379 64033980 64036691 ## 64038112 3775281 3782325 3784537 3786168 3789035 3800070 ## 3775281 3782375 3782847 3784537 3786168 3789035 3800070 ## 3775281 3782375 3784537 3786168 3789035 3789577 3800070 ## 3775281 3776983 3782375 3784537 3786168 3789035 3800070 ## 3775281 3782375 3784537 3786168 3789035 3800070 3820528 ## 3830255 3830958 4001053 4012312 4475612 4476371 4482819 ## 4483407 4484053 4632529 4642336 4643142 4643398 6297025 ## 6297304 6297873 6298280 6488285 6500313 6500685 6500993 ## 6504540 6505723 6508700 6508952 6511662 6511892 6517243 ## 6517420 6520058 6488285 6500313 6500685 6500993 6504540 ## 6505723 6508700 6508952 6510503 6511662 6511892 6517243 ## 6517420 6520058 6688558 6690347 6692429 6694079 6789779 ## 6789779 6885151 6931816 6880240 6885151 6947713 6885151 ## 6931816 6947713 6885151 6931816 6946299 6947713 6885151 ## 6931816 6946299 7730970 7737658 7792507 7796403 7796990 ## 7797314 7798018 7804894 7805904 7807769 7809830 7811258 ## 7812518 7826518 7730970 7737658 7792507 7796403 7796990 ## 7797314 7798357 7804894 7805904 7807769 7809830 7811258 ## 7812518 7815697 7826518 7730970 7737658 7792507 7796403 ## 7796990 7797314 7798357 7804894 7805904 7807769 7809830 ## 7811258 7812518 7826518 7730970 7737658 7792507 7796403 ## 7796990 7797314 7798357 7804894 7805904 7807769 7811258 ## 7812518 7826518 7730970 7737658 7792507 7796403 7796990 ## 7797314 7798357 7804894 7805904 7807769 7811258 7812518 ## 7815697 7826518 7730970 7737658 7792507 7796403 7796990 ## 7797314 7798018 7804894 7805904 7807769 7811258 7812518 ## 7815697 7826518 7792507 7796403 7796990 7797314 7798018 ## 7804894 7805904 7807769 7811258 7812518 7826518 20931420 ## 20940334 20944944 8270546 8274684 8275138 61553820 61743191 ## 61798183 61818121 61824818 61848908 61869775 61872233 61892136 ## 61920974 8488541 8489886 8494692 8939623 42620350 42621205 ## 10064150 10067627 10068230 10075839 10493898 10494713 10500403 ## 10502321 10500403 10511433 11161857 11161857 11161857 11204723 ## 11205209 11209326 11671899 11672846 11715996 11718323 11718792 ## 11721186 11867187 11876671 11879544 11882751 11883763 11884542 ## 11886212 11887145 11888162 11888514 11889252 11893571 11893933 ## 11894292 11894540 11896023 11897055 11897399 11898391 11898591 ## 11900199 11867187 11875902 11876671 11879544 11882751 11883763 ## 11884542 11886212 11887171 11888162 11888514 11889252 11893571 ## 11893933 11894292 11894540 11896023 11897055 11897399 11898391 ## 11898591 11900199 11903760 11905603 11907490 12780884 12785188 ## 12855586 13196244 13196952 13198478 13196244 13196952 13198478] ## [ 1 1 2 2 7 7 8 8 9 10 10 11 11 11 11 11 12 12 ## 12 12 13 13 13 14 14 14 15 15 15 15 16 16 16 16 16 16 ## 16 16 16 16 16 16 16 16 17 17 17 17 17 18 18 18 19 19 ## 20 20 20 21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 ## 22 22 22 23 23 23 23 23 23 23 23 23 23 23 23 24 24 24 ## 24 24 24 24 24 24 24 24 24 24 24 24 24 25 25 25 25 25 ## 25 25 26 26 26 26 26 26 27 27 27 27 27 27 27 27 28 28 ## 29 29 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 ## 30 30 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 ## 31 31 31 32 32 33 33 33 33 33 33 33 33 33 33 33 33 33 ## 33 33 33 33 34 34 34 34 34 35 35 35 35 35 36 36 36 36 ## 37 37 37 37 38 38 38 39 39 39 39 39 39 39 39 39 39 39 ## 39 39 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 ## 40 40 40 40 40 41 41 41 42 42 42 42 42 44 44 44 44 44 ## 44 44 44 44 44 44 44 44 45 45 45 45 45 45 46 46 46 46 ## 46 46 46 47 47 47 47 47 47 47 48 48 48 48 48 48 48 49 ## 49 49 49 49 49 50 50 50 51 51 52 52 52 52 52 53 53 53 ## 53 54 54 54 54 55 55 55 55 55 55 55 55 55 55 55 55 55 ## 56 56 56 56 56 56 56 56 56 56 56 56 56 56 57 57 57 57 ## 58 59 60 60 61 61 61 62 62 62 63 63 63 63 64 64 64 65 ## 65 65 65 65 65 65 65 65 65 65 65 65 65 66 66 66 66 66 ## 66 66 66 66 66 66 66 66 66 66 67 67 67 67 67 67 67 67 ## 67 67 67 67 67 67 68 68 68 68 68 68 68 68 68 68 68 68 ## 68 69 69 69 69 69 69 69 69 69 69 69 69 69 69 70 70 70 ## 70 70 70 70 70 70 70 70 70 70 70 71 71 71 71 71 71 71 ## 71 71 71 71 72 72 72 73 73 73 74 74 74 74 74 74 74 74 ## 74 74 75 75 75 76 77 77 79 79 79 79 85 85 85 85 86 86 ## 87 88 89 90 90 90 91 91 92 92 92 92 93 93 93 93 93 93 ## 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 94 94 94 ## 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 ## 94 95 95 95 102 102 103 104 104 104 105 105 105] ## 615 ## [ 35174 35481 35174 35481 35174 35481 139696 ## 139847 563203 563603 665184 665335 700627 701767 ## 703993 705092 708487 709660 804055 810535 853100 ## 853555 854295 853100 853495 854295 19167021 19168346 ## 19176044 19181480 19184125 1153184 1154013 1154307 1158737 ## 1159348 1164326 1190867 1191505 1192510 1192690 1198766 ## 1203372 1247304 1247527 1247748 1247881 1248080 1248329 ## 1248504 1248972 1249301 1249745 1250342 1250818 1250998 ## 1254904 1255909 1256473 1257364 1258667 1247304 1247527 ## 1247748 1247881 1248080 1248329 1248504 1248972 1249301 ## 1249745 1250342 1250818 1250998 1254904 1255909 1256473 ## 1258667 1247304 1247527 1247748 1247881 1248080 1248329 ## 1248504 1248972 1249301 1249745 1250342 1250818 1250994 ## 1258667 1289009 1289308 1289486 1289612 1289889 1290532 ## 1290725 1292084 1322962 1323249 1323445 1325751 1325943 ## 1326245 1328183 1328840 1330917 1322962 1323249 1323445 ## 1324123 1324427 1325751 1325943 1328183 1328840 1330894 ## 1333722 1334051 1322962 1323249 1323445 1324123 1325751 ## 1325943 1326245 1326955 1328183 1328840 1330894 1333722 ## 1334051 1322962 1323249 1323445 1323890 1324123 1325751 ## 1325943 1326955 1328183 1328840 1330894 1333722 1334051 ## 1366334 1366042 1366042 159682358 159683393 159683928 196197465 ## 196205200 196227624 196250118 196251486 196254888 196274475 196285156 ## 196288685 196296019 196300391 196303190 196309700 196311358 196342378 ## 196367801 196392243 196395118 196397399 196398887 196434517 196436916 ## 196438198 196448368 196451509 196459067 196461471 241757993 241761299 ## 241767881 1634438 1634708 1635063 1635379 1635585 1635783 ## 1636094 1636464 1637171 1639023 1639684 1640391 1640572 ## 1641079 1643839 1647917 1650894 1653150 1654270 1634438 ## 1634708 1635063 1635379 1635585 1635783 1636094 1636464 ## 1637171 1639023 1639684 1640391 1640572 1641079 1643839 ## 1647917 1650894 1653150 1654270 1684499 1685088 1685647 ## 1685822 1686137 1686915 1687782 1688047 1688749 1980907 ## 1981105 2114180 2116952 2125349 2116952 2117688 2118645 ## 2121220 2124414 2125349 2125572 2116952 2117688 2118645 ## 2121220 2125349 2125572 2116952 2125349 2125572 2116952 ## 2125349 2129581 2132664 2135069 2137863 2138106 2121220 ## 2125349 2121220 2124414 2125349 2121220 2125349 2125572 ## 2129581 2132664 2135069 2143897 2124414 2125349 2125572 ## 155720524 155721660 155722378 155723205 155724279 155726868 155727114 ## 155727825 155730432 155732165 155733355 155736500 155737332 155741008 ## 155743001 155744964 155746272 155747611 155753880 155755165 155764942 ## 155774932 155783595 155784240 155785691 155786053 155790447 155791339 ## 155792267 155796819 155823597 2310419 2310666 2316504 2317336 ## 2318968 2319776 2481713 2482170 2484142 2485253 2485735 ## 2488135 229577787 229580749 229584937 229586352 229588390 229594043 ## 229596516 229599423 229600622 229601266 229602503 229606551 229611479 ## 229613507 229619892 229622275 229623360 229625849 229631312 229631794 ## 229634053 229635565 229636610 229637849 229641905 4007388 4008655 ## 5923465 5924093 5924577 5925333 5926518 5927175 5927956 ## 5933395 5934717 5935160 5936138 5936583 5937358 5939692 ## 5940299 5947526 5951088 5964864 5965543 5965840 5967282 ## 5969273 5987847 5993389 6007290 6008311 6012896 6022009 ## 6027423 6029319 6038473 6046387 6265042 6265473 150671210 ## 150672659 150675869 150676670 150676819 150679285 150680883 150681437 ## 150684047 150684329 150686597 150687154 150689758 150692014 6521822 ## 6522234 6522726 6523030 6523207 6524513 6524779 6525282 ## 6525620 6521822 6522234 6522723 6523187 6524513 6524779 ## 6525282 6525620 6521822 6522234 6522726 6523030 6523187 ## 6524513 6524779 6525620 6521822 6522234 6522723 6525620 ## 6527632 6528646 6529301 6529510 6529736 6530415 6530703 ## 6530944 6531160 6531697 6531868 6532682 6533234 6533514 ## 6534224 6534647 6535198 6535582 6536096 6537718 6527632 ## 6528646 6529301 6529510 6529736 6530415 6530703 6530944 ## 6531160 6531697 6531868 6532682 6533234 6533514 6534224 ## 6534647 6535198 6535582 6536096 6537718 6527632 6528646 ## 6529301 6529510 6529736 6530415 6530703 6530944 6531160 ## 6531697 6531868 6532682 6533234 6533514 6534224 6534647 ## 6535198 6535582 6536096 6537718 6527632 6528646 6529301 ## 6529510 6529736 6530415 6530703 6530944 6531160 6531697 ## 6531868 6532682 6533234 6533514 6534224 6534647 6535198 ## 6535582 6536096 6537718 6556629 6527632 6528646 6529301 ## 6529510 6529736 6530415 6530703 6530944 6531160 6531697 ## 6531868 6532682 6533234 6533514 6534224 6534647 6535198 ## 6535582 6536096 6537718 6556629 6844105 6844283 7442783 ## 7449499 7448553 7449499 7448497 7449499 27427135 27427766 ## 27428317 27428621 27429049 27429234 27429803 27432578 27434356 ## 27436268 27440777 223408442 223438160 223442017 223465993 223536802 ## 9211894 173833213 173833442 173833644 173833842 173834420 173834685 ## 173835032 173835344 173835705 173835934 173836181 9487440 9487440 ## 9714101 9732777 9741193 9732777 9741193 10010706 10011355 ## 10012527 10015973 162344406 162345193 11838341 11838864 236141288 ## 236142407 236143245 236143953 236145082 236148805 236154358 236157172 ## 236175343 236176860 236180573 236187513 236189441 236193050 236195952 ## 236201553 236205592 236208983 236212289 211836994 211840573 211842674 ## 211843749 211844626 211847065 211847855 12882802 13163233 13164760 ## 13165468 13163233 13164760 13165468 11734873 11735231 11735788 ## 11736197 11737005 11737671 11740528 11740670 45272347] ## [ 35276 35720 35276 35720 35276 35720 139789 ## 140074 563340 564298 665277 665562 701708 703927 ## 704876 708355 709550 713663 809491 812125 853401 ## 854204 854714 853401 854204 854714 19168222 19175834 ## 19180706 19183824 19185972 1153837 1154148 1158623 1159211 ## 1163847 1167271 1191424 1192371 1192587 1198725 1203112 ## 1209045 1247397 1247605 1247819 1247972 1248166 1248414 ## 1248888 1249111 1249680 1250203 1250783 1250899 1254675 ## 1255835 1256375 1257287 1258271 1259960 1247397 1247605 ## 1247819 1247972 1248166 1248414 1248888 1249111 1249680 ## 1250203 1250783 1250899 1254675 1255835 1256375 1258560 ## 1259960 1247397 1247605 1247819 1247972 1248166 1248414 ## 1248888 1249111 1249680 1250203 1250783 1250899 1258556 ## 1259960 1289227 1289409 1289572 1289733 1290061 1290623 ## 1292060 1293835 1323156 1323333 1325609 1325838 1326145 ## 1328058 1328775 1330773 1333612 1323156 1323333 1324005 ## 1324329 1325609 1325838 1326145 1328775 1330773 1333612 ## 1333976 1334398 1323156 1323333 1324005 1325609 1325838 ## 1326145 1326676 1328058 1328775 1330773 1333612 1333976 ## 1334398 1323156 1323333 1323871 1324005 1325609 1325838 ## 1326145 1328058 1328775 1330773 1333612 1333976 1334398 ## 1369557 1369557 1369567 159683292 159683792 159684214 196205115 ## 196227323 196249989 196251402 196254786 196274363 196285021 196288613 ## 196295846 196300285 196302976 196309470 196311208 196342269 196367692 ## 196392179 196394981 196397234 196398706 196434422 196436832 196438123 ## 196448308 196451460 196458967 196461391 196577344 241761047 241767561 ## 241803183 1634518 1634914 1635262 1635477 1635661 1635988 ## 1636342 1637080 1638963 1639618 1640232 1640476 1640956 ## 1643702 1647784 1650766 1653034 1654146 1655696 1634518 ## 1634914 1635262 1635477 1635661 1635988 1636342 1637080 ## 1638963 1639618 1640232 1640476 1640917 1643702 1647784 ## 1650766 1653034 1654146 1655696 1685005 1685489 1685722 ## 1685982 1686812 1687696 1687941 1688619 1689803 1981036 ## 1981306 2115009 2125077 2126126 2117442 2118276 2121151 ## 2124283 2125077 2125436 2126126 2117442 2118276 2121151 ## 2125077 2125436 2126126 2125077 2125436 2126126 2125077 ## 2129445 2132488 2134874 2137743 2137953 2138994 2125077 ## 2126126 2124085 2125077 2126126 2125077 2125436 2129445 ## 2130192 2135002 2143810 2143987 2125077 2125436 2126126 ## 155721557 155721750 155722994 155724165 155726748 155726970 155727681 ## 155730234 155731980 155733102 155734790 155737215 155740857 155742856 ## 155744792 155746185 155747412 155753776 155755124 155764840 155774739 ## 155783424 155784120 155785595 155786002 155790396 155791264 155792076 ## 155796627 155823066 155826937 2310547 2316416 2317245 2318857 ## 2319677 2322896 2482011 2482430 2485064 2485539 2486162 ## 2488415 229580660 229584872 229586271 229588271 229593907 229596357 ## 229599289 229600370 229601166 229602380 229606326 229611384 229613343 ## 229619800 229622117 229623212 229625701 229631241 229631638 229633882 ## 229635430 229636502 229637745 229641786 229643814 4008016 4008922 ## 5923949 5924397 5925161 5926432 5927089 5927799 5933311 ## 5934530 5934933 5936013 5936445 5937152 5939405 5940173 ## 5947345 5950927 5964676 5965351 5965691 5967174 5969211 ## 5987708 5993206 6007163 6008129 6012759 6021853 6027358 ## 6029146 6038329 6046214 6052303 6265265 6265813 150672587 ## 150675785 150676593 150676752 150679028 150680731 150681369 150684020 ## 150684308 150686560 150687090 150689613 150691948 150693279 6522053 ## 6522688 6522922 6523124 6524434 6524611 6525147 6525499 ## 6526128 6522053 6522688 6523131 6524434 6524611 6525147 ## 6525499 6526128 6522053 6522688 6522922 6523131 6524434 ## 6524611 6525499 6526128 6522053 6522688 6525499 6526128 ## 6527884 6529101 6529394 6529603 6530295 6530565 6530794 ## 6531049 6531547 6531817 6532586 6533045 6533310 6534072 ## 6534510 6535106 6535521 6535990 6537588 6545383 6527884 ## 6529101 6529394 6529603 6530295 6530565 6530794 6531049 ## 6531547 6531817 6532586 6533045 6533310 6534072 6534510 ## 6535106 6535521 6535990 6537588 6545895 6527884 6529101 ## 6529394 6529603 6530295 6530565 6530794 6531049 6531547 ## 6531817 6532586 6533045 6533310 6534072 6534510 6535106 ## 6535521 6535990 6537588 6550504 6527884 6529101 6529394 ## 6529603 6530295 6530565 6530794 6531049 6531547 6531817 ## 6532586 6533045 6533310 6534072 6534510 6535106 6535521 ## 6535990 6537588 6556552 6557018 6527884 6529101 6529394 ## 6529603 6530295 6530565 6530794 6531049 6531547 6531817 ## 6532586 6533045 6533310 6534072 6534510 6535106 6535521 ## 6535990 6537588 6556552 6579504 6844208 6844717 7449399 ## 7449718 7449399 7449718 7449399 7449718 27427693 27428215 ## 27428506 27428875 27429163 27429713 27432375 27434138 27436017 ## 27440316 27480473 223437971 223441843 223465780 223536619 223537398 ## 9242065 173833394 173833621 173833812 173834366 173834608 173834994 ## 173835314 173835665 173835898 173836128 173837097 9488900 9488980 ## 9714255 9740769 9747392 9747392 9747392 10011288 10012396 ## 10015878 10020771 162345079 162346477 11838701 11839179 236142294 ## 236143121 236143795 236144910 236148678 236154185 236156944 236175220 ## 236176710 236180447 236187369 236189195 236192849 236195700 236201403 ## 236205209 236208756 236211989 236228154 211840447 211842454 211843622 ## 211844543 211846824 211847637 211848725 12882898 13164184 13165156 ## 13167115 13164184 13165156 13167115 11735138 11735714 11736102 ## 11736904 11737599 11740409 11740618 11751469 45272455] ## [ 5 5 6 6 7 7 8 8 9 9 10 10 11 11 11 11 11 11 13 13 14 14 14 15 ## 15 15 16 16 16 16 16 17 17 17 17 17 17 18 18 18 18 18 18 21 21 21 21 21 ## 21 21 21 21 21 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 22 22 ## 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 23 23 23 23 26 26 26 26 ## 26 26 26 26 27 27 27 27 27 27 27 27 27 28 28 28 28 28 28 28 28 28 28 28 ## 28 29 29 29 29 29 29 29 29 29 29 29 29 29 30 30 30 30 30 30 30 30 30 30 ## 30 30 30 31 32 33 34 34 34 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 ## 35 35 35 35 35 35 35 35 35 35 35 35 36 36 36 37 37 37 37 37 37 37 37 37 ## 37 37 37 37 37 37 37 37 37 37 38 38 38 38 38 38 38 38 38 38 38 38 38 38 ## 38 38 38 38 38 39 39 39 39 39 39 39 39 39 40 40 41 42 42 43 43 43 43 43 ## 43 43 44 44 44 44 44 44 45 45 45 46 46 46 46 46 46 46 47 47 48 48 48 49 ## 49 49 49 49 49 49 50 50 50 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 ## 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 53 53 53 53 53 53 54 54 ## 54 54 54 54 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 ## 55 55 55 55 55 57 57 59 59 59 59 59 59 59 59 59 59 59 59 59 59 59 59 59 ## 59 59 59 59 59 59 59 59 59 59 59 59 59 59 59 60 60 61 61 61 61 61 61 61 ## 61 61 61 61 61 61 61 63 63 63 63 63 63 63 63 63 64 64 64 64 64 64 64 64 ## 65 65 65 65 65 65 65 65 66 66 66 66 67 67 67 67 67 67 67 67 67 67 67 67 ## 67 67 67 67 67 67 67 67 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 ## 68 68 68 68 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 ## 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 71 71 71 ## 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 72 72 73 73 74 74 ## 75 75 76 76 76 76 76 76 76 76 76 76 76 77 77 77 77 77 80 81 81 81 81 81 ## 81 81 81 81 81 81 82 83 84 85 85 86 87 88 88 88 88 89 89 90 90 91 91 91 ## 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 92 92 92 92 92 92 92 94 ## 95 95 95 96 96 96 97 97 97 97 97 97 97 97 98] ## 162 ## [ 85581952 85582293 85582721 85584375 85589383 85590289 85595877 ## 85596953 85598332 85598685 85604597 85616950 85617388 210444479 ## 210444824 210489853 210518156 210543409 210545551 210561074 210561472 ## 210561775 210565062 210570451 210574978 210590514 210594686 27806009 ## 27806583 27821121 27822545 27822920 27823682 27824309 27825428 ## 27826174 27830906 27838136 27839191 27840438 42795913 42797644 ## 42806340 42836724 42867376 42871384 42883442 42887002 42909729 ## 42922979 42924974 42931458 42935194 42936236 42946214 42950175 ## 42795913 42797644 42806340 42836724 42867376 42871384 42883442 ## 42887002 42922979 42924974 42931458 42935194 42936236 42946214 ## 42950175 232651248 232653442 232656518 232659061 232661018 232663674 ## 109403371 109404545 109405422 109408258 109411177 109415042 109421464 ## 109429164 109429383 109432561 109455757 109463386 109473426 241808447 ## 241808779 241810125 241810866 241812466 241813479 241814621 241815421 ## 241817049 241817567 130940025 130940348 203879705 203881158 203906579 ## 203914698 203921231 203922176 203933198 203942560 203948248 203949292 ## 203964435 203972241 203972911 203975005 203976821 203978041 203980793 ## 203987066 203990243 203990816 203991439 203991649 203992660 203995199 ## 203996855 203997869 204000975 204001497 204003038 204003471 204009628 ## 204009883 204013871 204016312 204022548 204031020 204032083 204034574 ## 204036746 204037576 204040010 204045235 204048111 204053312 204055112 ## 204058634 204062114 204064170 204066438 204067504 204073476 204074045 ## 204075829 204078376 191208687 191213757 191225032 191227413 191231621 ## 191234003] ## [ 85582198 85582677 85584089 85589308 85590219 85595808 85596861 ## 85598208 85598562 85604466 85616873 85617260 85617882 210444759 ## 210489776 210517865 210543295 210545473 210557360 210561265 210561640 ## 210565000 210570303 210574637 210590432 210594573 210594905 27806524 ## 27820933 27822449 27822836 27823557 27824222 27825329 27826006 ## 27830711 27838034 27839128 27840339 27844019 42797576 42806246 ## 42836597 42867312 42871266 42883339 42886902 42909540 42922904 ## 42924915 42931336 42935042 42936013 42946127 42950028 42980513 ## 42797576 42806246 42836597 42867312 42871266 42883339 42886902 ## 42922904 42924915 42931336 42935042 42936013 42946127 42950028 ## 42980513 232653264 232656442 232658972 232660815 232663568 232672196 ## 109404487 109405307 109408130 109410995 109414883 109421347 109429086 ## 109429275 109432396 109455640 109463193 109473249 109492543 241808586 ## 241810060 241810765 241812395 241813394 241814525 241815351 241816953 ## 241817438 241818130 130940199 130948041 203880878 203906487 203914536 ## 203921149 203922048 203933115 203942474 203947941 203949185 203964351 ## 203972142 203972330 203974872 203976701 203977737 203980707 203986976 ## 203990074 203990682 203991279 203991546 203992503 203995040 203996695 ## 203997780 204000399 204001321 204002884 204003342 204009322 204009733 ## 204013713 204016187 204022421 204030871 204031949 204034469 204036650 ## 204037451 204039869 204045104 204048001 204053194 204055014 204058517 ## 204062024 204064060 204066265 204067409 204073359 204073883 204075680 ## 204078240 204081975 191213613 191224764 191227352 191231420 191233828 ## 191235569] ## [ 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 ## 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 ## 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 ## 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 ## 8 8 8 8 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 ## 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 ## 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11] ## 140 ## [202153504 202154289 202154577 202164023 202172345 202173973 202195245 ## 202195556 202207154 202208986 202211398 202213025 202215505 202216174 ## 153512912 153514534 153515523 153515703 153515870 153519212 153519686 ## 153520285 153520493 153520766 153525784 153526895 153527895 153529137 ## 153529556 153530220 153533293 153533989 153535986 153537850 153547492 ## 153549582 153551136 153572640 110303814 110322111 110323436 110325553 ## 110332344 31558874 31560683 31562543 31564260 31565163 31567602 ## 31569709 31570516 31571229 31571846 31572697 31573089 31587110 ## 31588410 31588975 31589860 31590923 31591526 31593344 31595263 ## 31596822 31598420 31600103 31602842 31604592 31606018 31606713 ## 31609421 31610763 31611161 31620595 31621565 31624194 31626010 ## 31628830 61706101 61708416 61709674 61710226 61711240 61713097 ## 61715406 61715906 61717911 61719333 61719616 61719883 61720188 ## 61721226 61722748 61724142 61725927 61726048 61727029 61729175 ## 61729445 61749818 61753656 61761038 225339093 225343062 225346795 ## 225360683 225362566 225365204 225367789 225368539 225370849 225371720 ## 225376299 225378355 225379489 225400358 209030539 209035787 209036799 ## 209045540 209046029 209047771 209049756 209051785 220102069 220102449 ## 220102679 220103085 220103306 220103501 220103932 220104173 220104404 ## 220104555 220104816 220105007 220107296 220107640 220108036 220108365] ## [202154179 202154418 202163960 202172241 202173873 202195192 202195458 ## 202207092 202208892 202211264 202212976 202215433 202216014 202221704 ## 153514402 153515461 153515606 153515783 153519116 153519548 153520168 ## 153520389 153520651 153525650 153526744 153527786 153528972 153529491 ## 153530111 153532918 153533964 153535865 153537739 153547475 153549551 ## 153551055 153572508 153573869 110321942 110323339 110325391 110332157 ## 110371374 31560506 31562354 31564194 31565048 31567549 31569634 ## 31570387 31571133 31571764 31572551 31572897 31587023 31588322 ## 31588841 31589735 31590826 31591406 31593220 31595093 31596738 ## 31598245 31599918 31602732 31604498 31605866 31606620 31609279 ## 31610676 31611092 31620533 31621438 31624085 31625913 31628772 ## 31637490 61708319 61709514 61710091 61711071 61712902 61715299 ## 61715722 61717776 61719169 61719459 61719701 61720049 61721028 ## 61722589 61724013 61725807 61725999 61726847 61729130 61729383 ## 61749745 61753554 61760906 61764696 225342916 225346608 225360548 ## 225362469 225365079 225367681 225368368 225370672 225371574 225376070 ## 225378240 225379328 225400244 225449660 209035668 209036711 209045468 ## 209045941 209047688 209049674 209051669 209054676 220102233 220102547 ## 220102971 220103216 220103426 220103813 220104132 220104282 220104496 ## 220104641 220104912 220107235 220107489 220107869 220108223 220109950] ## [1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ## 2 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 ## 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 ## 6 6 6 6 6 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8] ## 105 ## [130745850 130746846 130748722 130828765 130851653 130852800 130871381 ## 130871553 130873965 130881371 130884363 130887781 130889731 130947532 ## 130962340 130992418 130745850 130746846 130748722 130797434 130799432 ## 130828765 130851653 130852800 130871381 130871553 130873965 130881371 ## 130884363 130887781 130889731 130947532 130962340 130992418 15643817 ## 15677195 15683564 183904068 183904442 183904663 183905231 183905549 ## 183905771 183906195 183906629 183906776 183906932 183907065 183907231 ## 183907545 183907719 183908831 183909043 183910477 183910684 183911022 ## 183911240 50654657 50655215 50677936 50679202 50679763 50681963 ## 50683216 50683695 50684256 50684634 45067963 45072417 44666635 ## 44671036 44672713 44673688 44674091 88108655 88135552 88162346 ## 88175419 88178161 88178976 88184352 88190198 15469389 15471514 ## 15473730 15476045 15478082 183993980 183994493 183994815 183995254 ## 183995837 183996101 183996345 184001761 184002893 184003380 184005735 ## 184007323 184007506 184008146 184008455 184008648 184009018 184009227] ## [130746773 130748456 130828646 130851588 130852673 130871231 130871474 ## 130873879 130881251 130884269 130887673 130889616 130947371 130962279 ## 130992321 131068400 130746773 130748456 130797327 130799266 130828646 ## 130851588 130852673 130871231 130871474 130873879 130881251 130884269 ## 130887673 130889616 130947371 130962279 130992321 131068400 15676930 ## 15683414 15685822 183904294 183904583 183905184 183905451 183905648 ## 183905928 183906548 183906716 183906875 183907042 183907175 183907344 ## 183907642 183908786 183908910 183910388 183910592 183910889 183911152 ## 183911327 50654944 50677796 50679137 50679683 50681839 50683140 ## 50683570 50684170 50684553 50685324 45072318 45077015 44670565 ## 44672553 44673596 44673964 44683391 88135406 88162264 88175283 ## 88177958 88178836 88184210 88187854 88190794 15471419 15473593 ## 15475854 15477848 15480615 183994268 183994679 183995038 183995712 ## 183995954 183996279 184001572 184002750 184003265 184005624 184007224 ## 184007428 184008042 184008344 184008580 184008827 184009131 184009849] ## [ 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 ## 2 2 2 2 2 2 2 2 2 2 3 3 3 4 4 4 4 4 4 4 4 4 4 4 ## 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 7 7 7 ## 7 7 8 8 8 8 8 8 8 8 9 9 9 9 9 10 10 10 10 10 10 10 10 10 ## 10 10 10 10 10 10 10 10 10] ## 20 ## [ 49455151 49455406 49456584 49456838 49457221 49459005 49459704 ## 16302336 16305736 178957852 178961072 178962481 178968722 170185165 ## 170198955 170201311 170204157 170216673 170219134 170244877] ## [ 49455250 49456403 49456692 49457142 49458924 49459536 49459793 ## 16305661 16306275 178960596 178962282 178968530 178976735 170198077 ## 170201102 170204010 170216455 170218897 170244421 170303699] ## [1 1 1 1 1 1 1 2 2 3 3 3 3 4 4 4 4 4 4 4] ## 113 ## [ 76650069 76678726 76691692 76692077 76692290 76695949 76704011 ## 76708355 76711391 76711950 76715054 76720885 76721622 76721952 ## 76722353 76725425 76726456 76727725 76730204 76731692 76733528 ## 22694696 22737831 22749715 22750583 114214455 114214694 114223995 ## 114232555 114238965 114239776 114244950 114251626 114254364 114257213 ## 114257937 114260478 114263072 114264298 114267178 114269464 114271405 ## 114282053 114284625 114286338 114289007 114290961 114294329 114214455 ## 114214694 114223995 114232555 114238965 114239776 114251626 114254364 ## 114257213 114257937 114260478 114263072 114264298 114267178 114269464 ## 114271405 114282053 114284625 114286338 114289007 114290961 114294329 ## 114294605 128651932 128665954 128685515 128688375 128690032 128693850 ## 128703216 128703812 128715289 128717063 128719864 128722392 128723073 ## 128725028 128725242 128726379 128726948 128729284 128732791 128739575 ## 128741720 128744049 128744779 128748579 128751954 128703812 128715289 ## 128717063 128722392 128723073 128725028 128725242 128726379 128726948 ## 128729284 128732791 128739575 128741720 128744049 128744779 128748579 ## 128751954] ## [ 76678648 76691591 76691974 76692234 76695828 76703832 76708214 ## 76711302 76711795 76714842 76720774 76721503 76721770 76722231 ## 76725286 76726292 76727638 76730105 76731584 76733312 76734358 ## 22737603 22748918 22750459 22820343 114214595 114223922 114232410 ## 114238862 114239672 114244914 114251401 114254209 114257001 114257732 ## 114260381 114262843 114264172 114267055 114269431 114271383 114281978 ## 114284493 114286194 114288721 114290669 114294245 114302612 114214595 ## 114223922 114232410 114238862 114239672 114251401 114254209 114257001 ## 114257732 114260381 114262843 114264172 114267055 114269431 114271383 ## 114281978 114284493 114286194 114288721 114290669 114294245 114294440 ## 114302612 128665826 128685397 128688220 128689906 128693798 128694540 ## 128703614 128715231 128716922 128719741 128722292 128722939 128724783 ## 128725165 128726227 128726841 128729150 128732591 128739479 128741582 ## 128743923 128744671 128748459 128751792 128753837 128715231 128716922 ## 128722292 128722939 128724783 128725165 128726227 128726841 128729150 ## 128732591 128739479 128741582 128743923 128744671 128748459 128751792 ## 128753837] ## [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 ## 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 ## 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 ## 7 7] ## 26 ## [186321632 186324772 186327010 186329214 186329589 186335026 186336501 ## 186337021 186339661 186339924 186343717 123534083 123536992 123541891 ## 125588669 125593689 125600060 103184350 103188831 103189236 103225638 ## 103226268 103228762 103236987 74847008 74847260] ## [186324647 186326933 186329089 186329424 186334879 186336308 186336863 ## 186339594 186339740 186343638 186347019 123536836 123541855 123541998 ## 125590138 125599830 125633612 103188646 103189028 103225473 103226145 ## 103228592 103236824 103265600 74847133 74847579] ## [1 1 1 1 1 1 1 1 1 1 1 2 2 2 3 3 3 4 4 4 4 4 4 4 5 5] ## 33 ## [112073622 112090722 112102107 112103087 112111434 112116600 112128226 ## 112137080 112151290 112155041 112157688 112162944 112163703 112164669 ## 112170862 176449914 176468230 176468871 176489152 176449914 176468230 ## 176468871 176477937 176489152 54456224 54457083 56205570 56207363 ## 56208961 57878241 57913697 58021947 58120989] ## [112090569 112102022 112102885 112111325 112116486 112128142 112136975 ## 112151191 112154662 112157592 112162804 112163625 112164552 112170647 ## 112173249 176468126 176468778 176489058 176491512 176468126 176468778 ## 176477751 176489058 176491512 54456831 54459882 56206995 56208837 ## 56209700 57913469 58021828 58120864 58146990] ## [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 3 3 3 3 3 4 4 5 5 5 6 6 6 6] ## 100 ## [ 54410146 54415746 54420856 54423179 54424445 54429356 54436235 ## 54439471 54442684 54468478 54410146 54415746 54416378 54420856 ## 54423179 54424445 54429356 54436235 54439471 54442684 54468478 ## 132334542 132335893 132342612 132334542 132335893 132342612 132347147 ## 45262912 45267355 45303941 45353348 45396812 45462109 45645710 ## 55237647 55238579 55243417 55247432 55247903 55248179 55250820 ## 55252063 55256389 55259334 55260140 55265683 55272121 55278639 ## 58270907 58271666 58272299 58273172 58284419 58285746 58286729 ## 58287831 58289292 58270907 58271666 58272299 58273172 58284419 ## 58285746 58286729 58287831 58289292 58334798 136957815 136961585 ## 136964126 136969854 136973084 136974839 136975666 136993969 136997720 ## 137013343 137028136 137034097 114603615 114604697 114605495 114607323 ## 114611303 114611766 114612751 114615465 114620605 179663531 179665403 ## 179666987 179668155 179669755 179674926 179676138 179688822 179691839 ## 179696409 179707608] ## [ 54415628 54420630 54423084 54424248 54429239 54436141 54439340 ## 54442455 54468415 54468765 54415640 54416252 54420630 54423084 ## 54424248 54429239 54436141 54439340 54442455 54468415 54468765 ## 132335823 132342450 132362184 132335823 132342450 132347030 132362184 ## 45267190 45303700 45353201 45396593 45461947 45645286 45695770 ## 55238497 55243320 55247291 55247756 55248077 55250637 55251852 ## 55256229 55259179 55259973 55265377 55272042 55278551 55290611 ## 58271483 58272176 58273017 58284319 58285581 58286630 58287658 ## 58289198 58295315 58271483 58272176 58273017 58284319 58285581 ## 58286630 58287658 58289198 58334685 58334884 136961441 136963985 ## 136969725 136972982 136974641 136975548 136993819 136997603 137013233 ## 137027973 137033975 137041680 114604578 114605399 114606909 114610912 ## 114611690 114612661 114615343 114620483 114632123 179665331 179666923 ## 179668030 179669572 179674854 179675972 179688683 179691780 179696279 ## 179707439 179718847] ## [ 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 3 3 3 ## 4 4 4 4 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 ## 6 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 10 10 10 10 ## 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 ## 12 12 12 12] ## 38 ## [46714727 46717716 46719848 46721687 52930006 52935941 52938437 52941341 ## 52943696 52945896 52947416 52957345 52957622 52958359 52958776 52960462 ## 10557575 10621676 31939993 31940288 31940534 31946775 31947330 31948325 ## 31948578 31981316 292560 304661 311962 335163 345928 348274 ## 348841 30103966 30105158 30113866 30114986 30115319] ## [46717632 46719673 46721458 46726459 52935854 52938278 52941283 52943596 ## 52945765 52947301 52957226 52957531 52958263 52958682 52960310 52962519 ## 10621583 10626649 31940078 31940397 31946679 31947190 31948227 31948430 ## 31948780 31981518 304627 311879 335113 345853 348102 348768 ## 350821 30104509 30113770 30114761 30115296 30115501] ## [1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 4 4 5 5 5 5 5 5 5 6 7 7 7 7 7 7 7 8 8 8 8 ## 8] ## 54 ## [ 11105863 35543719 35545010 35547998 35554894 35558997 35565181 ## 35586987 35588051 35604935 35610620 35688325 85130960 85154169 ## 85167971 85180622 33740555 33744833 33745016 33746164 33747956 ## 33748930 33752204 33754551 24547571 24556957 24559383 24563746 ## 24564568 24566976 24569157 24570263 24572926 24576824 24578470 ## 24580178 24581241 24582574 24583930 24589013 24596846 24601436 ## 136582253 136582615 136588313 136589477 136590750 136593217 136594325 ## 136596839 136597646 136599914 136601014 136603825] ## [ 11111909 35544770 35547812 35554810 35558906 35565024 35586872 ## 35587908 35604790 35610496 35688104 35696284 85154104 85167892 ## 85180508 85184544 33744730 33744914 33746018 33747876 33748853 ## 33752128 33754510 33756157 24556834 24559240 24563586 24564429 ## 24566824 24569008 24570130 24572802 24576595 24578337 24580085 ## 24581153 24582476 24583831 24588820 24596100 24601276 24645963 ## 136582402 136588166 136589299 136590574 136593132 136594219 136596669 ## 136596980 136599002 136600900 136603721 136610850] ## [1 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 4 4 4 4 4 4 4 4 7 7 7 7 7 7 7 7 7 7 7 7 7 ## 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8] ## 5 ## [1344201 1345393 1354101 1355221 1355554] ## [1344744 1354005 1354996 1355531 1355736] ## [1 1 1 1 1] ## 11 ## [4077248 4084318 4084871 4085222 4085588 4087243 4087606 4090141 4090555 ## 4092433 4093019] ## [4084181 4084711 4085048 4085399 4087114 4087408 4089935 4090424 4092318 ## 4092522 4093431] ## [1 1 1 1 1 1 1 1 1 1 1] ## 25 ## [3375473 3411316 3413594 3414992 3416853 3420632 3420852 3421060 3421342 ## 3421526 3421759 3422386 3422562 3449749 3450044 3450290 3456531 3457086 ## 3458081 3458334 1616100 1617292 1626003 1627123 1627456] ## [3411142 3413455 3414851 3416763 3420491 3420757 3420948 3421176 3421449 ## 3421667 3422259 3422512 3422710 3449834 3450153 3456435 3456946 3457983 ## 3458186 3458536 1616643 1625907 1626898 1627433 1627638] ## [1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 3 3 3 3 3] ## 44 ## [3732590 3738492 3739256 3741200 3754993 3761084 3761715 3762192 3769193 ## 3774035 3774510 3775213 3777577 3778217 3781837 3787988 3793368 3793893 ## 3804537 3806215 3807071 3808241 1090302 1091223 1091574 1092282 1093070 ## 1093590 1093804 1095319 1095965 1097587 1099200 1100071 1107879 1108404 ## 1108792 1110062 1110611 1114233 1115694 1117230 1118186 1118972] ## [3738477 3739235 3741179 3754972 3761063 3761694 3762168 3769171 3774014 ## 3774489 3775192 3777556 3778178 3781816 3787967 3793347 3793872 3804507 ## 3806182 3807038 3808154 3809930 1091079 1091445 1092154 1092976 1093482 ## 1093687 1095186 1095814 1097509 1099136 1099828 1107687 1108338 1108690 ## 1109891 1110476 1114072 1115673 1117108 1117982 1118887 1119436] ## [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ## 2 2 2 2 2 2 2] ## 5 ## [1397692 1398884 1407591 1408711 1409044] ## [1398235 1407495 1408486 1409021 1409226] ## [1 1 1 1 1] ## 22 ## [874850 875771 876122 876830 877618 878138 878352 879867 880513 882135 ## 883748 884619 892427 892952 893340 894610 895159 898781 900242 901778 ## 902734 903520] ## [875627 875993 876702 877524 878030 878235 879734 880362 882057 883684 ## 884376 892235 892886 893238 894439 895024 898620 900221 901656 902530 ## 903435 903984] ## [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1] ## 5 ## [1452531 1453723 1462431 1463551 1463884] ## [1453074 1462335 1463326 1463861 1464066] ## [1 1 1 1 1] ## 5 ## [1485863 1487055 1495756 1496876 1497209] ## [1486406 1495660 1496651 1497186 1497391] ## [1 1 1 1 1] ## 24 ## [2986690 2987110 2987770 2987992 2988168 2988402 2988692 2988886 2989056 ## 2989409 2989867 2990575 2991427 2991644 2992052 2992648 2993054 2993973 ## 2995277 2996202 2996415 2996846 2997078 2999227] ## [2986963 2987662 2987848 2988108 2988255 2988567 2988783 2989002 2989239 ## 2989575 2990288 2991339 2991531 2991974 2992395 2992856 2993843 2995041 ## 2996127 2996361 2996649 2996960 2999106 2999856] ## [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1] ## 5 ## [1396913 1398105 1406814 1407934 1408267] ## [1397456 1406718 1407709 1408244 1408449] ## [1 1 1 1 1] ## 5 ## [1434426 1435618 1444319 1445439 1445772] ## [1434969 1444223 1445214 1445749 1445954] ## [1 1 1 1 1] ## 2 ## [3017904 3018797] ## [3018686 3020221] ## [1 1] ## 116 ## [ 18535477 18535947 18625145 18630109 18631265 18633652 18674365 ## 18684416 18687621 18688306 20371556 20403345 20406809 20418920 ## 20420454 20421508 20431121 20434608 20438617 20441749 20444476 ## 20445794 20449401 116166743 116166442 116166743 115863080 115874673 ## 115889326 115890550 115892029 115892530 116139985 116140501 116139985 ## 116140501 100612970 100648800 100649853 100652042 100652440 100655728 ## 100656171 100656423 100657355 100658972 100660944 27779888 27788305 ## 27797752 27809453 27824930 27825108 27827222 27831849 27832831 ## 27834065 27835838 27839709 27856013 27856657 27867439 856310 ## 872238 878623 881767 882869 883157 889240 891119 ## 891680 892304 892589 893255 894643 896038 897594 ## 900019 901101 905704 909153 912199 79765388 79818309 ## 79818547 79828698 79833148 79840414 79842185 142985622 142988783 ## 142989560 142989791 142991417 142991866 142997144 142997387 143001026 ## 143001876 102105607 102106498 102106717 102107926 102108270 102108634 ## 102108824 102109101 102109509 102110093 102110329 102112756 102113056 ## 102113251 24323894 24325047 24329198] ## [ 18535884 18624903 18629967 18631138 18633530 18674249 18684293 ## 18687407 18688088 18705835 20403259 20406634 20418673 20420288 ## 20421349 20431025 20434518 20438482 20441343 20444250 20445684 ## 20449237 20449497 116198999 116166578 116198999 115874587 115889073 ## 115890214 115891813 115892371 115897347 116140313 116146024 116146024 ## 116146024 100633911 100649751 100651914 100652375 100655576 100656099 ## 100656260 100657193 100658895 100660855 100661875 27788136 27797649 ## 27809294 27824781 27825017 27827036 27831624 27832684 27833941 ## 27835734 27839583 27855967 27856508 27867356 27868246 872141 ## 878434 881582 882842 882977 889156 891020 891586 ## 892245 892446 893045 894556 895994 897464 899764 ## 901016 905588 908985 912106 912851 79818266 79818405 ## 79828540 79833019 79840284 79842031 79846618 142988632 142989392 ## 142989709 142991322 142991689 142997015 142997296 143000876 143001766 ## 143002032 102106263 102106600 102107785 102108165 102108508 102108709 ## 102109000 102109301 102110020 102110188 102112664 102112900 102113138 ## 102113355 24324859 24329117 24331281] ## [ 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 3 ## 4 4 5 5 5 5 5 5 6 6 7 8 9 9 9 9 9 9 9 9 9 9 9 10 ## 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 ## 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 13 13 13 13 13 13 13 ## 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15] ## 161 ## [ 29963731 29966248 29976337 29980492 29983795 29994976 30008684 ## 156476857 156480885 156516872 156518219 156518531 156520701 156521414 ## 156526951 156549159 156554892 156555870 156556489 156572426 156589186 ## 156619438 156626486 156629579 94214827 94218044 94228275 94230169 ## 94232764 94248268 94252709 94257671 94259153 94268760 94214827 ## 94218044 94228275 94229035 94230169 94232764 94248268 94252709 ## 94257671 94259153 94268760 94273979 93623222 93623697 93625633 ## 93628606 94214827 94217124 94218044 94228275 94230169 94232764 ## 94248268 94252709 94257671 94259153 94214827 94218044 94227316 ## 94228275 94229035 94230169 94232764 94248268 94252709 94257671 ## 94259153 92765304 92774146 92775353 92765304 92774146 92774845 ## 92775353 92776459 81372265 81372787 81374436 81381578 81386619 ## 81388120 81392188 77649293 77708402 77755154 77756733 77762377 ## 77764523 77789590 77797425 77807419 77824380 77830510 77885898 ## 77973277 77975360 77998530 78119157 78131104 78150962 78256555 ## 78636522 80374623 80378344 80380652 80387804 80390973 80394559 ## 80418844 80427552 80430142 80432095 80433564 80435074 80440017 ## 80447734 80456803 80458061 80546135 81332073 81334851 81335069 ## 81335743 81336680 81339559 81340835 81346681 81350163 81355333 ## 81359095 81372787 81374436 81381563 81386619 81388120 81392188 ## 107300651 102223339 102223515 102224785 102228217 102230743 102232901 ## 102233585 102234291 102234689 102235006 102235816 102236231 102236576 ## 102240401 102240835 102242852 102246434 102249269 102249901 102251589] ## [ 29966067 29976171 29980297 29983592 29994794 30008524 30029257 ## 156480723 156516805 156518128 156518457 156520623 156521337 156526870 ## 156549086 156554827 156555801 156556362 156572348 156589082 156619298 ## 156626446 156629506 156685621 94218000 94228086 94229957 94232601 ## 94248069 94252636 94257513 94259030 94268652 94285301 94218000 ## 94228086 94229008 94229957 94232601 94248069 94252636 94257513 ## 94259030 94268652 94273917 94285301 93623663 93625576 93628481 ## 93633509 94217089 94218000 94228086 94229957 94232601 94248069 ## 94252636 94257513 94259030 94285301 94218000 94227241 94228086 ## 94229008 94229957 94232601 94248069 94252636 94257513 94259030 ## 94285301 92774044 92774697 92777506 92774044 92774697 92775221 ## 92776400 92777506 81372668 81374315 81381435 81386504 81388007 ## 81392022 81399199 77708263 77755010 77756513 77762205 77764337 ## 77789341 77797232 77807327 77824190 77830478 77885259 77973094 ## 77975238 77998472 78119077 78130893 78150746 78256435 78636405 ## 79082335 80378213 80380584 80387646 80390931 80394470 80418621 ## 80427407 80430072 80431980 80433421 80434954 80439926 80447614 ## 80456740 80457900 80545994 80551580 81334705 81334962 81335602 ## 81336605 81339462 81340796 81346547 81350060 81355205 81358920 ## 81372668 81374315 81381435 81386504 81388007 81392022 81399199 ## 107302046 102223450 102224664 102228081 102230605 102232731 102233440 ## 102234153 102234496 102234893 102235751 102236080 102236458 102240306 ## 102240703 102242770 102246304 102249207 102249787 102251532 102257071] ## [ 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ## 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 6 6 ## 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 9 ## 9 9 10 10 10 10 10 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 ## 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 ## 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 16 16 16 ## 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16] ## 41 ## [70379185 70414203 70475846 70476382 70488444 70498743 70501376 70512988 ## 70514064 70515555 70515891 70517167 70533486 70536432 70539541 70540101 ## 70540471 70541914 70550879 70551093 70553076 21924404 21925193 21927029 ## 21927448 21927845 21929961 21931346 21937755 21937971 21937988 21938704 ## 22019383 22020245 22020715 22021059 22019383 22020245 22020715 22021059 ## 22021564] ## [70414108 70475773 70476150 70488204 70498591 70501206 70512837 70513888 ## 70515426 70515834 70517037 70533269 70536176 70539444 70540006 70540405 ## 70541738 70550736 70550969 70553042 70570739 21925037 21926929 21927391 ## 21927692 21929836 21931240 21937690 21937922 21937983 21938620 21938860 ## 22020086 22020592 22020948 22021413 22020086 22020592 22020948 22021395 ## 22021778] ## [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 4 ## 4 4 4 4] ## 7 ## [ 42608453 42611967 42612180 42614256 42620347 143822694 143823340] ## [ 42610988 42612070 42614211 42620207 42623494 143823220 143823745] ## [1 1 1 1 1 2 2] ## 52 ## [133569300 133570980 133573014 133573638 133574781 133576322 133577697 ## 133578568 99691322 99694700 99697738 99698846 99699686 99700283 ## 138453743 138454279 138454739 138456200 138457360 138457647 103191944 ## 103204638 103189852 103204638 95737028 95737687 95738991 95765296 ## 95766419 95768462 95772666 95773554 95776280 95778111 95780497 ## 95782143 95782706 95784671 95792278 95795155 95796963 504754 ## 677009 713464 730194 731266 732617 734835 738504 ## 740934 742405 744589] ## [133570878 133572968 133573548 133574715 133576253 133577520 133578439 ## 133579080 99694003 99697609 99698706 99699345 99700166 99700645 ## 138454139 138454665 138456089 138457255 138457630 138458398 103204187 ## 103212838 103204187 103212838 95737519 95738489 95765206 95766282 ## 95768305 95772527 95773495 95776133 95778018 95780417 95782112 ## 95782598 95784608 95792155 95795050 95796822 95797619 676889 ## 710803 730050 731157 732377 734747 738284 740791 ## 742204 744490 745172] ## [1 1 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 4 4 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 ## 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7] ## 12 ## [ 33385864 33386193 33386539 33387090 33395511 33401285 100437869 ## 100447322 100449543 100451921 100456041 101981118] ## [ 33386074 33386401 33386966 33395075 33401234 33402370 100447204 ## 100449377 100451815 100455930 100459402 101983828] ## [1 1 1 1 1 1 2 2 2 2 2 3] ## 118 ## [103912287 103916831 103917085 103917312 103917971 103919065 103919325 ## 103919781 103920100 103920850 103921419 103921682 104005538 104018791 ## 104019873 104103939 104111131 104111708 104112275 104113411 104117943 ## 104118486 104119192 104120152 104120877 104121669 104122421 104123153 ## 104123555 104125356 104126263 104126967 104127317 104128211 104128589 ## 104129144 104129532 104129741 104130002 104130235 104130617 104135341 ## 104136189 104136557 104136885 104139191 104139408 104139711 104140119 ## 104140443 104141012 134146040 134147238 134151199 134155775 134158154 ## 134161860 134165257 134169390 134175079 134179054 104154531 104155737 ## 104156091 104156246 104156580 104156812 104157165 104157442 104157842 ## 104158054 104158280 104158621 104159254 104159475 104159951 104160248 ## 104160581 104160806 104161088 104161275 104161674 104161916 115310720 ## 115327284 115334164 115335763 115337025 115337904 115338557 115340451 ## 115341890 115343117 115344041 115345697 99894463 99915904 99917330 ## 99919037 99922732 99923154 99969656 99991444 99994273 99995277 ## 99995921 99894463 99915904 99917330 99922732 99923154 99969656 ## 99991444 99994273 99995277 99995921 15139408 15144335] ## [103916775 103916945 103917187 103917805 103918949 103919189 103919652 ## 103919989 103920208 103921312 103921589 103921867 104018685 104019806 ## 104103807 104111012 104111599 104112214 104113356 104117795 104118262 ## 104119023 104119940 104120778 104121474 104122231 104123012 104123466 ## 104125153 104126139 104126841 104127234 104127974 104128495 104128967 ## 104129467 104129617 104129930 104130140 104130463 104135115 104136028 ## 104136316 104136691 104139040 104139277 104139609 104140005 104140262 ## 104140883 104141812 134146980 134151068 134155716 134158001 134161487 ## 134165110 134169293 134174960 134178927 134188569 104155644 104156009 ## 104156205 104156481 104156660 104157058 104157283 104157737 104157968 ## 104158141 104158495 104159044 104159333 104159836 104160034 104160411 ## 104160703 104160936 104161205 104161501 104161804 104162008 115327247 ## 115334047 115335655 115336908 115337784 115338385 115340353 115341634 ## 115342974 115343906 115345551 115347963 99915849 99917219 99918973 ## 99922639 99923049 99967857 99991268 99994202 99995181 99995780 ## 100003847 99915849 99917219 99922639 99923049 99967857 99991268 ## 99994202 99995181 99995780 100003847 15144216 15145303] ## [1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ## 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 ## 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 ## 7 7 7 7 7 8 8] ## 140 ## [126678267 126681381 126681898 126682554 126683252 126686739 126691673 ## 126692061 135076737 135077269 135080921 135081570 135083033 135083478 ## 135084014 135084309 135084574 135084793 135085209 135085458 135085778 ## 135086089 135086370 135086523 135086947 135087342 135087533 135087739 ## 135089091 55569306 55570424 55587308 55588333 55591293 55600256 ## 55617023 55626617 55663130 55698715 55700735 55719604 55721652 ## 55755525 55780176 55782957 55826645 55839184 55849823 55892767 ## 55913053 55943353 55945028 55949144 55955649 55973808 55996691 ## 56077201 56089466 56106244 56129035 56138702 56287637 56424050 ## 126086671 126089553 126090408 126091624 126092489 126094132 126097206 ## 126097534 126100769 126103001 126103641 104849665 104850544 104850753 ## 104851372 104853066 104853795 104854212 104855737 104857131 104858741 ## 104859776 104860700 104860859 104861083 104865558 104866463 104871562 ## 104899236 104934739 126086671 126089553 126090408 126091624 126092489 ## 126094132 126097206 126097534 126100769 75576875 75577312 75581488 ## 75583842 75585105 75597269 75601969 75602299 75607105 75607840 ## 75608367 75608873 75609091 75612077 75613004 75620647 75632841 ## 126678267 126681381 126681898 126682554 126683252 126686739 126691673 ## 126692061 126727724 126822181 18835074 18837166 18840900 18875022 ## 18885256 18898855 18903542 18905222 18931484 18937574 18944104] ## [126681263 126681770 126682423 126683037 126686532 126691528 126691906 ## 126694115 135077191 135080855 135081432 135082948 135083400 135083863 ## 135084239 135084384 135084703 135085031 135085309 135085696 135085919 ## 135086301 135086460 135086757 135087265 135087454 135087662 135088987 ## 135090275 55570315 55587152 55588324 55591074 55600079 55616934 ## 55626401 55663002 55698574 55700625 55719491 55721511 55755408 ## 55779951 55782651 55826516 55839090 55849743 55892634 55912859 ## 55943203 55944893 55949123 55955442 55973695 55996582 56077030 ## 56089355 56106124 56128879 56138541 56287571 56423931 56560684 ## 126089408 126090294 126091495 126092366 126094004 126097110 126097309 ## 126100541 126102914 126103521 126107441 104850367 104850692 104851320 ## 104852895 104853728 104854104 104855695 104857047 104858687 104859682 ## 104860508 104860801 104860991 104865462 104866345 104871501 104899162 ## 104934614 104936242 126089408 126090294 126091495 126092366 126094004 ## 126097110 126097309 126100541 126107441 75577236 75581439 75583797 ## 75585036 75597225 75601926 75602215 75606982 75607745 75608283 ## 75608770 75609018 75612011 75612949 75620587 75632746 75634154 ## 126681263 126681770 126682423 126683037 126686532 126691528 126691906 ## 126727565 126822080 126848887 18837040 18840751 18874877 18885136 ## 18898773 18903388 18905112 18931404 18937418 18943953 18948121] ## [1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 ## 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 ## 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 ## 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9] ## 117 ## [ 73087544 73100226 73101670 73101966 73102268 73103513 73104962 ## 73105362 73105779 73106330 70244720 70251467 70253490 70253697 ## 70256066 70260758 70261823 70263229 70265962 70266616 70267686 ## 70269101 70271507 70275305 70277386 70279384 70279824 17298375 ## 17304490 17308264 17312912 17317014 17317758 17323417 17331222 ## 17332557 17332830 17333477 17333662 17337022 17351844 17352530 ## 117015134 117023244 117030739 117031977 117034608 105481812 105483161 ## 105623946 105732934 105758298 105769153 105774707 105776027 105781271 ## 94245839 94250853 94261375 111848519 111851574 111853211 111856045 ## 111857648 111859779 111863243 111863728 111864312 111864464 111865832 ## 111866288 111866870 111887520 111888609 64059590 64060679 64064473 ## 64064751 64065125 64065721 118992349 118997835 118999158 119001664 ## 119002356 119002692 119003283 119003491 119003712 119003929 73882567 ## 73914866 73915490 73933414 73936301 73941444 73942047 73947011 ## 73950301 73957250 73958168 73962063 73962760 119039630 119042182 ## 119043134 119043698 119044807 119045983 119050997 119051966 119053054 ## 126174176 126176639 126201445 126208294 126213312] ## [ 73100156 73101595 73101799 73102188 73103255 73104881 73105280 ## 73105521 73106131 73106488 70251370 70253403 70253623 70255936 ## 70260647 70261768 70263118 70265851 70266505 70267575 70269045 ## 70271437 70275156 70277296 70279206 70279752 70281131 17304335 ## 17308180 17312786 17316870 17317650 17323290 17331118 17332371 ## 17332739 17333418 17333574 17336927 17351673 17352448 17352958 ## 117023156 117030649 117031860 117034485 117038136 105483002 105623706 ## 105732749 105758244 105768994 105774539 105775922 105781160 105782601 ## 94250748 94261249 94265061 111851461 111853063 111855955 111857594 ## 111859728 111863138 111863674 111864219 111864392 111865742 111866126 ## 111866803 111887414 111888500 111889679 64060413 64064349 64064590 ## 64064938 64065581 64066817 118997644 118999060 119001434 119002244 ## 119002539 119003205 119003370 119003573 119003804 119004793 73914772 ## 73915397 73933356 73936249 73941289 73941956 73946945 73950177 ## 73957120 73958123 73961998 73962692 73964536 119042064 119043064 ## 119043609 119044187 119045161 119050401 119051879 119052802 119053826 ## 126176464 126201299 126208180 126213201 126215241] ## [ 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ## 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 5 ## 5 5 5 5 5 5 5 5 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 ## 7 7 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 ## 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 12 12 12 12 12] ## 95 ## [104896327 104897083 104897678 104899994 104900626 104901230 104902007 ## 104905201 104897083 104897678 104899994 104900626 104901230 104902007 ## 104905201 104896327 104897083 104897678 104899994 104900626 104901230 ## 104902007 104903853 104905201 102933143 102935106 102937102 102937296 ## 102954055 102960047 103780547 103797854 103814378 103818452 103866973 ## 103870965 104813700 104815578 104817919 104819403 104820504 104821825 ## 104822732 104825728 104827422 104896327 104897083 104897678 104899994 ## 104900626 104901230 104902007 104905201 61286203 61290746 61291413 ## 61292004 61295657 61300596 61314780 61318935 61323679 65360854 ## 65361345 94906505 94908806 94911073 94911992 94917758 94918656 ## 94923125 94924765 94926686 113670137 113672400 113674003 113674599 ## 113675473 113675768 113677306 113679159 113679976 113683226 113684677 ## 113686104 113688559 113694422 113698082 113700067 113704279 113705057 ## 113711479 113712490 113723355 113725057] ## [104896952 104897568 104899850 104900391 104901056 104901891 104905150 ## 104905833 104897568 104899850 104900391 104901056 104901891 104904934 ## 104905833 104896952 104897568 104899850 104900391 104901056 104901891 ## 104903790 104904934 104905833 102935003 102936997 102937187 102953984 ## 102959955 102962412 103797639 103814179 103818389 103866792 103870778 ## 104034531 104815474 104817809 104819259 104820269 104821651 104822622 ## 104825473 104827323 104839245 104896952 104897568 104899850 104900391 ## 104901056 104901891 104904934 104905833 61290546 61291298 61291834 ## 61295386 61300460 61314648 61318855 61323575 61348261 65360946 ## 65362924 94908661 94910882 94911873 94917583 94918419 94922942 ## 94924567 94926620 94963946 113672204 113673879 113674519 113675394 ## 113675589 113677210 113679019 113679784 113682997 113684606 113685895 ## 113688379 113694326 113697954 113699918 113704141 113704970 113711319 ## 113712384 113723222 113724979 113746166] ## [ 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 ## 4 4 4 4 4 4 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 7 7 7 ## 7 7 7 7 7 8 8 8 8 8 8 8 8 8 9 9 10 10 10 10 10 10 10 10 ## 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11] ## 118 ## [ 9102832 9144906 9147884 9161671 125671412 125834889 125900223 ## 126004171 126068540 126128827 126135499 126137178 62861098 62878013 ## 62887822 62888927 62892828 62894660 62895478 62902260 62918419 ## 62919000 62919882 62926450 62928706 62929489 62931043 62931486 ## 62931956 62932105 62932285 62936978 62938788 62940852 62943610 ## 62946954 62949972 62954893 62959160 62960230 62965362 62972285 ## 62974200 62979281 62981936 6561478 6561785 6562463 6562882 ## 6566910 6568113 6570104 6643827 6644027 6645759 6645956 ## 6646176 6646382 6646556 6647162 50794811 50821692 50822873 ## 50824353 50829407 50831621 50834332 50835426 50848200 50855130 ## 50856413 50860903 50867950 132313198 132322872 132323286 132325401 ## 132326345 132328626 132329745 132329994 132334604 50468027 50471146 ## 50471910 50472360 50472763 50473838 50474372 50474964 50475147 ## 101188805 101295618 101316108 101333229 101336313 101365184 101368667 ## 101381448 101413918 101430928 101433854 101436246 101437413 101442179 ## 101473053 101477596 101480602 101488070 101490425 101491486 101491723 ## 101493498 101504334 101505488 101510576 101514403 101520852] ## [ 9144801 9147714 9161570 9162021 125833997 125900076 126003984 ## 126068396 126128621 126135228 126136986 126138110 62877949 62887694 ## 62888795 62892698 62894562 62895352 62902065 62918294 62918863 ## 62919728 62926217 62928624 62929304 62930930 62931381 62931875 ## 62932031 62932194 62936876 62938677 62940676 62943447 62946660 ## 62949773 62954270 62959016 62960101 62965171 62972224 62974076 ## 62979073 62981853 62986365 6561716 6562232 6562612 6566571 ## 6567810 6570020 6571199 6643975 6645659 6645849 6646085 ## 6646266 6646474 6646749 6647266 50821544 50822717 50824277 ## 50829270 50831517 50834221 50835372 50848096 50854917 50856364 ## 50860741 50867781 50869308 132322739 132323156 132325117 132326168 ## 132328541 132329662 132329841 132334346 132335469 50470995 50471782 ## 50472203 50472706 50473684 50474280 50474884 50475042 50475327 ## 101295423 101316003 101333092 101336154 101365083 101368622 101381316 ## 101413811 101430872 101433732 101436111 101437316 101442118 101472970 ## 101477455 101480437 101488033 101490313 101491428 101491625 101493355 ## 101504181 101505340 101510456 101514297 101520656 101521638] ## [1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ## 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 7 ## 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 ## 9 9 9 9 9 9 9] ## 68 ## [ 12815404 12837441 12848445 133418182 133419669 133420720 133423716 ## 133424741 133425310 133428323 133430159 133433216 133434145 133435813 ## 133438220 133446420 133447369 133448980 133454240 133463926 44902767 ## 44914012 44915959 44917267 44926504 45001047 45004753 45059392 ## 45097637 45105177 45108524 45168632 45169933 45170907 45171097 ## 45173542 45173805 45209919 45269136 45269683 56151337 56154424 ## 56182927 56184376 56188171 56188664 56189860 56194413 56194684 ## 56197512 96394884 96396842 96397698 96400187 96402926 96407036 ## 96407631 96408777 96409472 96410892 96411358 96412681 96413018 ## 96414915 96416029 96418325 96421342 96422963] ## [ 12837284 12848392 12848998 133419596 133420612 133423628 133424670 ## 133425226 133428203 133430016 133433053 133433990 133435653 133438052 ## 133446204 133447309 133448870 133454140 133463781 133464132 44913787 ## 44915782 44917073 44926363 45000951 45004630 45059266 45097508 ## 45105074 45108432 45168529 45169804 45170824 45171024 45173445 ## 45173631 45209768 45269007 45269597 45270076 56154334 56182858 ## 56184350 56188142 56188590 56189808 56194345 56194637 56197412 ## 56211449 96396737 96397615 96400091 96402871 96406965 96407527 ## 96408632 96409360 96410821 96411334 96412540 96412945 96414862 ## 96415924 96418256 96421221 96422832 96429138] ## [1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ## 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5] ## 67 ## [115080118 115086707 31192193 31196029 31205611 31211994 31216894 ## 31221194 31227442 103498704 103504643 103506222 103506724 103508462 ## 103510768 103514064 103515453 103518261 103518731 103519195 103520607 ## 103524748 103525693 50656693 111768038 111806338 111857720 111862349 ## 111870227 111885640 111896313 111896641 111920017 111926299 111927137 ## 111928025 111930020 111932697 111933024 111935710 111938587 111940790 ## 49550313 49580425 49649500 49688867 49705510 49710737 49712941 ## 49720071 49741439 49742887 49746232 49748695 49749677 49752790 ## 49760238 49761326 49762769 49765256 49765520 49771126 49772010 ## 49772401 49772710 49776102 49777420] ## [115086584 115089262 31195900 31204971 31211880 31216764 31221068 ## 31227284 31231610 103504467 103506106 103506637 103508401 103510624 ## 103513856 103514379 103518016 103518611 103518981 103520462 103524547 ## 103525608 103527656 50678839 111806251 111857635 111862218 111870025 ## 111885551 111896218 111896545 111919894 111926160 111927077 111927878 ## 111929933 111932618 111932884 111935485 111938493 111940700 111944464 ## 49580287 49649424 49688790 49705272 49710467 49712882 49719913 ## 49741379 49742748 49746178 49748570 49749502 49752703 49760099 ## 49761257 49762650 49765150 49765344 49771012 49771860 49772117 ## 49772497 49775935 49777292 49781216] ## [1 1 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 ## 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6] ## 73 ## [99447002 99449507 99449743 99452732 99457463 99460061 99460929 99461719 ## 99462545 99476758 99478194 99479141 99481776 99482010 99483784 99484040 ## 99489863 99498314 99500893 99502367 99505776 99508285 99512776 99515386 ## 99515802 99519790 99520265 99520631 99532223 99532926 99533881 99534261 ## 99535385 99536153 99537346 99538085 99538878 99540477 99540801 99540965 ## 99549864 99550515 99554154 99554745 99555366 99556960 99566649 99567757 ## 99573342 99574400 99575625 99578173 99582511 99607805 21861661 21861965 ## 21866930 21867794 52707362 52707951 52709999 52710395 52711038 52715206 ## 52718122 52719026 52722604 52725367 52725527 52726827 52728127 52728308 ## 52730383] ## [99449368 99449642 99452541 99457252 99459914 99460893 99461605 99462422 ## 99476651 99478125 99479083 99481560 99481896 99483601 99483902 99489747 ## 99498177 99500845 99502300 99505661 99508151 99512658 99515272 99515623 ## 99519678 99520181 99520484 99532151 99532800 99533811 99534145 99535295 ## 99536066 99537224 99537961 99538785 99540411 99540613 99540885 99549741 ## 99550432 99554031 99554541 99555225 99556885 99566581 99567582 99573207 ## 99574304 99575555 99578090 99582421 99607688 99630037 21861773 21866798 ## 21867641 21872056 52707824 52709864 52710251 52710935 52715155 52718050 ## 52718825 52722549 52725280 52725459 52726743 52728029 52728214 52730209 ## 52733677] ## [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] ## 10 ## [94463917 94464581 94466011 94467669 94469700 94471317 63671765 63735886 ## 63747853 63749934] ## [94464344 94465928 94467490 94469568 94471200 94474954 63735827 63747688 ## 63749838 63757595] ## [1 1 1 1 1 1 2 2 2 2] ## 37 ## [ 58430875 58458998 58465404 58467235 58471544 45695716 45697703 ## 45699421 45702728 45706978 45707977 45709597 45710880 66586512 ## 66587479 66601182 66604238 66606455 66607553 66610956 66613070 ## 66615272 66615923 66618702 66621462 66621737 66624358 66625248 ## 101420211 101425576 101427917 101436251 101438390 101440964 101445892 ## 101447483 101448687] ## [ 58458871 58465266 58467116 58471326 58476159 45697517 45699226 ## 45702569 45706768 45707784 45709466 45710754 45713240 66587325 ## 66601046 66604061 66606376 66607373 66610786 66612908 66615024 ## 66615830 66618168 66621307 66621558 66624212 66625073 66625341 ## 101425471 101427776 101436137 101438287 101440779 101445727 101447325 ## 101448612 101454905] ## [1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4] ## 49 ## [ 65871997 65874357 65877226 65884069 65885910 65888163 65890801 ## 65891328 65892267 65897574 65899780 65871997 65874357 65877226 ## 65884069 65885910 65888163 65890801 65891328 65892267 65897574 ## 65899780 25584404 25585375 25599573 25599830 25601203 25602043 ## 25605674 25616959 25620910 25650649 25652375 25654354 25657118 ## 102277572 65033199 65033441 65040727 65041349 65041692 65042580 ## 65043837 101811850 101813061 101814700 101814886 101815566 101816880] ## [ 65874291 65877107 65883935 65885765 65888070 65890658 65891209 ## 65892111 65897466 65899639 65903023 65874291 65877107 65883935 ## 65885765 65888070 65890658 65891209 65892111 65897466 65899639 ## 65903133 25585231 25599499 25599674 25601038 25601837 25605529 ## 25615712 25620611 25650607 25652213 25654234 25657054 25683635 ## 102284643 65033371 65040617 65041198 65041629 65042541 65043759 ## 65067431 101812968 101814624 101814796 101815459 101816745 101817546] ## [1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 ## 5 5 5 5 5 5 6 6 6 6 6 6] ## 38 ## [29985969 29989225 29989481 29989674 29990165 29990391 29990629 29990829 ## 29993075 29993261 29994222 29994653 29994985 29996899 29997182 66461334 ## 66503768 66511613 66516818 66969614 66972144 66973261 66974258 66974598 ## 66975125 66975549 66975751 66976152 66976688 66977274 452043 455024 ## 456397 457560 460367 460784 461076 461578] ## [29989058 29989409 29989572 29990119 29990294 29990515 29990737 29992981 ## 29993179 29994054 29994392 29994823 29996533 29996978 29997585 66503504 ## 66511462 66516780 66526864 66971939 66973119 66974124 66974339 66975026 ## 66975408 66975670 66976007 66976550 66977201 66977741 454955 456345 ## 457424 460242 460690 460971 461360 461889] ## [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 ## 4] ## 48 ## [74706436 74708998 74709302 74726314 74729657 75263921 75267833 75269884 ## 75270896 75271242 75276988 75263921 75267833 75269884 75270896 75271242 ## 75276988 75286296 28854469 28855176 28855422 28855655 28855872 28856183 ## 28856376 28856801 28857427 97557 101645 2204923 58701391 58704071 ## 58705148 58706147 58709958 58710250 58711328 58712378 58712798 58714145 ## 58718082 27802788 27818875 27835236 27840277 27856382 27895959 27974524] ## [74708857 74709221 74726239 74729195 74734350 75267743 75268786 75270779 ## 75271080 75276367 75299722 75267743 75268786 75270779 75271080 75276811 ## 75286132 75299722 28855056 28855270 28855634 28855739 28856018 28856271 ## 28856634 28857232 28857538 101557 103475 2205143 58704016 58704948 ## 58705999 58709843 58710192 58711229 58712236 58712599 58713760 58717858 ## 58718620 27818807 27835182 27840109 27856270 27895806 27974476 28074396] ## [1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 5 5 6 7 7 7 7 7 7 7 ## 7 7 7 7 8 8 8 8 8 8 8] ## 29 ## [48610346 48614479 48615558 48616325 48616676 48617695 48618423 48618694 ## 48619055 35767583 35771477 35783715 35787108 35797930 35800763 35802753 ## 35804870 35818689 35822225 35825645 35827629 35830636 35831241 35834734 ## 47572845 47579566 47584020 47588026 47589414] ## [48613781 48615439 48616244 48616547 48617607 48618153 48618589 48618824 ## 48619204 35771355 35783608 35787048 35797838 35800605 35802664 35804797 ## 35818625 35822181 35825534 35827557 35830503 35831197 35834660 35836901 ## 47579424 47583660 47587773 47589253 47590069] ## [1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3] ## 92 ## [19247170 19250644 19251193 19261264 19263701 37922746 37934020 37949186 ## 37985741 37988404 37922746 37947836 37949186 37985741 37988404 38175898 ## 38176186 38176606 38178307 38178737 38179079 38179648 38182584 38182999 ## 38183287 38183718 38184199 38185221 38186112 38187498 38187873 38188343 ## 38189015 38189459 38189709 38191602 38192048 38209633 38209888 60023961 ## 60024378 60028359 60030474 60032928 60033199 60033842 60038451 60039140 ## 60040332 60042829 60044012 60045619 60050249 60060475 60061728 60062226 ## 60062451 60064489 60069982 60072726 60088594 60107012 60107374 60108999 ## 60111345 60112969 60130066 60140662 57060282 57076820 57079075 57089807 ## 57093160 57094785 57106084 57109451 57119259 57125180 57126754 57128689 ## 57134415 57138469 57140009 57141766 57148308 57153075 57157238 57158580 ## 57161450 57165768 57168701 57181755] ## [19250581 19251096 19261152 19263632 19265819 37933903 37948925 37985639 ## 37988350 38020372 37947668 37948925 37985639 37988350 38020372 38176037 ## 38176525 38178207 38178646 38178897 38179383 38182408 38182899 38183108 ## 38183635 38184161 38185078 38186000 38187411 38187790 38188295 38188901 ## 38189308 38189597 38191369 38191974 38209550 38209721 38210613 60024277 ## 60028185 60030325 60032742 60033040 60033699 60038227 60038948 60040112 ## 60042366 60043822 60045395 60050087 60059558 60061531 60062011 60062360 ## 60064367 60069900 60072512 60087910 60106901 60107211 60108804 60111147 ## 60112823 60129897 60140427 60142500 57076741 57078958 57089688 57092970 ## 57094656 57105775 57109256 57119173 57125043 57126538 57128574 57134235 ## 57138392 57139927 57141715 57148183 57153007 57157114 57158457 57161362 ## 57165651 57168660 57181653 57183801] ## [1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 ## 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 ## 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6] ## 75 ## [32621625 32650286 32677555 32682123 32707051 32712154 51796031 51797855 ## 51800460 51804225 51807273 51809385 51810383 51813781 51818408 55297750 ## 55309284 56530398 56532811 56587865 56601846 56606853 56615461 56621031 ## 56646399 56648849 77160479 77171501 77193738 77208984 77211126 77211816 ## 77221366 77160479 77171501 77193738 77208984 77211126 77211816 77221366 ## 77227582 61254684 61256066 61256949 61261731 61262418 61254684 61256066 ## 61256976 61261731 61262418 61254684 61256066 61256949 61259710 61260205 ## 61261731 61262418 66382598 66383831 66402003 66504606 66506163 66513658 ## 66542022 66564665 66678341 66465418 66504606 66506163 66513658 66542022 ## 66564665 66678341 72923198] ## [32650158 32677409 32681909 32706911 32711995 32720258 51797729 51800295 ## 51804072 51807036 51809206 51810291 51813650 51818202 51820018 55308790 ## 55335237 56532701 56585502 56601664 56606676 56615298 56620749 56646286 ## 56648701 56651203 77170402 77193578 77208781 77210953 77211675 77221310 ## 77227449 77170402 77193578 77208781 77210953 77211675 77221310 77227449 ## 77287527 61255884 61256889 61261588 61262262 61264192 61255884 61256889 ## 61261588 61262262 61264192 61255884 61256889 61259581 61260087 61261588 ## 61262262 61264192 66383764 66401970 66503985 66505942 66513549 66541905 ## 66564455 66678170 66721266 66503985 66505942 66513549 66541905 66564455 ## 66678170 66721266 72997402] ## [ 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 3 3 4 4 4 4 4 4 4 ## 4 4 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 7 7 7 7 7 8 8 ## 8 8 8 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 11 11 11 11 11 ## 11 11 12] ## 69 ## [45409098 45409924 45411209 10564005 10565598 10568778 10570174 10570435 ## 10571779 10572356 10572675 10574651 14800962 14804306 14805945 14806473 ## 14810093 14815982 14817585 14826282 14827050 14827901 14828545 40973212 ## 40978697 40993755 40996155 40998961 41000884 41003511 41007940 41008222 ## 41008414 41008840 41010039 41012293 41019461 41021355 41026058 41029546 ## 41035038 41038678 41040250 41055319 41056233 41060331 41060552 41062194 ## 41063309 41066309 41071467 41071651 41072265 41074188 41075632 41076634 ## 41078098 41078286 56186801 56190221 56197011 56200360 56201316 56203423 ## 56204162 56204403 56206349 54135388 54137939] ## [45409858 45411016 45411789 10565504 10568554 10570075 10570270 10571679 ## 10572201 10572552 10574468 10577562 14804262 14805821 14806377 14810010 ## 14815865 14817497 14826193 14826923 14827805 14828468 14829039 40978513 ## 40993603 40995981 40998869 41000803 41003395 41007827 41008034 41008296 ## 41008681 41009736 41012142 41018512 41021217 41025307 41029343 41034947 ## 41038531 41039986 41055094 41056143 41060052 41060421 41061989 41062928 ## 41066064 41071328 41071566 41072068 41073568 41075562 41076341 41077924 ## 41078243 41081316 56189892 56196761 56200235 56201232 56203119 56204051 ## 56204319 56206091 56206513 54137784 54139849] ## [1 1 1 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 ## 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 6 6] ## 36 ## [10597494 10600044 10600529 10602938 10610756 7990443 12542794 12543251 ## 12544011 51518208 51518806 51519412 51520546 51522398 17434693 17436195 ## 17438154 17438378 17438689 17439792 17440640 17440823 17441060 17441313 ## 17441798 17442024 17442220 17443835 17444048 17444363 17444609 9764557 ## 9767329 9768811 9770143 9771550] ## [10599867 10600323 10602252 10610070 10613372 7990851 12543190 12543884 ## 12551725 51518672 51519137 51520365 51522298 51523075 17435525 17438043 ## 17438246 17438497 17438970 17440565 17440767 17440933 17441160 17441636 ## 17441896 17442103 17443738 17443909 17444230 17444498 17445373 9767222 ## 9768684 9770054 9771395 9785690] ## [1 1 1 1 1 2 3 3 3 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6] ## 23 ## [61341273 61386238 61389708 18488313 18491700 18492926 18496380 18505313 ## 18505664 18506576 18507175 18508255 18511447 18513388 18516386 18523046 ## 18523816 18526677 18529414 18531819 18535034 18535817 55100113] ## [61386036 61389617 61391369 18491465 18492868 18496293 18505076 18505578 ## 18506431 18507016 18508139 18511323 18513307 18516296 18522939 18523662 ## 18526599 18529252 18531732 18534878 18535751 18541294 55100859] ## [1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3] ## 34 ## [ 1456981 1458048 1459252 1460710 44691528 44692319 44693867 44695820 ## 44697277 44699175 44708092 44691528 44692319 44693867 44695820 44697277 ## 44698877 44699175 44708092 47731430 47732404 47733785 47734633 47734945 ## 47736665 47739772 47741142 47752468 47768284 47770608 47790806 57036610 ## 57042714 57045803] ## [ 1457982 1458910 1460344 1471920 44691975 44693667 44695693 44697140 ## 44698848 44708025 44718455 44691975 44693667 44695693 44697140 44698848 ## 44699020 44708025 44718455 47732318 47733662 47734313 47734869 47736518 ## 47739628 47740911 47752369 47768118 47770469 47790731 47804652 57042161 ## 57045664 57089714] ## [1 1 1 1 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5] ## 65 ## [38445783 38459701 38460175 38460646 38461186 38462586 38463713 38466390 ## 38467744 38468943 38480746 38494279 38495328 38497042 38498443 38501363 ## 38505066 38507814 38511014 38512973 38516945 38519903 38520947 38522470 ## 38523184 38524329 38525577 38529208 38529516 38532047 38533160 38534365 ## 38536517 38538917 38539922 38545046 38555215 38558075 38559446 38560896 ## 38563725 38564514 38568337 38569997 38570326 38572625 22519569 22583010 ## 22652972 22656720 22658732 22664561 22696820 22707985 22710854 22746333 ## 27012200 27056260 27062285 27066220 27071191 27074581 27078398 27081761 ## 27084694] ## [38459546 38460132 38460495 38461098 38462532 38463592 38466304 38467649 ## 38468880 38480691 38494116 38495282 38496918 38498379 38501302 38504981 ## 38507679 38510933 38512860 38516824 38519780 38520845 38522377 38523119 ## 38524192 38525250 38528956 38529462 38532000 38533103 38534291 38536352 ## 38537851 38539856 38544896 38555075 38558006 38559349 38560795 38563634 ## 38564412 38567975 38569870 38570182 38572532 38573740 22582859 22652897 ## 22656513 22658588 22664423 22696702 22707824 22710708 22746182 22757923 ## 27056194 27062177 27066067 27070988 27074481 27078290 27081745 27084651 ## 27086542] ## [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3] ## 16 ## [27254082 27264180 27269985 27284274 27327003 27328069 27347541 27348341 ## 27354790 27369731 27372497 27394358 27423509 27425664 27462388 27484463] ## [27264033 27269884 27284052 27326903 27327940 27347382 27348266 27354656 ## 27369674 27372329 27394155 27423315 27425551 27462258 27484295 27542881] ## [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1] ## 40 ## [45148507 45182486 45198044 45204318 45210638 45218349 45221473 45241222 ## 45243930 45244940 45255714 30000101 30032865 30038274 30050714 30051665 ## 30054253 30057328 30061053 30064435 30067937 30069475 30070930 30074312 ## 30077590 30079053 30000101 30038274 30050714 30051665 30054253 30057328 ## 30061053 30064435 30067937 30069475 30070930 30074312 30077590 30079053] ## [45182336 45197956 45204186 45210551 45218250 45221362 45241148 45243852 ## 45244811 45255610 45258154 30032739 30038190 30050645 30051582 30054177 ## 30057193 30060978 30064321 30067814 30069257 30070824 30074184 30077427 ## 30079008 30090740 30038190 30050645 30051582 30054177 30057193 30060978 ## 30064321 30067814 30069257 30070824 30074184 30077427 30079008 30090740] ## [1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 ## 3 3 3] ## 19 ## [41642676 41645455 41645821 41647113 41648995 41650498 41652109 41652294 ## 41652828 41654110 41657584 41660847 41664160 41670731 41677086 41681157 ## 42306151 42306843 42307353] ## [41645333 41645732 41647010 41648875 41650311 41652024 41652194 41652714 ## 41653951 41657449 41660667 41664100 41670603 41676936 41680904 41681547 ## 42306411 42307219 42310141] ## [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2] ## 76 ## [ 16804712 16837000 16838378 16846387 16847893 16850865 16852480 ## 16855808 16858039 48916590 48919589 48919856 48920132 48921532 ## 48922195 48922629 48923159 48923376 52780395 52781826 52782379 ## 52783010 52784926 52787066 52789525 79676062 79694231 131157435 ## 131157687 131197517 131202351 131202597 131203691 131205245 131206389 ## 131206903 131207121 131157687 131188889 131197517 131202351 131202597 ## 131205245 131206389 131206903 131207121 106765713 106768882 106769966 ## 106773741 106776780 106789071 106793386 106796156 106797734 106803623 ## 106804083 106806430 106808296 106819689 106841372 133941738 133948879 ## 133963312 133979278 133979431 133981505 133982001 133941371 133941738 ## 133948879 133963312 150884697 150885871 150889973 150890453] ## [ 16836696 16838286 16846216 16847698 16850745 16852405 16855715 ## 16857943 16859550 48919489 48919765 48919998 48921391 48921900 ## 48922566 48922984 48923277 48924711 52781737 52782264 52782914 ## 52784876 52786930 52789420 52789990 79694108 79698020 131157535 ## 131197460 131202242 131202439 131203505 131205096 131206295 131206840 ## 131206984 131208162 131188658 131197460 131202242 131202439 131205096 ## 131206295 131206840 131206984 131208162 106768824 106769811 106773638 ## 106776734 106788966 106793278 106796024 106797614 106803486 106803956 ## 106806340 106808116 106819544 106840550 106843532 133948800 133963255 ## 133979234 133979376 133981412 133981912 133988120 133941569 133948800 ## 133963255 133966974 150885743 150889866 150890374 150891099] ## [ 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 ## 3 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 7 7 ## 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 9 9 9 9 ## 10 10 10 10] ## 70 ## [130407905 130408180 130408851 130409260 130409739 130410222 130411200 ## 130412108 130412725 130413149 130413315 130415312 130415918 130416711 ## 130417238 130419440 130420022 130420715 130419440 130420022 130420437 ## 130420715 131339615 131348474 131351834 134023222 134031064 134033195 ## 134033564 152160265 152663330 152664378 100265696 100274059 100274392 ## 100275577 100276304 100277051 100278605 100290672 100292062 100293040 ## 100296360 100297301 100306722 19554576 19555898 19560311 19568201 ## 19587306 19606920 19610265 19613118 19626163 19650076 19663593 ## 19702146 19705809 19713859 19725102 19764559 19854400 9693880 ## 9707759 9709495 9711713 9714193 9716706 9727466 9728866] ## [130408056 130408572 130408972 130409451 130409934 130410912 130411829 ## 130412434 130413116 130413244 130415191 130415639 130416417 130416953 ## 130419152 130419740 130420578 130423187 130419740 130420410 130420578 ## 130423187 131348161 131351023 131351943 134030846 134033119 134033309 ## 134049211 152160459 152664164 152666701 100273959 100274272 100275475 ## 100276089 100276956 100278458 100290601 100291962 100292905 100296305 ## 100297030 100306239 100306805 19555834 19560042 19568091 19587220 ## 19606760 19610184 19613066 19626055 19649981 19663517 19701940 ## 19705734 19713729 19724998 19764435 19854242 19905424 9707524 ## 9709377 9711604 9714083 9716613 9727371 9728756 9733607] ## [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 3 3 3 4 4 4 4 5 6 6 7 7 7 7 7 ## 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9] ## +--------------+-----------+-----------+------------+-------------+-----------------+--------------+--------------+-------------------+ ## | Chromosome | Start | End | Feature | gene_id | transcript_id | Strand | ExonNumber | transcript_name | ## | (object) | (int32) | (int32) | (object) | (float64) | (float64) | (category) | (float64) | (object) | ## |--------------+-----------+-----------+------------+-------------+-----------------+--------------+--------------+-------------------| ## | chr1 | 12227 | 12612 | intron | 0.0 | 0.0 | + | nan | NR_148357 | ## | chr1 | 12721 | 13220 | intron | 0.0 | 0.0 | + | nan | NR_148357 | ## | chr1 | 12227 | 12612 | intron | 1.0 | 1.0 | + | nan | NR_046018 | ## | chr1 | 12721 | 13220 | intron | 1.0 | 1.0 | + | nan | NR_046018 | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | chrX | 9714193 | 9716613 | intron | 361.0 | 361.0 | - | nan | NM_000273 | ## | chrX | 9716706 | 9727371 | intron | 361.0 | 361.0 | - | nan | NM_000273 | ## | chrX | 9727466 | 9728756 | intron | 361.0 | 361.0 | - | nan | NM_000273 | ## | chrX | 9728866 | 9733607 | intron | 361.0 | 361.0 | - | nan | NM_000273 | ## +--------------+-----------+-----------+------------+-------------+-----------------+--------------+--------------+-------------------+ ## Stranded PyRanges object has 4,128 rows and 9 columns from 30 chromosomes. tile_genome splits a PyRanges of chromosome sizes into a tiled genome. import pyranges as pr cs = pr.data.chromsizes() print(cs) # can also do # pip install pyranges_db as db # cs = db.ucsc.chromsizes(&quot;hg19&quot;) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (category) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 0 | 249250621 | ## | chr2 | 0 | 243199373 | ## | chr3 | 0 | 198022430 | ## | chr4 | 0 | 191154276 | ## | ... | ... | ... | ## | chrY | 0 | 59373566 | ## | chrX | 0 | 155270560 | ## | chrM | 0 | 16571 | ## | chr22 | 0 | 51304566 | ## +--------------+-----------+-----------+ ## Unstranded PyRanges object has 25 rows and 3 columns from 25 chromosomes. tile_size = int(1e6) print(pr.gf.tile_genome(cs, tile_size, tile_last=False)) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (category) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 0 | 1000000 | ## | chr1 | 1000000 | 2000000 | ## | chr1 | 2000000 | 3000000 | ## | chr1 | 3000000 | 4000000 | ## | ... | ... | ... | ## | chrY | 56000000 | 57000000 | ## | chrY | 57000000 | 58000000 | ## | chrY | 58000000 | 59000000 | ## | chrY | 59000000 | 59373566 | ## +--------------+-----------+-----------+ ## Unstranded PyRanges object has 3,114 rows and 3 columns from 25 chromosomes. print(pr.gf.tile_genome(cs, tile_size, tile_last=True)) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (category) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 0 | 1000000 | ## | chr1 | 1000000 | 2000000 | ## | chr1 | 2000000 | 3000000 | ## | chr1 | 3000000 | 4000000 | ## | ... | ... | ... | ## | chrY | 56000000 | 57000000 | ## | chrY | 57000000 | 58000000 | ## | chrY | 58000000 | 59000000 | ## | chrY | 59000000 | 60000000 | ## +--------------+-----------+-----------+ ## Unstranded PyRanges object has 3,114 rows and 3 columns from 25 chromosomes. genome_bounds removes all intervals in the PyRanges which are outside the genome bounds. If the flag clip is used, the parts of the intervals which are inside the boundaries are kept. import pyranges as pr cs = pr.data.chromsizes() gr = pr.data.chipseq() print(cs) # can also do # pip install pyranges_db as db # cs = db.ucsc.chromsizes(&quot;hg19&quot;) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (category) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 0 | 249250621 | ## | chr2 | 0 | 243199373 | ## | chr3 | 0 | 198022430 | ## | chr4 | 0 | 191154276 | ## | ... | ... | ... | ## | chrY | 0 | 59373566 | ## | chrX | 0 | 155270560 | ## | chrM | 0 | 16571 | ## | chr22 | 0 | 51304566 | ## +--------------+-----------+-----------+ ## Unstranded PyRanges object has 25 rows and 3 columns from 25 chromosomes. print(pr.gf.genome_bounds(gr, cs, clip=True)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 10,000 rows and 6 columns from 24 chromosomes. print(pr.gf.genome_bounds(gr, cs)) ## +--------------+-----------+-----------+------------+-----------+--------------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (category) | (int32) | (int32) | (object) | (int64) | (category) | ## |--------------+-----------+-----------+------------+-----------+--------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | chr1 | 144227079 | 144227104 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 15224235 | 15224260 | U0 | 0 | - | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+--------------+ ## Stranded PyRanges object has 9,979 rows and 6 columns from 24 chromosomes. random creates a random PyRanges from the PyRanges of chromosome sizes given: pr.random(n=1000, length=100, chromsizes=None, strand=True) ## +--------------+-----------+-----------+--------------+ ## | Chromosome | Start | End | Strand | ## | (category) | (int32) | (int32) | (category) | ## |--------------+-----------+-----------+--------------| ## | chr1 | 87258789 | 87258889 | + | ## | chr1 | 108201158 | 108201258 | + | ## | chr1 | 115454033 | 115454133 | + | ## | chr1 | 193257244 | 193257344 | + | ## | ... | ... | ... | ... | ## | chrY | 19338735 | 19338835 | - | ## | chrY | 57134831 | 57134931 | - | ## | chrY | 46789858 | 46789958 | - | ## | chrY | 47027983 | 47028083 | - | ## +--------------+-----------+-----------+--------------+ ## Stranded PyRanges object has 1,000 rows and 4 columns from 24 chromosomes. if no chromsize is given, hg19 is used (from pr.data.chromsizes). "],
["fetching-gene-tracks-as-pyranges.html", "27 Fetching gene tracks as PyRanges", " 27 Fetching gene tracks as PyRanges PyRanges can fetch data from UCSC, GENCODE and Ensembl through the pyranges_db add-on package. It can be installed with pip install pyranges_db. Each database contains at least two methods, namely genes and genomes. UCSC and Ensembl also has the method chromosome_sizes. The genes-methods all take a boolean flag head. If true, it only fetches a few thousand rows of data. import pyranges_db as pr_db genomes = pr_db.ucsc.genomes() print(genomes.head()) ## Genome ## 0 acaChl1 ## 1 ailMel1 ## 2 allMis1 ## 3 allSin1 ## 4 amaVit1 chr_sizes = pr_db.ucsc.chromosome_sizes(&quot;hg38&quot;) print(chr_sizes) ## +------------------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (category) | (int32) | (int32) | ## |------------------------+-----------+-----------| ## | chr1 | 0 | 248956422 | ## | chr1_GL383518v1_alt | 0 | 182439 | ## | chr1_GL383519v1_alt | 0 | 110268 | ## | chr1_GL383520v2_alt | 0 | 366580 | ## | ... | ... | ... | ## | chrY_KZ208924v1_fix | 0 | 209722 | ## | chrY_KZ208923v1_fix | 0 | 48370 | ## | chrY_KN196487v1_fix | 0 | 101150 | ## | chrY_KI270740v1_random | 0 | 37240 | ## +------------------------+-----------+-----------+ ## Unstranded PyRanges object has 595 rows and 3 columns from 595 chromosomes. genes = pr_db.ucsc.genes(&quot;hg38&quot;, head=True) print(genes) ## +--------------+-----------+-----------+--------------+--------------+-----------------+--------------+--------------+-------------------+ ## | Chromosome | Start | End | Feature | gene_id | transcript_id | Strand | ExonNumber | transcript_name | ## | (category) | (int32) | (int32) | (category) | (category) | (float64) | (category) | (float64) | (category) | ## |--------------+-----------+-----------+--------------+--------------+-----------------+--------------+--------------+-------------------| ## | chr1 | 12716114 | 12728759 | gene | AADACL3 | nan | + | nan | nan | ## | chr1 | 6785323 | 7769706 | gene | CAMTA1 | nan | + | nan | nan | ## | chr1 | 10430746 | 10442815 | gene | CENPS | nan | + | nan | nan | ## | chr1 | 10430746 | 10452003 | gene | CENPS-CORT | nan | + | nan | nan | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | chrY | 18546687 | 18773718 | gene | HSFY1 | nan | + | nan | nan | ## | chrY | 18546687 | 18547300 | exon | HSFY1 | 244.0 | + | 0.0 | NM_033108 | ## | chrY | 18546687 | 18548592 | transcript | HSFY1 | 244.0 | + | nan | NM_033108 | ## | chrY | 18547778 | 18548592 | exon | HSFY1 | 244.0 | + | 1.0 | NM_033108 | ## +--------------+-----------+-----------+--------------+--------------+-----------------+--------------+--------------+-------------------+ ## Stranded PyRanges object has 5,858 rows and 9 columns from 54 chromosomes. "]
]
