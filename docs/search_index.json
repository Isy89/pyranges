[
["index.html", "PyRanges documentation 1 Introduction to PyRanges", " PyRanges documentation Endre Bakken Stovner 2019-01-18 1 Introduction to PyRanges PyRanges are collections of intervals that support comparison operations (like overlap and intersect) and other methods that are useful for genomic analyses. The ranges can have an arbitrary number of meta-data fields, i.e. columns associated with them. The data in PyRanges objects are stored in a pandas dataframe. This means the vast Python ecosystem for high-performance scientific computing is available to manipulate the data in PyRanges-objects. import pyranges as pr from pyranges import PyRanges import pandas as pd from io import StringIO f1 = &quot;&quot;&quot;Chromosome Start End Score Strand chr1 4 7 23.8 + chr1 6 11 0.13 - chr2 0 14 42.42 +&quot;&quot;&quot; df1 = pd.read_table(StringIO(f1), sep=&quot;\\s+&quot;) gr1 = PyRanges(df1) Now we can subset the PyRange in various ways: print(gr1) ## +--------------+-----------+-----------+-------------+----------+ ## | Chromosome | Start | End | Score | Strand | ## | (int8) | (int32) | (int32) | (float64) | (int8) | ## |--------------+-----------+-----------+-------------+----------| ## | chr1 | 4 | 7 | 23.8 | + | ## | chr1 | 6 | 11 | 0.13 | - | ## | chr2 | 0 | 14 | 42.42 | + | ## +--------------+-----------+-----------+-------------+----------+ ## PyRanges object has 3 sequences from 2 chromosomes. print(gr1[&quot;chr1&quot;, 0:5]) ## +--------------+-----------+-----------+-------------+----------+ ## | Chromosome | Start | End | Score | Strand | ## | (int8) | (int32) | (int32) | (float64) | (int8) | ## |--------------+-----------+-----------+-------------+----------| ## | chr1 | 4 | 7 | 23.8 | + | ## +--------------+-----------+-----------+-------------+----------+ ## PyRanges object has 1 sequences from 1 chromosomes. print(gr1[&quot;chr1&quot;, &quot;-&quot;, 6:100]) ## +--------------+-----------+-----------+-------------+----------+ ## | Chromosome | Start | End | Score | Strand | ## | (int8) | (int32) | (int32) | (float64) | (int8) | ## |--------------+-----------+-----------+-------------+----------| ## | chr1 | 6 | 11 | 0.13 | - | ## +--------------+-----------+-----------+-------------+----------+ ## PyRanges object has 1 sequences from 1 chromosomes. print(gr1.Score) ## 0 23.80 ## 1 0.13 ## 2 42.42 ## Name: Score, dtype: float64 And we can perform comparison operations with two PyRanges: f2 = &quot;&quot;&quot;Chromosome Start End Score Strand chr1 5 6 -0.01 - chr1 9 12 200 + chr3 0 14 21.21 -&quot;&quot;&quot; df2 = pd.read_table(StringIO(f2), sep=&quot;\\s+&quot;) gr2 = PyRanges(df2) print(gr2) ## +--------------+-----------+-----------+-------------+----------+ ## | Chromosome | Start | End | Score | Strand | ## | (int8) | (int32) | (int32) | (float64) | (int8) | ## |--------------+-----------+-----------+-------------+----------| ## | chr1 | 9 | 12 | 200 | + | ## | chr1 | 5 | 6 | -0.01 | - | ## | chr3 | 0 | 14 | 21.21 | - | ## +--------------+-----------+-----------+-------------+----------+ ## PyRanges object has 3 sequences from 2 chromosomes. print(gr1.intersect(gr2, strandedness=&quot;opposite&quot;)) ## +--------------+-----------+-----------+-------------+----------+ ## | Chromosome | Start | End | Score | Strand | ## | (int8) | (int32) | (int32) | (float64) | (int8) | ## |--------------+-----------+-----------+-------------+----------| ## | chr1 | 5 | 6 | 23.8 | + | ## | chr1 | 9 | 11 | 0.13 | - | ## +--------------+-----------+-----------+-------------+----------+ ## PyRanges object has 2 sequences from 1 chromosomes. print(gr1.intersect(gr2, strandedness=False)) ## +--------------+-----------+-----------+-------------+----------+ ## | Chromosome | Start | End | Score | Strand | ## | (int8) | (int32) | (int32) | (float64) | (int8) | ## |--------------+-----------+-----------+-------------+----------| ## | chr1 | 5 | 6 | 23.8 | + | ## | chr1 | 9 | 11 | 0.13 | - | ## +--------------+-----------+-----------+-------------+----------+ ## PyRanges object has 2 sequences from 1 chromosomes. There are also convenience methods for single PyRanges: print(gr1.cluster()) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (int8) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 4 | 11 | ## | chr2 | 0 | 14 | ## +--------------+-----------+-----------+ ## PyRanges object has 2 sequences from 2 chromosomes. The underlying dataframe can always be accessed: print(gr1.df) ## Chromosome Start End Score Strand ## 0 chr1 4 7 23.80 + ## 1 chr1 6 11 0.13 - ## 2 chr2 0 14 42.42 + "],
["loadingcreating-pyranges.html", "2 Loading/Creating PyRanges", " 2 Loading/Creating PyRanges A PyRanges object can be built in three ways: from a Pandas dataframe using the PyRanges constructor with the seqnames, starts and ends (and optionally strands), individually. using one of the custom reader functions for genomic data (read_bed, read_bam or read_gtf) Using a DataFrame If you instantiate a PyRanges object from a dataframe, the dataframe should at least contain the columns Chromosome, Start and End. A column called Strand is optional. Any other columns in the dataframe are treated as metadata. import pandas as pd import pyranges as pr chipseq = pr.get_example_path(&quot;chipseq.bed&quot;) df = pd.read_table(chipseq, header=None, names=&quot;Chromosome Start End Name Score Strand&quot;.split()) print(df.head(2)) ## Chromosome Start End Name Score Strand ## 0 chr8 28510032 28510057 U0 0 - ## 1 chr7 107153363 107153388 U0 0 - print(df.tail(2)) ## Chromosome Start End Name Score Strand ## 9998 chr1 194245558 194245583 U0 0 + ## 9999 chr8 57916061 57916086 U0 0 + print(pr.PyRanges(df)) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 10000 sequences from 24 chromosomes. Using constructor keywords The other way to instantiate a PyRanges object is to use the constructor with keywords: gr = pr.PyRanges(seqnames=df.Chromosome, starts=df.Start, ends=df.End) print(gr) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (int8) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 100079649 | 100079674 | ## | chr1 | 212609534 | 212609559 | ## | chr1 | 223587418 | 223587443 | ## | ... | ... | ... | ## | chrY | 8316773 | 8316798 | ## | chrY | 7463444 | 7463469 | ## | chrY | 7405376 | 7405401 | ## +--------------+-----------+-----------+ ## PyRanges object has 10000 sequences from 24 chromosomes. It is possible to make PyRanges objects out of basic Python datatypes: gr = pr.PyRanges(seqnames=&quot;chr1&quot;, strands=&quot;+&quot;, starts=[0, 1, 2], ends=(3, 4, 5)) print(gr) ## +--------------+-----------+-----------+----------+ ## | Chromosome | Start | End | Strand | ## | (int8) | (int64) | (int64) | (int8) | ## |--------------+-----------+-----------+----------| ## | chr1 | 0 | 3 | + | ## | chr1 | 1 | 4 | + | ## | chr1 | 2 | 5 | + | ## +--------------+-----------+-----------+----------+ ## PyRanges object has 3 sequences from 1 chromosomes. gr = pr.PyRanges(seqnames=&quot;chr1 chr2 chr3&quot;.split(), strands=&quot;+ - +&quot;.split(), starts=[0, 1, 2], ends=(3, 4, 5)) print(gr) ## +--------------+-----------+-----------+------------+ ## | Chromosome | Start | End | Strand | ## | (object) | (int64) | (int64) | (object) | ## |--------------+-----------+-----------+------------| ## | chr1 | 0 | 3 | + | ## | chr2 | 1 | 4 | - | ## | chr3 | 2 | 5 | + | ## +--------------+-----------+-----------+------------+ ## PyRanges object has 3 sequences from 3 chromosomes. Using read_bed, read_gtf or read_bam The pyranges library can create PyRanges from three common file formats, namely gtf, bed and bam 1. ensembl_path = pr.get_example_path(&quot;ensembl.gtf&quot;) gr = pr.read_gtf(ensembl_path) print(gr) ## +--------------+-----------+-----------+----------+------------+-----------------+-----------------+--------------+-----------------+ ## | Chromosome | Start | End | Strand | Feature | GeneID | TranscriptID | ExonNumber | ExonID | ## | (int8) | (int32) | (int32) | (int8) | (int8) | (object) | (object) | (int8) | (object) | ## |--------------+-----------+-----------+----------+------------+-----------------+-----------------+--------------+-----------------| ## | 1 | 11868 | 14409 | + | gene | ENSG00000223972 | nan | -1 | nan | ## | 1 | 11868 | 14409 | + | transcript | ENSG00000223972 | ENST00000456328 | -1 | nan | ## | 1 | 11868 | 12227 | + | exon | ENSG00000223972 | ENST00000456328 | 1 | ENSE00002234944 | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | 1 | 133373 | 133723 | - | exon | ENSG00000238009 | ENST00000610542 | 1 | ENSE00003748456 | ## | 1 | 129054 | 129223 | - | exon | ENSG00000238009 | ENST00000610542 | 2 | ENSE00003734824 | ## | 1 | 120873 | 120932 | - | exon | ENSG00000238009 | ENST00000610542 | 3 | ENSE00003740919 | ## +--------------+-----------+-----------+----------+------------+-----------------+-----------------+--------------+-----------------+ ## PyRanges object has 95 sequences from 1 chromosomes. This is the same behavior as bedtools intersect.↩ "],
["subsetting-pyranges.html", "3 Subsetting PyRanges", " 3 Subsetting PyRanges There are many ways to subset a PyRanges object. Each returns a new PyRanges object and does not change the old one. import pyranges as pr gr = pr.data.chipseq() print(gr) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 10000 sequences from 24 chromosomes. Chromosome only print(gr[&quot;chrX&quot;]) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chrX | 13843759 | 13843784 | U0 | 0 | + | ## | chrX | 114673546 | 114673571 | U0 | 0 | + | ## | chrX | 131816774 | 131816799 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrX | 5044527 | 5044552 | U0 | 0 | - | ## | chrX | 15281263 | 15281288 | U0 | 0 | - | ## | chrX | 120273723 | 120273748 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 282 sequences from 1 chromosomes. Chromosome and Strand print(gr[&quot;chrX&quot;, &quot;-&quot;]) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chrX | 41852946 | 41852971 | U0 | 0 | - | ## | chrX | 69979838 | 69979863 | U0 | 0 | - | ## | chrX | 34824145 | 34824170 | U0 | 0 | - | ## | ... | ... | ... | ... | ... | ... | ## | chrX | 5044527 | 5044552 | U0 | 0 | - | ## | chrX | 15281263 | 15281288 | U0 | 0 | - | ## | chrX | 120273723 | 120273748 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 151 sequences from 1 chromosomes. Chromosome and Slice print(gr[&quot;chrX&quot;, 150000000:160000000]) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chrX | 151324943 | 151324968 | U0 | 0 | + | ## | chrX | 152902449 | 152902474 | U0 | 0 | + | ## | chrX | 153632850 | 153632875 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrX | 151277790 | 151277815 | U0 | 0 | - | ## | chrX | 153037423 | 153037448 | U0 | 0 | - | ## | chrX | 153255924 | 153255949 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 8 sequences from 1 chromosomes. Chromosome, Strand and Slice print(gr[&quot;chrX&quot;, &quot;-&quot;, 150000000:160000000]) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chrX | 150277236 | 150277261 | U0 | 0 | - | ## | chrX | 151277790 | 151277815 | U0 | 0 | - | ## | chrX | 153037423 | 153037448 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 4 sequences from 1 chromosomes. Slice Only using slices returns all ranges from all chromosomes and strands within those coordinates. print(gr[0:100000]) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr2 | 33241 | 33266 | U0 | 0 | + | ## | chr2 | 13611 | 13636 | U0 | 0 | - | ## | chr2 | 32620 | 32645 | U0 | 0 | - | ## | chr4 | 45413 | 45438 | U0 | 0 | - | ## | chr3 | 87179 | 87204 | U0 | 0 | + | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 5 sequences from 24 chromosomes. Strand print(gr[&quot;+&quot;]) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 11942770 | 11942795 | U0 | 0 | + | ## | chrY | 8316773 | 8316798 | U0 | 0 | + | ## | chrY | 7463444 | 7463469 | U0 | 0 | + | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 5050 sequences from 24 chromosomes. Slice and Strand print(gr[&quot;+&quot;, 0:100000]) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr2 | 33241 | 33266 | U0 | 0 | + | ## | chr3 | 87179 | 87204 | U0 | 0 | + | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 2 sequences from 2 chromosomes. "],
["manipulating-the-data-in-pyranges.html", "4 Manipulating the data in PyRanges", " 4 Manipulating the data in PyRanges PyRanges is a thin wrapper around genomic data contained in pandas dataframes. This dataframe is accessible with the df attribute of the PyRanges object. import pyranges as pr gr = pr.data.chipseq() print(gr) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 10000 sequences from 24 chromosomes. print(gr.df.head(5)) ## Chromosome Start End Name Score Strand ## 18 chr1 212609534 212609559 U0 0 + ## 70 chr1 169887529 169887554 U0 0 + ## 129 chr1 216711011 216711036 U0 0 + ## 170 chr1 144227079 144227104 U0 0 + ## 196 chr1 148177825 148177850 U0 0 + To access a column of this dataframe, you can ask for the name directly from the PyRanges object. print(gr.Start.head()) ## 18 212609534 ## 70 169887529 ## 129 216711011 ## 170 144227079 ## 196 148177825 ## Name: Start, dtype: int32 You can directly insert a column by setting the attribute on the PyRanges object: gr.stupid_example = &quot;Hi There!&quot; print(gr) ## +--------------+-----------+-----------+------------+-----------+----------+------------------+ ## | Chromosome | Start | End | Name | Score | Strand | stupid_example | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | (object) | ## |--------------+-----------+-----------+------------+-----------+----------+------------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | Hi There! | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | Hi There! | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | Hi There! | ## | ... | ... | ... | ... | ... | ... | ... | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | Hi There! | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | Hi There! | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | Hi There! | ## +--------------+-----------+-----------+------------+-----------+----------+------------------+ ## PyRanges object has 10000 sequences from 24 chromosomes. gr.df.drop(&quot;stupid_example&quot;, axis=1, inplace=True) print(gr) ## +--------------+-----------+-----------+------------+-----------+----------+------------------+ ## | Chromosome | Start | End | Name | Score | Strand | stupid_example | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | (object) | ## |--------------+-----------+-----------+------------+-----------+----------+------------------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | Hi There! | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | Hi There! | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | Hi There! | ## | ... | ... | ... | ... | ... | ... | ... | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | Hi There! | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | Hi There! | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | Hi There! | ## +--------------+-----------+-----------+------------+-----------+----------+------------------+ ## PyRanges object has 10000 sequences from 24 chromosomes. All columns except Chromosome, Start, End and Strand can be changed in any way you please and more metadata-columns can be added by setting it on the PyRanges object. If you wish to change the Chromosome, Start, End and Strand columns you should make a copy of the data from the PyRanges object and use it to instantiate a new PyRanges object. import pandas as pd gr.Name = gr.Chromosome.astype(str) + &quot;_&quot; + pd.Series(range(len(gr))).astype(str) print(gr) ## +--------------+-----------+-----------+------------+-----------+----------+------------------+ ## | Chromosome | Start | End | Name | Score | Strand | stupid_example | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | (object) | ## |--------------+-----------+-----------+------------+-----------+----------+------------------| ## | chr1 | 212609534 | 212609559 | chr1_18 | 0 | + | Hi There! | ## | chr1 | 169887529 | 169887554 | chr1_70 | 0 | + | Hi There! | ## | chr1 | 216711011 | 216711036 | chr1_129 | 0 | + | Hi There! | ## | ... | ... | ... | ... | ... | ... | ... | ## | chrY | 13517892 | 13517917 | nan | 0 | - | Hi There! | ## | chrY | 8010951 | 8010976 | nan | 0 | - | Hi There! | ## | chrY | 7405376 | 7405401 | nan | 0 | - | Hi There! | ## +--------------+-----------+-----------+------------+-----------+----------+------------------+ ## PyRanges object has 10000 sequences from 24 chromosomes. "],
["concatenating-pyranges.html", "5 Concatenating PyRanges", " 5 Concatenating PyRanges Two PyRanges can be concatted by using the concat function: import pyranges as pr import pandas as pd from io import StringIO gr1 = pr.data.f1() gr2 = pr.data.f2() print(gr1) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 3 sequences from 1 chromosomes. print(gr2) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 1 | 2 | a | 0 | + | ## | chr1 | 6 | 7 | b | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 2 sequences from 1 chromosomes. concatted = gr1.concat(gr2) print(concatted) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 1 | 2 | a | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## | chr1 | 6 | 7 | b | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 5 sequences from 1 chromosomes. "],
["sorting-pyranges.html", "6 Sorting PyRanges", " 6 Sorting PyRanges pyranges are always sorted on chromosome and strand to enable faster operations. pyranges can in addition be sorted on start and end by using the function sort: import pyranges as pr import pandas as pd from io import StringIO cs = pr.data.chipseq() print(cs) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 10000 sequences from 24 chromosomes. cs_sorted = cs.sort() print(cs) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 212609534 | 212609559 | U0 | 0 | + | ## | chr1 | 169887529 | 169887554 | U0 | 0 | + | ## | chr1 | 216711011 | 216711036 | U0 | 0 | + | ## | ... | ... | ... | ... | ... | ... | ## | chrY | 13517892 | 13517917 | U0 | 0 | - | ## | chrY | 8010951 | 8010976 | U0 | 0 | - | ## | chrY | 7405376 | 7405401 | U0 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 10000 sequences from 24 chromosomes. This will sort them on Chromosome, Strand, Start and then End. Custom sorting can be done after you are done with the PyRanges-related functionality. Then you can extract the underlying dataframes with df and sort it: df = cs_sorted.df print(df.head()) ## Chromosome Start End Name Score Strand ## 0 chr1 1541598 1541623 U0 0 + ## 1 chr1 1599121 1599146 U0 0 + ## 2 chr1 3504032 3504057 U0 0 + ## 3 chr1 3806532 3806557 U0 0 + ## 4 chr1 5079955 5079980 U0 0 + df_sorted = df.sort_values([&quot;Chromosome&quot;, &quot;Start&quot;, &quot;End&quot;]) print(df_sorted.head(20)) ## Chromosome Start End Name Score Strand ## 0 chr1 1325303 1325328 U0 0 - ## 0 chr1 1541598 1541623 U0 0 + ## 1 chr1 1599121 1599146 U0 0 + ## 1 chr1 1820285 1820310 U0 0 - ## 2 chr1 2448322 2448347 U0 0 - ## 3 chr1 3046141 3046166 U0 0 - ## 4 chr1 3437168 3437193 U0 0 - ## 2 chr1 3504032 3504057 U0 0 + ## 5 chr1 3637087 3637112 U0 0 - ## 6 chr1 3681903 3681928 U0 0 - ## 3 chr1 3806532 3806557 U0 0 + ## 7 chr1 3953790 3953815 U0 0 - ## 8 chr1 5037292 5037317 U0 0 - ## 4 chr1 5079955 5079980 U0 0 + ## 5 chr1 5233543 5233568 U0 0 + ## 6 chr1 5301327 5301352 U0 0 + ## 7 chr1 5431308 5431333 U0 0 + ## 8 chr1 5449222 5449247 U0 0 + ## 9 chr1 5481750 5481775 U0 0 - ## 10 chr1 5699351 5699376 U0 0 - Now the df is sorted and start and end with interleaved strands. "],
["summarizing-pyranges.html", "7 Summarizing PyRanges", " 7 Summarizing PyRanges The summary-function gives a summary of the lengths of the intervals in a PyRange: import pyranges as pr import pandas as pd from io import StringIO gr = pr.data.epigenome_roadmap() print(gr) ## +--------------+-----------+-----------+----------------------------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+----------------------------------+-----------+----------| ## | chr1 | 9916 | 10115 | HWI-ST216_313:3:1203:10227:6568 | 1 | - | ## | chr1 | 9939 | 10138 | HWI-ST216_313:3:2301:15791:16298 | 1 | - | ## | chr1 | 9951 | 10150 | HWI-ST216_313:3:2205:20086:33508 | 1 | - | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 2305200 | 2305399 | HWI-ST216_313:3:1104:10021:17863 | 1 | - | ## | chr1 | 2305536 | 2305735 | HWI-ST216_313:3:1205:4034:30559 | 1 | - | ## | chr1 | 2305881 | 2306080 | HWI-ST216_313:3:1103:8788:36161 | 1 | - | ## +--------------+-----------+-----------+----------------------------------+-----------+----------+ ## PyRanges object has 10000 sequences from 1 chromosomes. print(gr.summary()) ## +-------+-----------+---------------------+-----------------------+ ## | | pyrange | coverage_stranded | coverage_unstranded | ## |-------+-----------+---------------------+-----------------------| ## | count | 10000 | 2415 | 2415 | ## | mean | 199 | 398.469 | 398.469 | ## | std | 0 | 345.098 | 345.098 | ## | min | 199 | 199 | 199 | ## | 25% | 199 | 199 | 199 | ## | 50% | 199 | 270 | 270 | ## | 75% | 199 | 448 | 448 | ## | max | 199 | 3975 | 3975 | ## +-------+-----------+---------------------+-----------------------+ ## None The column coverage_stranded tells you how the data looks when merging all overlapping features (taking strand into account), and coverage_unstranded is the same, but all features are merged independent of their strand. "],
["methods-for-manipulating-single-pyranges.html", "8 Methods for manipulating single PyRanges", " 8 Methods for manipulating single PyRanges There are several methods for manipulating the contents of a PyRanges. cluster is a mathematical set operation which creates a union of all the intervals in the ranges: import pyranges as pr f1 = pr.data.f1() print(f1.cluster()) ## +--------------+-----------+-----------+ ## | Chromosome | Start | End | ## | (int8) | (int32) | (int32) | ## |--------------+-----------+-----------| ## | chr1 | 3 | 7 | ## | chr1 | 8 | 9 | ## +--------------+-----------+-----------+ ## PyRanges object has 2 sequences from 1 chromosomes. tssify finds the starts of the regions (taking direction of transcription into account). It is named -ify to make clear that it is not finding the actual tsses (which requires metadata that signifies which intervals represent transcripts). f1.tssify() print(f1.tssify(slack=5)) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 0 | 9 | interval1 | 0 | + | ## | chr1 | 3 | 14 | interval3 | 0 | + | ## | chr1 | 2 | 13 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 3 sequences from 1 chromosomes. tesify finds the ends of the regions (taking direction of transcription into account). f1.tesify() print(f1.tesify(slack=5)) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 1 | 12 | interval1 | 0 | + | ## | chr1 | 4 | 15 | interval3 | 0 | + | ## | chr1 | 2 | 13 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 3 sequences from 1 chromosomes. slack extends the starts and ends of your interval. print(f1.slack(5)) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 0 | 11 | interval1 | 0 | + | ## | chr1 | 3 | 14 | interval3 | 0 | + | ## | chr1 | 0 | 12 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 3 sequences from 1 chromosomes. "],
["intersecting-ranges.html", "9 Intersecting Ranges", " 9 Intersecting Ranges PyRanges objects can be intersected with other PyRanges to find the subset of the genome that is contained in both. The regular intersect-method finds the intersection of all combinations of ranges: 2 import pyranges as pr gr = pr.data.aorta() gr2 = pr.data.aorta2() print(gr.intersect(gr2)) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 10073 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 10073 | 10152 | H3K27me3 | 5 | + | ## | chr1 | 10073 | 10223 | H3K27me3 | 1 | + | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 10241 | 10278 | H3K27me3 | 6 | - | ## | chr1 | 10241 | 10281 | H3K27me3 | 6 | - | ## | chr1 | 10241 | 10348 | H3K27me3 | 6 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 27 sequences from 1 chromosomes. The set_intersect method clusters the intervals (i.e. merges them into one) before finding the intersect: 3 print(gr.set_intersect(gr2)) ## +--------------+-----------+-----------+----------+ ## | Chromosome | Start | End | Strand | ## | (int8) | (int32) | (int32) | (int8) | ## |--------------+-----------+-----------+----------| ## | chr1 | 10073 | 10223 | + | ## | chr1 | 10246 | 10272 | + | ## | chr1 | 10280 | 10445 | + | ## | chr1 | 9988 | 10348 | - | ## +--------------+-----------+-----------+----------+ ## PyRanges object has 4 sequences from 1 chromosomes. Both methods also take a strandedness option, which can either be &quot;same&quot;, &quot;opposite&quot; or False/None print(gr.set_intersect(gr2, strandedness=&quot;opposite&quot;)) ## +--------------+-----------+-----------+----------+ ## | Chromosome | Start | End | Strand | ## | (int8) | (int32) | (int32) | (int8) | ## |--------------+-----------+-----------+----------| ## | chr1 | 9988 | 10223 | + | ## | chr1 | 10246 | 10348 | + | ## | chr1 | 10073 | 10272 | - | ## +--------------+-----------+-----------+----------+ ## PyRanges object has 4 sequences from 1 chromosomes. The intersect method also takes a how argument, which currently accepts the option &quot;containment&quot;, which requires that the intervals in self be completely within the intervals in other. f1 = pr.data.f1() print(f1) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 3 sequences from 1 chromosomes. f2 = pr.data.f2() print(f2) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 1 | 2 | a | 0 | + | ## | chr1 | 6 | 7 | b | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 2 sequences from 1 chromosomes. result = f2.intersect(f1, how=&quot;containment&quot;) print(result) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 6 | 7 | b | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 1 sequences from 1 chromosomes. This is the same behavior as bedtools intersect.↩ This is the same behavior as Bioconductor GenomicRanges intersect.↩ "],
["overlapping-ranges.html", "10 Overlapping Ranges", " 10 Overlapping Ranges PyRanges objects can be overlapped with other PyRanges to report the intervals in self that overlap with those in other. import pyranges as pr gr = pr.data.aorta() gr2 = pr.data.aorta2() print(gr.overlap(gr2)) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 9953 | 10152 | H3K27me3 | 5 | + | ## | chr1 | 10024 | 10223 | H3K27me3 | 1 | + | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 27 sequences from 1 chromosomes. Both methods also take a strandedness option, which can either be &quot;same&quot;, &quot;opposite&quot; or False/None print(gr.overlap(gr2, strandedness=&quot;opposite&quot;)) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 10127 | 10326 | H3K27me3 | 1 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 22 sequences from 1 chromosomes. "],
["joining-ranges.html", "11 Joining Ranges", " 11 Joining Ranges You can combine all the intervals that overlap in two PyRanges objects with the join method. If you do not use a suffix, the default _b is chosen. import pyranges as pr gr = pr.data.aorta() gr2 = pr.data.aorta2() print(gr.join(gr2, suffix=&quot;_2&quot;)) ## +--------------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_b | End_b | Name_b | Score_b | Strand_b | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------| ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | 10073 | 10272 | Input | 1 | + | ## | chr1 | 9953 | 10152 | H3K27me3 | 5 | + | 10073 | 10272 | Input | 1 | + | ## | chr1 | 10024 | 10223 | H3K27me3 | 1 | + | 10073 | 10272 | Input | 1 | + | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | 10079 | 10278 | Input | 1 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | 10082 | 10281 | Input | 1 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | 10149 | 10348 | Input | 1 | - | ## +--------------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------+ ## PyRanges object has 27 sequences from 1 chromosomes. Both methods also take a strandedness option, which can either be &quot;same&quot;, &quot;opposite&quot; or False/None print(gr.join(gr2, strandedness=&quot;opposite&quot;)) ## +--------------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_b | End_b | Name_b | Score_b | Strand_b | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------| ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | 9988 | 10187 | Input | 1 | - | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | 10079 | 10278 | Input | 1 | - | ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | 10082 | 10281 | Input | 1 | - | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | chr1 | 10127 | 10326 | H3K27me3 | 1 | - | 10280 | 10479 | Input | 1 | + | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | 10073 | 10272 | Input | 1 | + | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | 10280 | 10479 | Input | 1 | + | ## +--------------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------+ ## PyRanges object has 22 sequences from 1 chromosomes. The join method also takes a how argument, which currently accepts the option &quot;containment&quot;, which requires that the intervals in self be completely within the intervals in other. f1 = pr.data.f1() f2 = pr.data.f2() print(f2.join(f1, how=&quot;containment&quot;)) ## +--------------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_b | End_b | Name_b | Score_b | Strand_b | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------| ## | chr1 | 6 | 7 | b | 0 | - | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------+ ## PyRanges object has 1 sequences from 1 chromosomes. The join method also takes the argument new_pos which can either be unionor ìntersection. The default suffixes are [&quot;_a&quot;, &quot;_b&quot;], but a suffixes argument overrides this. print(f2.join(f1, new_pos=&quot;intersection&quot;)) ## +--------------+-----------+-----------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------+ ## | Chromosome | Start | End | Start_a | End_a | Name_a | Score_a | Strand | Start_b | End_b | Name_b | Score_b | Strand_b | ## | (int8) | (int64) | (int64) | (int32) | (int32) | (object) | (int64) | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------| ## | chr1 | 6 | 7 | 6 | 7 | b | 0 | - | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------+ ## PyRanges object has 1 sequences from 1 chromosomes. "],
["finding-the-closest-intervals.html", "12 Finding the closest intervals", " 12 Finding the closest intervals With the nearest-method, you can search for the feature in other that is nearest the ones in self. import pyranges as pr gr = pr.data.chipseq() gr2 = pr.data.chipseq_background() print(gr.nearest(gr2, suffix=&quot;_Input&quot;)) ## +--------------+-----------+-----------+------------+-----------+----------+---------------+-------------+--------------+---------------+----------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_Input | End_Input | Name_Input | Score_Input | Strand_Input | Distance | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | (int64) | ## |--------------+-----------+-----------+------------+-----------+----------+---------------+-------------+--------------+---------------+----------------+------------| ## | chr1 | 1541598 | 1541623 | U0 | 0 | + | 1041102 | 1041127 | U0 | 0 | + | 500472 | ## | chr1 | 1599121 | 1599146 | U0 | 0 | + | 2129359 | 2129384 | U0 | 0 | + | 530214 | ## | chr1 | 3504032 | 3504057 | U0 | 0 | + | 3135705 | 3135730 | U0 | 0 | + | 368303 | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | chrY | 21910706 | 21910731 | U0 | 0 | - | 11936866 | 11936891 | U0 | 0 | - | 9973816 | ## | chrY | 22054002 | 22054027 | U0 | 0 | - | 11936866 | 11936891 | U0 | 0 | - | 10117112 | ## | chrY | 22210637 | 22210662 | U0 | 0 | - | 11936866 | 11936891 | U0 | 0 | - | 10273747 | ## +--------------+-----------+-----------+------------+-----------+----------+---------------+-------------+--------------+---------------+----------------+------------+ ## PyRanges object has 10000 sequences from 24 chromosomes. The nearest method takes a strandedness option, which can either be &quot;same&quot;, &quot;opposite&quot; or False/None print(gr.nearest(gr2, suffix=&quot;_Input&quot;, strandedness=&quot;opposite&quot;)) ## +--------------+-----------+-----------+------------+-----------+----------+---------------+-------------+--------------+---------------+----------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_Input | End_Input | Name_Input | Score_Input | Strand_Input | Distance | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | (int64) | ## |--------------+-----------+-----------+------------+-----------+----------+---------------+-------------+--------------+---------------+----------------+------------| ## | chr1 | 226987592 | 226987617 | U0 | 0 | + | 226987603 | 226987628 | U0 | 0 | - | 0 | ## | chr1 | 1541598 | 1541623 | U0 | 0 | + | 1770383 | 1770408 | U0 | 0 | - | 228761 | ## | chr1 | 1599121 | 1599146 | U0 | 0 | + | 1770383 | 1770408 | U0 | 0 | - | 171238 | ## | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ## | chrY | 21910706 | 21910731 | U0 | 0 | - | 20557165 | 20557190 | U0 | 0 | + | 1353517 | ## | chrY | 22054002 | 22054027 | U0 | 0 | - | 20557165 | 20557190 | U0 | 0 | + | 1496813 | ## | chrY | 22210637 | 22210662 | U0 | 0 | - | 20557165 | 20557190 | U0 | 0 | + | 1653448 | ## +--------------+-----------+-----------+------------+-----------+----------+---------------+-------------+--------------+---------------+----------------+------------+ ## PyRanges object has 10000 sequences from 24 chromosomes. The nearest method also takes two variables, namely how and overlap. How can take the values None, &quot;upstream&quot;, &quot;downstream&quot;, &quot;next&quot; and &quot;previous&quot;. &quot;upstream&quot; and &quot;downstream&quot; are always in reference to the PyRange the method is called on. &quot;next&quot; (to the right) and &quot;previous&quot; (to the left) are most useful to implement your own custom nearest methods. The default is None, which means that PyRanges looks in both directions. The overlap argument is a bool which indicates whether you want to include overlaps or not. f1 = pr.data.f1() print(f1) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 3 sequences from 1 chromosomes. f2 = pr.data.f2() print(f2) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 1 | 2 | a | 0 | + | ## | chr1 | 6 | 7 | b | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 2 sequences from 1 chromosomes. print(f2.nearest(f1, strandedness=&quot;opposite&quot;, how=&quot;next&quot;)) ## +--------------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_b | End_b | Name_b | Score_b | Strand_b | Distance | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | (int64) | ## |--------------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------+------------| ## | chr1 | 1 | 2 | a | 0 | + | 5 | 7 | interval2 | 0 | - | 4 | ## | chr1 | 6 | 7 | b | 0 | - | 8 | 9 | interval3 | 0 | + | 2 | ## +--------------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------+------------+ ## PyRanges object has 2 sequences from 1 chromosomes. print(f2.nearest(f1, how=&quot;upstream&quot;)) ## +--------------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_b | End_b | Name_b | Score_b | Strand_b | Distance | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | (int64) | ## |--------------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------+------------| ## | chr1 | 6 | 7 | b | 0 | - | 5 | 7 | interval2 | 0 | - | 0 | ## +--------------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------+------------+ ## PyRanges object has 1 sequences from 1 chromosomes. print(f2.nearest(f1, strandedness=&quot;opposite&quot;, how=&quot;next&quot;, overlap=False)) ## +--------------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------+------------+ ## | Chromosome | Start | End | Name | Score | Strand | Start_b | End_b | Name_b | Score_b | Strand_b | Distance | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | (int64) | ## |--------------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------+------------| ## | chr1 | 1 | 2 | a | 0 | + | 5 | 7 | interval2 | 0 | - | 4 | ## | chr1 | 6 | 7 | b | 0 | - | 8 | 9 | interval3 | 0 | + | 2 | ## +--------------+-----------+-----------+------------+-----------+----------+-----------+-----------+------------+-----------+------------+------------+ ## PyRanges object has 2 sequences from 1 chromosomes. "],
["turning-ranges-into-rles.html", "13 Turning Ranges into RLEs", " 13 Turning Ranges into RLEs Ranges can be turned into dicts of run length encodings with the coverage function: import pyranges as pr gr = pr.data.aorta() print(gr) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 9939 | 10138 | H3K27me3 | 7 | + | ## | chr1 | 9953 | 10152 | H3K27me3 | 5 | + | ## | chr1 | 10024 | 10223 | H3K27me3 | 1 | + | ## | ... | ... | ... | ... | ... | ... | ## | chr1 | 10001 | 10200 | H3K27me3 | 5 | - | ## | chr1 | 10127 | 10326 | H3K27me3 | 1 | - | ## | chr1 | 10241 | 10440 | H3K27me3 | 6 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 11 sequences from 1 chromosomes. print(gr.coverage()) ## chr1 + ## -- ## +--------+--------+------+------+-------+------+------+------+-------+---------+-------+ ## | Runs | 9939 | 14 | 71 | 114 | 14 | 71 | 23 | 199 | 99801 | 199 | ## |--------+--------+------+------+-------+------+------+------+-------+---------+-------| ## | Values | 0.0 | 1.0 | 2.0 | 3.0 | 2.0 | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+--------+------+------+-------+------+------+------+-------+---------+-------+ ## Rle of length 110445 containing 10 elements ## ## chr1 - ## -- ## +--------+--------+------+------+------+-------+---------+------+------+------+------+-------+ ## | Runs | 9916 | 35 | 27 | 23 | 114 | ... | 27 | 23 | 41 | 85 | 114 | ## |--------+--------+------+------+------+-------+---------+------+------+------+------+-------| ## | Values | 0.0 | 1.0 | 2.0 | 3.0 | 4.0 | ... | 3.0 | 2.0 | 1.0 | 2.0 | 1.0 | ## +--------+--------+------+------+------+-------+---------+------+------+------+------+-------+ ## Rle of length 10440 containing 12 elements ## PyRles object with 2 chromosomes/strand pairs. print(gr.coverage(strand=True)) ## chr1 + ## -- ## +--------+--------+------+------+-------+------+------+------+-------+---------+-------+ ## | Runs | 9939 | 14 | 71 | 114 | 14 | 71 | 23 | 199 | 99801 | 199 | ## |--------+--------+------+------+-------+------+------+------+-------+---------+-------| ## | Values | 0.0 | 1.0 | 2.0 | 3.0 | 2.0 | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+--------+------+------+-------+------+------+------+-------+---------+-------+ ## Rle of length 110445 containing 10 elements ## ## chr1 - ## -- ## +--------+--------+------+------+------+-------+---------+------+------+------+------+-------+ ## | Runs | 9916 | 35 | 27 | 23 | 114 | ... | 27 | 23 | 41 | 85 | 114 | ## |--------+--------+------+------+------+-------+---------+------+------+------+------+-------| ## | Values | 0.0 | 1.0 | 2.0 | 3.0 | 4.0 | ... | 3.0 | 2.0 | 1.0 | 2.0 | 1.0 | ## +--------+--------+------+------+------+-------+---------+------+------+------+------+-------+ ## Rle of length 10440 containing 12 elements ## PyRles object with 2 chromosomes/strand pairs. You can also create coverage for an any numeric value in your PyRanges: print(gr.coverage(&quot;Score&quot;)) ## chr1 + ## -- ## +--------+--------+------+------+-------+------+------+------+-------+---------+-------+ ## | Runs | 9939 | 14 | 71 | 114 | 14 | 71 | 23 | 199 | 99801 | 199 | ## |--------+--------+------+------+-------+------+------+------+-------+---------+-------| ## | Values | 0.0 | 7.0 | 12.0 | 13.0 | 6.0 | 1.0 | 0.0 | 4.0 | 0.0 | 1.0 | ## +--------+--------+------+------+-------+------+------+------+-------+---------+-------+ ## Rle of length 110445 containing 10 elements ## ## chr1 - ## -- ## +--------+--------+------+------+------+-------+---------+------+------+------+------+-------+ ## | Runs | 9916 | 35 | 27 | 23 | 114 | ... | 27 | 23 | 41 | 85 | 114 | ## |--------+--------+------+------+------+-------+---------+------+------+------+------+-------| ## | Values | 0.0 | 5.0 | 13.0 | 20.0 | 25.0 | ... | 13.0 | 6.0 | 1.0 | 7.0 | 6.0 | ## +--------+--------+------+------+------+-------+---------+------+------+------+------+-------+ ## Rle of length 10440 containing 12 elements ## PyRles object with 2 chromosomes/strand pairs. "],
["an-introduction-to-rles.html", "14 An introduction to RLEs", " 14 An introduction to RLEs Rles are runlengths - a datastructure that can compactly describe the coverage of a genome (or some other score that is associated with each nucleotide). It is used for efficient genomewide arithmetic operations on these scores. from pyrle import Rle # or: from pyranges import Rle runs = [10, 10, 10, 10] values = [0, 1, 0, 0] r1 = Rle(runs, values) print(r1) ## +--------+------+------+------+ ## | Runs | 10 | 10 | 20 | ## |--------+------+------+------| ## | Values | 0.0 | 1.0 | 0.0 | ## +--------+------+------+------+ ## Rle of length 40 containing 3 elements runs2 = [11, 9, 20] values2 = [100, 0, 100] r2 = Rle(runs2, values2) print(r2) ## +--------+-------+-----+-------+ ## | Runs | 11 | 9 | 20 | ## |--------+-------+-----+-------| ## | Values | 100.0 | 0.0 | 100.0 | ## +--------+-------+-----+-------+ ## Rle of length 40 containing 3 elements print(r1 + r2) ## +--------+-------+-------+-----+-------+ ## | Runs | 10 | 1 | 9 | 20 | ## |--------+-------+-------+-----+-------| ## | Values | 100.0 | 101.0 | 1.0 | 100.0 | ## +--------+-------+-------+-----+-------+ ## Rle of length 40 containing 4 elements print(r1 * r2) ## +--------+------+-------+------+ ## | Runs | 10 | 1 | 29 | ## |--------+------+-------+------| ## | Values | 0.0 | 100.0 | 0.0 | ## +--------+------+-------+------+ ## Rle of length 40 containing 3 elements print(r1.runs) ## [10 10 20] print(r1.values) ## [0. 1. 0.] r1 = r1 + 5 print(r1) ## +--------+------+------+------+ ## | Runs | 10 | 10 | 20 | ## |--------+------+------+------| ## | Values | 5.0 | 6.0 | 5.0 | ## +--------+------+------+------+ ## Rle of length 40 containing 3 elements print(r2 / r1) ## +--------+------+--------------------+-----+------+ ## | Runs | 10 | 1 | 9 | 20 | ## |--------+------+--------------------+-----+------| ## | Values | 20.0 | 16.666666666666668 | 0.0 | 20.0 | ## +--------+------+--------------------+-----+------+ ## Rle of length 40 containing 4 elements "],
["run-length-encoding-dicts.html", "15 Run Length Encoding dicts", " 15 Run Length Encoding dicts Since you need more than one run length to describe a genome with multiple chromosomes, pyranges has a datastructure called PyRles for collections of Rles. It can be created from a PyRanges object by invoking the coverage function. Rledicts support the arithmetic operations +, -, /, and *. import pyranges as pr gr = pr.data.chipseq() gr_bg = pr.data.chipseq_background() cs = gr.coverage() print(cs) ## chr1 + ## +--------+-----------+------+---------+------+-----------+---------+------+-----------+------+-----------+------+ ## | Runs | 1541598 | 25 | 57498 | 25 | 1904886 | ... | 25 | 2952580 | 25 | 1156833 | 25 | ## |--------+-----------+------+---------+------+-----------+---------+------+-----------+------+-----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+---------+------+-----------+---------+------+-----------+------+-----------+------+ ## Rle of length 247134924 containing 894 elements ## ... ## chrY - ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------+ ## | Runs | 7046809 | 25 | 358542 | 25 | 296582 | ... | 25 | 143271 | 25 | 156610 | 25 | ## |--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------+ ## Rle of length 22210662 containing 32 elements ## PyRles object with 48 chromosomes/strand pairs. bg = gr_bg.coverage() print(bg) ## chr1 + ## +--------+-----------+------+-----------+------+----------+---------+------+----------+------+-----------+------+ ## | Runs | 1041102 | 25 | 1088232 | 25 | 109724 | ... | 25 | 719119 | 25 | 1774357 | 25 | ## |--------+-----------+------+-----------+------+----------+---------+------+----------+------+-----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+-----------+------+----------+---------+------+----------+------+-----------+------+ ## Rle of length 245614348 containing 724 elements ## ... ## chrY - ## +--------+------------+------+--------+------+-----------+------+---------+------+------------+------+ ## | Runs | 10629111 | 25 | 3320 | 25 | 1286333 | 25 | 18027 | 25 | 45465323 | 25 | ## |--------+------------+------+--------+------+-----------+------+---------+------+------------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+------------+------+--------+------+-----------+------+---------+------+------------+------+ ## Rle of length 57402239 containing 10 elements ## PyRles object with 50 chromosomes/strand pairs. print(cs + bg) ## chr1 + ## +--------+-----------+------+----------+------+---------+---------+------+----------+------+-----------+------+ ## | Runs | 1041102 | 25 | 500471 | 25 | 57498 | ... | 25 | 363693 | 25 | 1156833 | 25 | ## |--------+-----------+------+----------+------+---------+---------+------+----------+------+-----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+------+---------+---------+------+----------+------+-----------+------+ ## Rle of length 247134924 containing 1618 elements ## ... ## chrY - ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+------------+------+ ## | Runs | 7046809 | 25 | 358542 | 25 | 296582 | ... | 25 | 156610 | 25 | 35191552 | 25 | ## |--------+-----------+------+----------+------+----------+---------+------+----------+------+------------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+------------+------+ ## Rle of length 57402239 containing 42 elements ## PyRles object with 50 chromosomes/strand pairs. When using arithmetic operations with a stranded and an unstranded PyRle, the stranded PyRle is automatically demoted to an unstranded PyRle. bg_stranded = gr_bg.coverage(strand=True) print(bg_stranded) ## chr1 + ## +--------+-----------+------+-----------+------+----------+---------+------+----------+------+-----------+------+ ## | Runs | 1041102 | 25 | 1088232 | 25 | 109724 | ... | 25 | 719119 | 25 | 1774357 | 25 | ## |--------+-----------+------+-----------+------+----------+---------+------+----------+------+-----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+-----------+------+----------+---------+------+----------+------+-----------+------+ ## Rle of length 245614348 containing 724 elements ## ... ## chrY - ## +--------+------------+------+--------+------+-----------+------+---------+------+------------+------+ ## | Runs | 10629111 | 25 | 3320 | 25 | 1286333 | 25 | 18027 | 25 | 45465323 | 25 | ## |--------+------------+------+--------+------+-----------+------+---------+------+------------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+------------+------+--------+------+-----------+------+---------+------+------------+------+ ## Rle of length 57402239 containing 10 elements ## PyRles object with 50 chromosomes/strand pairs. print(cs + bg_stranded) ## chr1 + ## +--------+-----------+------+----------+------+---------+---------+------+----------+------+-----------+------+ ## | Runs | 1041102 | 25 | 500471 | 25 | 57498 | ... | 25 | 363693 | 25 | 1156833 | 25 | ## |--------+-----------+------+----------+------+---------+---------+------+----------+------+-----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+------+---------+---------+------+----------+------+-----------+------+ ## Rle of length 247134924 containing 1618 elements ## ... ## chrY - ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+------------+------+ ## | Runs | 7046809 | 25 | 358542 | 25 | 296582 | ... | 25 | 156610 | 25 | 35191552 | 25 | ## |--------+-----------+------+----------+------+----------+---------+------+----------+------+------------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+------------+------+ ## Rle of length 57402239 containing 42 elements ## PyRles object with 50 chromosomes/strand pairs. Like Rles, PyGRles supports arithmetic operations with numbers. print((0.67 + cs) * 5) ## chr1 + ## +--------+-----------+------+---------+------+-----------+---------+------+-----------+------+-----------+------+ ## | Runs | 1541598 | 25 | 57498 | 25 | 1904886 | ... | 25 | 2952580 | 25 | 1156833 | 25 | ## |--------+-----------+------+---------+------+-----------+---------+------+-----------+------+-----------+------| ## | Values | 3.35 | 8.35 | 3.35 | 8.35 | 3.35 | ... | 8.35 | 3.35 | 8.35 | 3.35 | 8.35 | ## +--------+-----------+------+---------+------+-----------+---------+------+-----------+------+-----------+------+ ## Rle of length 247134924 containing 894 elements ## ... ## chrY - ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------+ ## | Runs | 7046809 | 25 | 358542 | 25 | 296582 | ... | 25 | 143271 | 25 | 156610 | 25 | ## |--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------| ## | Values | 3.35 | 8.35 | 3.35 | 8.35 | 3.35 | ... | 8.35 | 3.35 | 8.35 | 3.35 | 8.35 | ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------+ ## Rle of length 22210662 containing 32 elements ## PyRles object with 48 chromosomes/strand pairs. "],
["subsetting-rles.html", "16 Subsetting Rles", " 16 Subsetting Rles Rles can be subsetted using an integer (or a list of integers) to get the RLE value at one or more points. from pyrle import Rle r = Rle([3, 2, 1, 1, 1, 1], [0, 1, 2, 1, 0, 1]) print(r[3]) ## 1.0 print(r[[3, 5, 7]]) ## [1. 2. 0.] To get the run length of one or more slices use a slice or a dataframe with (at least) the columns Start and End. import pandas as pd from pyrle import Rle r = Rle([3, 2, 1, 1, 1, 1], [0, 1, 2, 1, 0, 1]) print(r[5:10]) ## +--------+-----+-----+-----+-----+ ## | Runs | 1 | 1 | 1 | 1 | ## |--------+-----+-----+-----+-----| ## | Values | 2.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----+-----+-----+-----+ ## Rle of length 4 containing 4 elements df = pd.DataFrame({&quot;Start&quot;: [2, 5], &quot;End&quot;: [4, 900]}) print(df.to_csv(index=False)) ## Start,End ## 2,4 ## 5,900 print(r[df]) ## [+--------+-----+-----+ ## | Runs | 1 | 1 | ## |--------+-----+-----| ## | Values | 0.0 | 1.0 | ## +--------+-----+-----+ ## Rle of length 2 containing 2 elements, +--------+-----+-----+-----+-----+ ## | Runs | 1 | 1 | 1 | 1 | ## |--------+-----+-----+-----+-----| ## | Values | 2.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----+-----+-----+-----+ ## Rle of length 4 containing 4 elements] "],
["subsetting-pyrles.html", "17 Subsetting PyRles", " 17 Subsetting PyRles Rles can be subsetted on Chromosome, Strand or Chromosome/Strand pairs import pyranges as pr gr = pr.data.chipseq() c = gr.coverage() print(c[&quot;chr1&quot;]) ## chr1 + ## -- ## +--------+-----------+------+---------+------+-----------+---------+------+-----------+------+-----------+------+ ## | Runs | 1541598 | 25 | 57498 | 25 | 1904886 | ... | 25 | 2952580 | 25 | 1156833 | 25 | ## |--------+-----------+------+---------+------+-----------+---------+------+-----------+------+-----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+---------+------+-----------+---------+------+-----------+------+-----------+------+ ## Rle of length 247134924 containing 894 elements ## ## chr1 - ## -- ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------+ ## | Runs | 1325303 | 25 | 494957 | 25 | 628012 | ... | 25 | 438610 | 25 | 962494 | 25 | ## |--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------+ ## Rle of length 246145556 containing 868 elements ## PyRles object with 2 chromosomes/strand pairs. print(c[&quot;chr1&quot;, &quot;+&quot;]) ## +--------+-----------+------+---------+------+-----------+---------+------+-----------+------+-----------+------+ ## | Runs | 1541598 | 25 | 57498 | 25 | 1904886 | ... | 25 | 2952580 | 25 | 1156833 | 25 | ## |--------+-----------+------+---------+------+-----------+---------+------+-----------+------+-----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+---------+------+-----------+---------+------+-----------+------+-----------+------+ ## Rle of length 247134924 containing 894 elements print(c[&quot;-&quot;]) ## chr1 - ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------+ ## | Runs | 1325303 | 25 | 494957 | 25 | 628012 | ... | 25 | 438610 | 25 | 962494 | 25 | ## |--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------+ ## Rle of length 246145556 containing 868 elements ## ... ## chrY - ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------+ ## | Runs | 7046809 | 25 | 358542 | 25 | 296582 | ... | 25 | 143271 | 25 | 156610 | 25 | ## |--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----------+------+----------+------+----------+---------+------+----------+------+----------+------+ ## Rle of length 22210662 containing 32 elements ## PyRles object with 24 chromosomes/strand pairs. To get the coverage of one or more intervals, you can use a PyRanges-object to subset the PyRles import pyranges as pr f1 = pr.data.f1() print(f1) ## +--------------+-----------+-----------+------------+-----------+----------+ ## | Chromosome | Start | End | Name | Score | Strand | ## | (int8) | (int32) | (int32) | (object) | (int64) | (int8) | ## |--------------+-----------+-----------+------------+-----------+----------| ## | chr1 | 3 | 6 | interval1 | 0 | + | ## | chr1 | 8 | 9 | interval3 | 0 | + | ## | chr1 | 5 | 7 | interval2 | 0 | - | ## +--------------+-----------+-----------+------------+-----------+----------+ ## PyRanges object has 3 sequences from 1 chromosomes. f1_c = f1.coverage() print(f1_c) ## chr1 + ## -- ## +--------+-----+-----+-----+-----+ ## | Runs | 3 | 3 | 2 | 1 | ## |--------+-----+-----+-----+-----| ## | Values | 0.0 | 1.0 | 0.0 | 1.0 | ## +--------+-----+-----+-----+-----+ ## Rle of length 9 containing 4 elements ## ## chr1 - ## -- ## +--------+-----+-----+ ## | Runs | 5 | 2 | ## |--------+-----+-----| ## | Values | 0.0 | 1.0 | ## +--------+-----+-----+ ## Rle of length 7 containing 2 elements ## PyRles object with 2 chromosomes/strand pairs. print(f1_c[f1]) ## {(&#39;chr1&#39;, &#39;+&#39;): [(array([3]), array([1.])), (array([1]), array([1.]))], (&#39;chr1&#39;, &#39;-&#39;): [(array([2]), array([1.]))]} "],
["using-multiple-cores.html", "18 Using multiple cores", " 18 Using multiple cores Most PyRanges and PyRle-operations can be run in parallel. Even user-made functions can be run in parallel using the apply or apply_pair functions. PyRanges uses Ray, a “flexible, high-performance distributed execution framework” to run in parallel-mode. To start Ray in parallel-mode you need to import and initialize Ray before importing PyRanges or PyRles. import ray ray.init() # then import pyranges as pr Now PyRanges and PyRles is running in multi-core mode. Note: By default PyRanges uses no extra cores. Unless the data are reasonably big (at least 10^7) number of intervals or the functions are very long-running, running in parallel-mode is actually more time-consuming than single-core mode. Also, if the PyRanges contains a lot of text data, there is less to be gained by using multithreading. This is due to how strings are represented in memory in Python and Pandas. However, this is something that will be fixed in pandas2 and then the multithreading capabilities of PyRanges will be more useful for these kinds of data. "]
]
